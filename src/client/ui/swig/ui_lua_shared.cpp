/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.8
 *
 * This file is not intended to be easily readable and contains a number of
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG
 * interface file instead.
 * ----------------------------------------------------------------------------- */


#ifndef SWIGLUA
#define SWIGLUA
#endif

#define SWIG_LUA_TARGET SWIG_LUA_FLAVOR_LUA
#define SWIG_LUA_MODULE_GLOBAL


#ifdef __cplusplus
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigMovePointer {
    T *ptr;
    SwigMovePointer(T *p) : ptr(p) { }
    ~SwigMovePointer() { delete ptr; }
    SwigMovePointer& operator=(SwigMovePointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigMovePointer tmp(new T(t)); pointer = tmp; return *this; }
  operator T&() const { return *pointer.ptr; }
  T *operator&() { return pointer.ptr; }
};

template <typename T> T SwigValueInit() {
  return T();
}
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__))
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__))
# else
#   define SWIGUNUSED
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#  ifndef GCC_HASCLASSVISIBILITY
#    define GCC_HASCLASSVISIBILITY
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif

/* Deal with Apple's deprecated 'AssertMacros.h' from Carbon-framework */
#if defined(__APPLE__) && !defined(__ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES)
# define __ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES 0
#endif

/* Intel's compiler complains if a variable which was never initialised is
 * cast to void, which is a common idiom which we use to indicate that we
 * are aware a variable isn't used.  So we just silence that warning.
 * See: https://github.com/swig/swig/issues/192 for more discussion.
 */
#ifdef __INTEL_COMPILER
# pragma warning disable 592
#endif

/* -----------------------------------------------------------------------------
 * swigrun.swg
 *
 * This file contains generic C API SWIG runtime support for pointer
 * type checking.
 * ----------------------------------------------------------------------------- */

/* This should only be incremented when either the layout of swig_type_info changes,
   or for whatever reason, the runtime changes incompatibly */
#define SWIG_RUNTIME_VERSION "4"

/* define SWIG_TYPE_TABLE_NAME as "SWIG_TYPE_TABLE" */
#ifdef SWIG_TYPE_TABLE
# define SWIG_QUOTE_STRING(x) #x
# define SWIG_EXPAND_AND_QUOTE_STRING(x) SWIG_QUOTE_STRING(x)
# define SWIG_TYPE_TABLE_NAME SWIG_EXPAND_AND_QUOTE_STRING(SWIG_TYPE_TABLE)
#else
# define SWIG_TYPE_TABLE_NAME
#endif

/*
  You can use the SWIGRUNTIME and SWIGRUNTIMEINLINE macros for
  creating a static or dynamic library from the SWIG runtime code.
  In 99.9% of the cases, SWIG just needs to declare them as 'static'.

  But only do this if strictly necessary, ie, if you have problems
  with your compiler or suchlike.
*/

#ifndef SWIGRUNTIME
# define SWIGRUNTIME SWIGINTERN
#endif

#ifndef SWIGRUNTIMEINLINE
# define SWIGRUNTIMEINLINE SWIGRUNTIME SWIGINLINE
#endif

/*  Generic buffer size */
#ifndef SWIG_BUFFER_SIZE
# define SWIG_BUFFER_SIZE 1024
#endif

/* Flags for pointer conversions */
#define SWIG_POINTER_DISOWN        0x1
#define SWIG_CAST_NEW_MEMORY       0x2

/* Flags for new pointer objects */
#define SWIG_POINTER_OWN           0x1


/*
   Flags/methods for returning states.

   The SWIG conversion methods, as ConvertPtr, return an integer
   that tells if the conversion was successful or not. And if not,
   an error code can be returned (see swigerrors.swg for the codes).

   Use the following macros/flags to set or process the returning
   states.

   In old versions of SWIG, code such as the following was usually written:

     if (SWIG_ConvertPtr(obj,vptr,ty.flags) != -1) {
       // success code
     } else {
       //fail code
     }

   Now you can be more explicit:

    int res = SWIG_ConvertPtr(obj,vptr,ty.flags);
    if (SWIG_IsOK(res)) {
      // success code
    } else {
      // fail code
    }

   which is the same really, but now you can also do

    Type *ptr;
    int res = SWIG_ConvertPtr(obj,(void **)(&ptr),ty.flags);
    if (SWIG_IsOK(res)) {
      // success code
      if (SWIG_IsNewObj(res) {
        ...
	delete *ptr;
      } else {
        ...
      }
    } else {
      // fail code
    }

   I.e., now SWIG_ConvertPtr can return new objects and you can
   identify the case and take care of the deallocation. Of course that
   also requires SWIG_ConvertPtr to return new result values, such as

      int SWIG_ConvertPtr(obj, ptr,...) {
        if (<obj is ok>) {
          if (<need new object>) {
            *ptr = <ptr to new allocated object>;
            return SWIG_NEWOBJ;
          } else {
            *ptr = <ptr to old object>;
            return SWIG_OLDOBJ;
          }
        } else {
          return SWIG_BADOBJ;
        }
      }

   Of course, returning the plain '0(success)/-1(fail)' still works, but you can be
   more explicit by returning SWIG_BADOBJ, SWIG_ERROR or any of the
   SWIG errors code.

   Finally, if the SWIG_CASTRANK_MODE is enabled, the result code
   allows to return the 'cast rank', for example, if you have this

       int food(double)
       int fooi(int);

   and you call

      food(1)   // cast rank '1'  (1 -> 1.0)
      fooi(1)   // cast rank '0'

   just use the SWIG_AddCast()/SWIG_CheckState()
*/

#define SWIG_OK                    (0)
#define SWIG_ERROR                 (-1)
#define SWIG_IsOK(r)               (r >= 0)
#define SWIG_ArgError(r)           ((r != SWIG_ERROR) ? r : SWIG_TypeError)

/* The CastRankLimit says how many bits are used for the cast rank */
#define SWIG_CASTRANKLIMIT         (1 << 8)
/* The NewMask denotes the object was created (using new/malloc) */
#define SWIG_NEWOBJMASK            (SWIG_CASTRANKLIMIT  << 1)
/* The TmpMask is for in/out typemaps that use temporal objects */
#define SWIG_TMPOBJMASK            (SWIG_NEWOBJMASK << 1)
/* Simple returning values */
#define SWIG_BADOBJ                (SWIG_ERROR)
#define SWIG_OLDOBJ                (SWIG_OK)
#define SWIG_NEWOBJ                (SWIG_OK | SWIG_NEWOBJMASK)
#define SWIG_TMPOBJ                (SWIG_OK | SWIG_TMPOBJMASK)
/* Check, add and del mask methods */
#define SWIG_AddNewMask(r)         (SWIG_IsOK(r) ? (r | SWIG_NEWOBJMASK) : r)
#define SWIG_DelNewMask(r)         (SWIG_IsOK(r) ? (r & ~SWIG_NEWOBJMASK) : r)
#define SWIG_IsNewObj(r)           (SWIG_IsOK(r) && (r & SWIG_NEWOBJMASK))
#define SWIG_AddTmpMask(r)         (SWIG_IsOK(r) ? (r | SWIG_TMPOBJMASK) : r)
#define SWIG_DelTmpMask(r)         (SWIG_IsOK(r) ? (r & ~SWIG_TMPOBJMASK) : r)
#define SWIG_IsTmpObj(r)           (SWIG_IsOK(r) && (r & SWIG_TMPOBJMASK))

/* Cast-Rank Mode */
#if defined(SWIG_CASTRANK_MODE)
#  ifndef SWIG_TypeRank
#    define SWIG_TypeRank             unsigned long
#  endif
#  ifndef SWIG_MAXCASTRANK            /* Default cast allowed */
#    define SWIG_MAXCASTRANK          (2)
#  endif
#  define SWIG_CASTRANKMASK          ((SWIG_CASTRANKLIMIT) -1)
#  define SWIG_CastRank(r)           (r & SWIG_CASTRANKMASK)
SWIGINTERNINLINE int SWIG_AddCast(int r) {
  return SWIG_IsOK(r) ? ((SWIG_CastRank(r) < SWIG_MAXCASTRANK) ? (r + 1) : SWIG_ERROR) : r;
}
SWIGINTERNINLINE int SWIG_CheckState(int r) {
  return SWIG_IsOK(r) ? SWIG_CastRank(r) + 1 : 0;
}
#else /* no cast-rank mode */
#  define SWIG_AddCast(r) (r)
#  define SWIG_CheckState(r) (SWIG_IsOK(r) ? 1 : 0)
#endif


#include <string.h>

#ifdef __cplusplus
extern "C" {
#endif

typedef void *(*swig_converter_func)(void *, int *);
typedef struct swig_type_info *(*swig_dycast_func)(void **);

/* Structure to store information on one type */
typedef struct swig_type_info {
  const char             *name;			/* mangled name of this type */
  const char             *str;			/* human readable name of this type */
  swig_dycast_func        dcast;		/* dynamic cast function down a hierarchy */
  struct swig_cast_info  *cast;			/* linked list of types that can cast into this type */
  void                   *clientdata;		/* language specific type data */
  int                    owndata;		/* flag if the structure owns the clientdata */
} swig_type_info;

/* Structure to store a type and conversion function used for casting */
typedef struct swig_cast_info {
  swig_type_info         *type;			/* pointer to type that is equivalent to this type */
  swig_converter_func     converter;		/* function to cast the void pointers */
  struct swig_cast_info  *next;			/* pointer to next cast in linked list */
  struct swig_cast_info  *prev;			/* pointer to the previous cast */
} swig_cast_info;

/* Structure used to store module information
 * Each module generates one structure like this, and the runtime collects
 * all of these structures and stores them in a circularly linked list.*/
typedef struct swig_module_info {
  swig_type_info         **types;		/* Array of pointers to swig_type_info structures that are in this module */
  size_t                 size;		        /* Number of types in this module */
  struct swig_module_info *next;		/* Pointer to next element in circularly linked list */
  swig_type_info         **type_initial;	/* Array of initially generated type structures */
  swig_cast_info         **cast_initial;	/* Array of initially generated casting structures */
  void                    *clientdata;		/* Language specific module data */
} swig_module_info;

/*
  Compare two type names skipping the space characters, therefore
  "char*" == "char *" and "Class<int>" == "Class<int >", etc.

  Return 0 when the two name types are equivalent, as in
  strncmp, but skipping ' '.
*/
SWIGRUNTIME int
SWIG_TypeNameComp(const char *f1, const char *l1,
		  const char *f2, const char *l2) {
  for (;(f1 != l1) && (f2 != l2); ++f1, ++f2) {
    while ((*f1 == ' ') && (f1 != l1)) ++f1;
    while ((*f2 == ' ') && (f2 != l2)) ++f2;
    if (*f1 != *f2) return (*f1 > *f2) ? 1 : -1;
  }
  return (int)((l1 - f1) - (l2 - f2));
}

/*
  Check type equivalence in a name list like <name1>|<name2>|...
  Return 0 if equal, -1 if nb < tb, 1 if nb > tb
*/
SWIGRUNTIME int
SWIG_TypeCmp(const char *nb, const char *tb) {
  int equiv = 1;
  const char* te = tb + strlen(tb);
  const char* ne = nb;
  while (equiv != 0 && *ne) {
    for (nb = ne; *ne; ++ne) {
      if (*ne == '|') break;
    }
    equiv = SWIG_TypeNameComp(nb, ne, tb, te);
    if (*ne) ++ne;
  }
  return equiv;
}

/*
  Check type equivalence in a name list like <name1>|<name2>|...
  Return 0 if not equal, 1 if equal
*/
SWIGRUNTIME int
SWIG_TypeEquiv(const char *nb, const char *tb) {
  return SWIG_TypeCmp(nb, tb) == 0 ? 1 : 0;
}

/*
  Check the typename
*/
SWIGRUNTIME swig_cast_info *
SWIG_TypeCheck(const char *c, swig_type_info *ty) {
  if (ty) {
    swig_cast_info *iter = ty->cast;
    while (iter) {
      if (strcmp(iter->type->name, c) == 0) {
        if (iter == ty->cast)
          return iter;
        /* Move iter to the top of the linked list */
        iter->prev->next = iter->next;
        if (iter->next)
          iter->next->prev = iter->prev;
        iter->next = ty->cast;
        iter->prev = 0;
        if (ty->cast) ty->cast->prev = iter;
        ty->cast = iter;
        return iter;
      }
      iter = iter->next;
    }
  }
  return 0;
}

/*
  Identical to SWIG_TypeCheck, except strcmp is replaced with a pointer comparison
*/
SWIGRUNTIME swig_cast_info *
SWIG_TypeCheckStruct(swig_type_info *from, swig_type_info *ty) {
  if (ty) {
    swig_cast_info *iter = ty->cast;
    while (iter) {
      if (iter->type == from) {
        if (iter == ty->cast)
          return iter;
        /* Move iter to the top of the linked list */
        iter->prev->next = iter->next;
        if (iter->next)
          iter->next->prev = iter->prev;
        iter->next = ty->cast;
        iter->prev = 0;
        if (ty->cast) ty->cast->prev = iter;
        ty->cast = iter;
        return iter;
      }
      iter = iter->next;
    }
  }
  return 0;
}

/*
  Cast a pointer up an inheritance hierarchy
*/
SWIGRUNTIMEINLINE void *
SWIG_TypeCast(swig_cast_info *ty, void *ptr, int *newmemory) {
  return ((!ty) || (!ty->converter)) ? ptr : (*ty->converter)(ptr, newmemory);
}

/*
   Dynamic pointer casting. Down an inheritance hierarchy
*/
SWIGRUNTIME swig_type_info *
SWIG_TypeDynamicCast(swig_type_info *ty, void **ptr) {
  swig_type_info *lastty = ty;
  if (!ty || !ty->dcast) return ty;
  while (ty && (ty->dcast)) {
    ty = (*ty->dcast)(ptr);
    if (ty) lastty = ty;
  }
  return lastty;
}

/*
  Return the name associated with this type
*/
SWIGRUNTIMEINLINE const char *
SWIG_TypeName(const swig_type_info *ty) {
  return ty->name;
}

/*
  Return the pretty name associated with this type,
  that is an unmangled type name in a form presentable to the user.
*/
SWIGRUNTIME const char *
SWIG_TypePrettyName(const swig_type_info *type) {
  /* The "str" field contains the equivalent pretty names of the
     type, separated by vertical-bar characters.  We choose
     to print the last name, as it is often (?) the most
     specific. */
  if (!type) return NULL;
  if (type->str != NULL) {
    const char *last_name = type->str;
    const char *s;
    for (s = type->str; *s; s++)
      if (*s == '|') last_name = s+1;
    return last_name;
  }
  else
    return type->name;
}

/*
   Set the clientdata field for a type
*/
SWIGRUNTIME void
SWIG_TypeClientData(swig_type_info *ti, void *clientdata) {
  swig_cast_info *cast = ti->cast;
  /* if (ti->clientdata == clientdata) return; */
  ti->clientdata = clientdata;

  while (cast) {
    if (!cast->converter) {
      swig_type_info *tc = cast->type;
      if (!tc->clientdata) {
	SWIG_TypeClientData(tc, clientdata);
      }
    }
    cast = cast->next;
  }
}
SWIGRUNTIME void
SWIG_TypeNewClientData(swig_type_info *ti, void *clientdata) {
  SWIG_TypeClientData(ti, clientdata);
  ti->owndata = 1;
}

/*
  Search for a swig_type_info structure only by mangled name
  Search is a O(log #types)

  We start searching at module start, and finish searching when start == end.
  Note: if start == end at the beginning of the function, we go all the way around
  the circular list.
*/
SWIGRUNTIME swig_type_info *
SWIG_MangledTypeQueryModule(swig_module_info *start,
                            swig_module_info *end,
		            const char *name) {
  swig_module_info *iter = start;
  do {
    if (iter->size) {
      size_t l = 0;
      size_t r = iter->size - 1;
      do {
	/* since l+r >= 0, we can (>> 1) instead (/ 2) */
	size_t i = (l + r) >> 1;
	const char *iname = iter->types[i]->name;
	if (iname) {
	  int compare = strcmp(name, iname);
	  if (compare == 0) {
	    return iter->types[i];
	  } else if (compare < 0) {
	    if (i) {
	      r = i - 1;
	    } else {
	      break;
	    }
	  } else if (compare > 0) {
	    l = i + 1;
	  }
	} else {
	  break; /* should never happen */
	}
      } while (l <= r);
    }
    iter = iter->next;
  } while (iter != end);
  return 0;
}

/*
  Search for a swig_type_info structure for either a mangled name or a human readable name.
  It first searches the mangled names of the types, which is a O(log #types)
  If a type is not found it then searches the human readable names, which is O(#types).

  We start searching at module start, and finish searching when start == end.
  Note: if start == end at the beginning of the function, we go all the way around
  the circular list.
*/
SWIGRUNTIME swig_type_info *
SWIG_TypeQueryModule(swig_module_info *start,
                     swig_module_info *end,
		     const char *name) {
  /* STEP 1: Search the name field using binary search */
  swig_type_info *ret = SWIG_MangledTypeQueryModule(start, end, name);
  if (ret) {
    return ret;
  } else {
    /* STEP 2: If the type hasn't been found, do a complete search
       of the str field (the human readable name) */
    swig_module_info *iter = start;
    do {
      size_t i = 0;
      for (; i < iter->size; ++i) {
	if (iter->types[i]->str && (SWIG_TypeEquiv(iter->types[i]->str, name)))
	  return iter->types[i];
      }
      iter = iter->next;
    } while (iter != end);
  }

  /* neither found a match */
  return 0;
}

/*
   Pack binary data into a string
*/
SWIGRUNTIME char *
SWIG_PackData(char *c, void *ptr, size_t sz) {
  static const char hex[17] = "0123456789abcdef";
  const unsigned char *u = (unsigned char *) ptr;
  const unsigned char *eu =  u + sz;
  for (; u != eu; ++u) {
    unsigned char uu = *u;
    *(c++) = hex[(uu & 0xf0) >> 4];
    *(c++) = hex[uu & 0xf];
  }
  return c;
}

/*
   Unpack binary data from a string
*/
SWIGRUNTIME const char *
SWIG_UnpackData(const char *c, void *ptr, size_t sz) {
  unsigned char *u = (unsigned char *) ptr;
  const unsigned char *eu = u + sz;
  for (; u != eu; ++u) {
    char d = *(c++);
    unsigned char uu;
    if ((d >= '0') && (d <= '9'))
      uu = ((d - '0') << 4);
    else if ((d >= 'a') && (d <= 'f'))
      uu = ((d - ('a'-10)) << 4);
    else
      return (char *) 0;
    d = *(c++);
    if ((d >= '0') && (d <= '9'))
      uu |= (d - '0');
    else if ((d >= 'a') && (d <= 'f'))
      uu |= (d - ('a'-10));
    else
      return (char *) 0;
    *u = uu;
  }
  return c;
}

/*
   Pack 'void *' into a string buffer.
*/
SWIGRUNTIME char *
SWIG_PackVoidPtr(char *buff, void *ptr, const char *name, size_t bsz) {
  char *r = buff;
  if ((2*sizeof(void *) + 2) > bsz) return 0;
  *(r++) = '_';
  r = SWIG_PackData(r,&ptr,sizeof(void *));
  if (strlen(name) + 1 > (bsz - (r - buff))) return 0;
  strcpy(r,name);
  return buff;
}

SWIGRUNTIME const char *
SWIG_UnpackVoidPtr(const char *c, void **ptr, const char *name) {
  if (*c != '_') {
    if (strcmp(c,"NULL") == 0) {
      *ptr = (void *) 0;
      return name;
    } else {
      return 0;
    }
  }
  return SWIG_UnpackData(++c,ptr,sizeof(void *));
}

SWIGRUNTIME char *
SWIG_PackDataName(char *buff, void *ptr, size_t sz, const char *name, size_t bsz) {
  char *r = buff;
  size_t lname = (name ? strlen(name) : 0);
  if ((2*sz + 2 + lname) > bsz) return 0;
  *(r++) = '_';
  r = SWIG_PackData(r,ptr,sz);
  if (lname) {
    strncpy(r,name,lname+1);
  } else {
    *r = 0;
  }
  return buff;
}

SWIGRUNTIME const char *
SWIG_UnpackDataName(const char *c, void *ptr, size_t sz, const char *name) {
  if (*c != '_') {
    if (strcmp(c,"NULL") == 0) {
      memset(ptr,0,sz);
      return name;
    } else {
      return 0;
    }
  }
  return SWIG_UnpackData(++c,ptr,sz);
}

#ifdef __cplusplus
}
#endif

/* -----------------------------------------------------------------------------
 * luarun.swg
 *
 * This file contains the runtime support for Lua modules
 * and includes code for managing global variables and pointer
 * type checking.
 * ----------------------------------------------------------------------------- */

#ifdef __cplusplus
extern "C" {
#endif

#include "lua.h"
#include "lauxlib.h"
#include <stdlib.h>  /* for malloc */
#include <assert.h>  /* for a few sanity tests */

/* -----------------------------------------------------------------------------
 * Lua flavors
 * ----------------------------------------------------------------------------- */

#define SWIG_LUA_FLAVOR_LUA 1
#define SWIG_LUA_FLAVOR_ELUA 2
#define SWIG_LUA_FLAVOR_ELUAC 3

#if !defined(SWIG_LUA_TARGET)
# error SWIG_LUA_TARGET not defined
#endif

#if defined(SWIG_LUA_ELUA_EMULATE)

struct swig_elua_entry;

typedef struct swig_elua_key {
  int type;
  union {
    const char* strkey;
    lua_Number numkey;
  } key;
} swig_elua_key;

typedef struct swig_elua_val {
  int type;
  union {
    lua_Number number;
    const struct swig_elua_entry *table;
    const char *string;
    lua_CFunction function;
    struct {
      char member;
      long lvalue;
      void *pvalue;
      swig_type_info **ptype;
    } userdata;
  } value;
} swig_elua_val;

typedef struct swig_elua_entry {
  swig_elua_key key;
  swig_elua_val value;
} swig_elua_entry;

#define LSTRKEY(x) {LUA_TSTRING, {.strkey = x} }
#define LNUMKEY(x) {LUA_TNUMBER, {.numkey = x} }
#define LNILKEY {LUA_TNIL, {.strkey = 0} }

#define LNUMVAL(x) {LUA_TNUMBER, {.number = x} }
#define LFUNCVAL(x) {LUA_TFUNCTION, {.function = x} }
#define LROVAL(x) {LUA_TTABLE, {.table = x} }
#define LNILVAL {LUA_TNIL, {.string = 0} }
#define LSTRVAL(x) {LUA_TSTRING, {.string = x} }

#define LUA_REG_TYPE swig_elua_entry

#define SWIG_LUA_ELUA_EMUL_METATABLE_KEY "__metatable"

#define lua_pushrotable(L,p)\
  lua_newtable(L);\
  assert(p);\
  SWIG_Lua_elua_emulate_register(L,(swig_elua_entry*)(p));

#define SWIG_LUA_CONSTTAB_POINTER(B,C,D)\
  LSTRKEY(B), {LUA_TUSERDATA, { .userdata={0,0,(void*)(C),&D} } }

#define SWIG_LUA_CONSTTAB_BINARY(B,S,C,D)\
  LSTRKEY(B), {LUA_TUSERDATA, { .userdata={1,S,(void*)(C),&D} } }
#endif

#if (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUA) || (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUAC)
#  define SWIG_LUA_CONSTTAB_INT(B, C) LSTRKEY(B), LNUMVAL(C)
#  define SWIG_LUA_CONSTTAB_FLOAT(B, C) LSTRKEY(B), LNUMVAL(C)
#  define SWIG_LUA_CONSTTAB_STRING(B, C) LSTRKEY(B), LSTRVAL(C)
#  define SWIG_LUA_CONSTTAB_CHAR(B, C) LSTRKEY(B), LNUMVAL(C)
    /* Those two types of constants are not supported in elua */

#ifndef SWIG_LUA_CONSTTAB_POINTER
#warning eLua does not support pointers as constants. By default, nil will be used as value
#define SWIG_LUA_CONSTTAB_POINTER(B,C,D) LSTRKEY(B), LNILVAL
#endif

#ifndef SWIG_LUA_CONSTTAB_BINARY
#warning eLua does not support pointers to member as constants. By default, nil will be used as value
#define SWIG_LUA_CONSTTAB_BINARY(B, S, C, D) LSTRKEY(B), LNILVAL
#endif
#else /* SWIG_LUA_FLAVOR_LUA */
#  define SWIG_LUA_CONSTTAB_INT(B, C) SWIG_LUA_INT, (char *)B, (long)C, 0, 0, 0
#  define SWIG_LUA_CONSTTAB_FLOAT(B, C) SWIG_LUA_FLOAT, (char *)B, 0, (double)C, 0, 0
#  define SWIG_LUA_CONSTTAB_STRING(B, C) SWIG_LUA_STRING, (char *)B, 0, 0, (void *)C, 0
#  define SWIG_LUA_CONSTTAB_CHAR(B, C) SWIG_LUA_CHAR, (char *)B, (long)C, 0, 0, 0
#  define SWIG_LUA_CONSTTAB_POINTER(B,C,D)\
       SWIG_LUA_POINTER, (char *)B, 0, 0, (void *)C, &D
#  define SWIG_LUA_CONSTTAB_BINARY(B, S, C, D)\
       SWIG_LUA_BINARY,  (char *)B, S, 0, (void *)C, &D
#endif

#ifndef SWIG_LUA_ELUA_EMULATE
#if (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUA) || (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUAC)
#  define LRO_STRVAL(v) {{.p = (char *) v}, LUA_TSTRING}
#  define LSTRVAL LRO_STRVAL
#endif
#endif /* SWIG_LUA_ELUA_EMULATE*/

#ifndef SWIG_LUA_ELUA_EMULATE
#if (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUA) || (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUAC)

#ifndef MIN_OPT_LEVEL
#define MIN_OPT_LEVEL 2
#endif

#include "lrodefs.h"
#include "lrotable.h"
#endif
#endif /* SWIG_LUA_ELUA_EMULATE*/
/* -----------------------------------------------------------------------------
 * compatibility defines
 * ----------------------------------------------------------------------------- */

/* History of Lua C API length functions:  In Lua 5.0 (and before?)
   there was "lua_strlen".  In Lua 5.1, this was renamed "lua_objlen",
   but a compatibility define of "lua_strlen" was added.  In Lua 5.2,
   this function was again renamed, to "lua_rawlen" (to emphasize that
   it doesn't call the "__len" metamethod), and the compatibility
   define of lua_strlen was removed.  All SWIG uses have been updated
   to "lua_rawlen", and we add our own defines of that here for older
   versions of Lua.  */
#if !defined(LUA_VERSION_NUM) || LUA_VERSION_NUM < 501
# define lua_rawlen lua_strlen
#elif LUA_VERSION_NUM == 501
# define lua_rawlen lua_objlen
#endif


/* lua_pushglobaltable is the recommended "future-proof" way to get
   the global table for Lua 5.2 and later.  Here we define
   lua_pushglobaltable ourselves for Lua versions before 5.2.  */
#if !defined(LUA_VERSION_NUM) || LUA_VERSION_NUM < 502
# define lua_pushglobaltable(L) lua_pushvalue(L, LUA_GLOBALSINDEX)
#endif

/* lua_absindex was introduced in Lua 5.2 */
#if !defined(LUA_VERSION_NUM) || LUA_VERSION_NUM < 502
# define lua_absindex(L,i) ((i)>0 || (i) <= LUA_REGISTRYINDEX ? (i) : lua_gettop(L) + (i) + 1)
#endif

/* lua_rawsetp was introduced in Lua 5.2 */
#if !defined(LUA_VERSION_NUM) || LUA_VERSION_NUM < 502
#define lua_rawsetp(L,index,ptr)\
  lua_pushlightuserdata(L,(void*)(ptr));\
  lua_insert(L,-2);\
  lua_rawset(L,index);

#define lua_rawgetp(L,index,ptr)\
  lua_pushlightuserdata(L,(void*)(ptr));\
  lua_rawget(L,index);

#endif

/* --------------------------------------------------------------------------
 * Helper functions for error handling
 * -------------------------------------------------------------------------- */

/* Push the string STR on the Lua stack, like lua_pushstring, but
   prefixed with the the location of the innermost Lua call-point
   (as formated by luaL_where).  */
SWIGRUNTIME void
SWIG_Lua_pusherrstring (lua_State *L, const char *str)
{
  luaL_where (L, 1);
  lua_pushstring (L, str);
  lua_concat (L, 2);
}

/* Push a formatted string generated from FMT and following args on
   the Lua stack, like lua_pushfstring, but prefixed with the the
   location of the innermost Lua call-point (as formated by luaL_where).  */
SWIGRUNTIME void
SWIG_Lua_pushferrstring (lua_State *L, const char *fmt, ...)
{
  va_list argp;
  va_start(argp, fmt);
  luaL_where(L, 1);
  lua_pushvfstring(L, fmt, argp);
  va_end(argp);
  lua_concat(L, 2);
}


/* -----------------------------------------------------------------------------
 * global swig types
 * ----------------------------------------------------------------------------- */
/* Constant table */
#define SWIG_LUA_INT     1
#define SWIG_LUA_FLOAT   2
#define SWIG_LUA_STRING  3
#define SWIG_LUA_POINTER 4
#define SWIG_LUA_BINARY  5
#define SWIG_LUA_CHAR    6

/* Structure for variable linking table */
typedef struct {
  const char *name;
  lua_CFunction get;
  lua_CFunction set;
} swig_lua_var_info;

#if (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUA) || (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUAC)
typedef const LUA_REG_TYPE swig_lua_method;
typedef const LUA_REG_TYPE swig_lua_const_info;
#else /* Normal lua */
typedef luaL_Reg swig_lua_method;

/* Constant information structure */
typedef struct {
    int type;
    char *name;
    long lvalue;
    double dvalue;
    void   *pvalue;
    swig_type_info **ptype;
} swig_lua_const_info;

#endif

typedef struct {
  const char     *name;
  lua_CFunction   getmethod;
  lua_CFunction   setmethod;
} swig_lua_attribute;


struct swig_lua_class;
/* Can be used to create namespaces. Currently used to wrap class static methods/variables/constants */
typedef struct swig_lua_namespace {
  const char            *name;
  swig_lua_method       *ns_methods;
  swig_lua_attribute    *ns_attributes;
  swig_lua_const_info   *ns_constants;
  struct swig_lua_class        **ns_classes;
  struct swig_lua_namespace    **ns_namespaces;
} swig_lua_namespace;

typedef struct swig_lua_class {
  const char    *name; /* Name that this class has in Lua */
  const char    *fqname; /* Fully qualified name - Scope + class name */
  swig_type_info   **type;
  lua_CFunction  constructor;
  void    (*destructor)(void *);
  swig_lua_method   *methods;
  swig_lua_attribute     *attributes;
  swig_lua_namespace    *cls_static;
  swig_lua_method   *metatable; /* 0 for -eluac */
  struct swig_lua_class **bases;
  const char **base_names;
} swig_lua_class;

/* this is the struct for wrapping all pointers in SwigLua
*/
typedef struct {
  swig_type_info   *type;
  int     own;  /* 1 if owned & must be destroyed */
  void        *ptr;
} swig_lua_userdata;

/* this is the struct for wrapping arbitrary packed binary data
(currently it is only used for member function pointers)
the data ordering is similar to swig_lua_userdata, but it is currently not possible
to tell the two structures apart within SWIG, other than by looking at the type
*/
typedef struct {
  swig_type_info   *type;
  int     own;  /* 1 if owned & must be destroyed */
  char data[1];       /* arbitary amount of data */    
} swig_lua_rawdata;

/* Common SWIG API */
#define SWIG_NewPointerObj(L, ptr, type, owner)       SWIG_Lua_NewPointerObj(L, (void *)ptr, type, owner)
#define SWIG_ConvertPtr(L,idx, ptr, type, flags)    SWIG_Lua_ConvertPtr(L,idx,ptr,type,flags)
#define SWIG_MustGetPtr(L,idx, type,flags, argnum,fnname)  SWIG_Lua_MustGetPtr(L,idx, type,flags, argnum,fnname)
/* for C++ member pointers, ie, member methods */
#define SWIG_ConvertMember(L, idx, ptr, sz, ty)       SWIG_Lua_ConvertPacked(L, idx, ptr, sz, ty)
#define SWIG_NewMemberObj(L, ptr, sz, type)      SWIG_Lua_NewPackedObj(L, ptr, sz, type)

/* Runtime API */
#define SWIG_GetModule(clientdata) SWIG_Lua_GetModule((lua_State*)(clientdata))
#define SWIG_SetModule(clientdata, pointer) SWIG_Lua_SetModule((lua_State*) (clientdata), pointer)
#define SWIG_MODULE_CLIENTDATA_TYPE lua_State*

/* Contract support */
#define SWIG_contract_assert(expr, msg)  \
  if (!(expr)) { SWIG_Lua_pusherrstring(L, (char *) msg); goto fail; } else


/* helper #defines */
#define SWIG_fail {goto fail;}
#define SWIG_fail_arg(func_name,argnum,type) \
  {SWIG_Lua_pushferrstring(L,"Error in %s (arg %d), expected '%s' got '%s'",\
  func_name,argnum,type,SWIG_Lua_typename(L,argnum));\
  goto fail;}
#define SWIG_fail_ptr(func_name,argnum,type) \
  SWIG_fail_arg(func_name,argnum,(type && type->str)?type->str:"void*")
#define SWIG_check_num_args(func_name,a,b) \
  if (lua_gettop(L)<a || lua_gettop(L)>b) \
  {SWIG_Lua_pushferrstring(L,"Error in %s expected %d..%d args, got %d",func_name,a,b,lua_gettop(L));\
  goto fail;}


#define SWIG_Lua_get_table(L,n) \
  (lua_pushstring(L, n), lua_rawget(L,-2))

#define SWIG_Lua_add_function(L,n,f) \
  (lua_pushstring(L, n), \
      lua_pushcfunction(L, f), \
      lua_rawset(L,-3))

#define SWIG_Lua_add_boolean(L,n,b) \
  (lua_pushstring(L, n), \
      lua_pushboolean(L, b), \
      lua_rawset(L,-3))

/* special helper for allowing 'nil' for usertypes */
#define SWIG_isptrtype(L,I) (lua_isuserdata(L,I) || lua_isnil(L,I))

#ifdef __cplusplus
/* Special helper for member function pointers 
it gets the address, casts it, then dereferences it */
/*#define SWIG_mem_fn_as_voidptr(a)  (*((char**)&(a))) */
#endif

/* storing/access of swig_module_info */
SWIGRUNTIME swig_module_info *
SWIG_Lua_GetModule(lua_State *L) {
  swig_module_info *ret = 0;
  lua_pushstring(L,"swig_runtime_data_type_pointer" SWIG_RUNTIME_VERSION SWIG_TYPE_TABLE_NAME);
  lua_rawget(L,LUA_REGISTRYINDEX);
  if (lua_islightuserdata(L,-1))
    ret=(swig_module_info*)lua_touserdata(L,-1);
  lua_pop(L,1);  /* tidy */
  return ret;
}

SWIGRUNTIME void
SWIG_Lua_SetModule(lua_State *L, swig_module_info *module) {
  /* add this all into the Lua registry: */
  lua_pushstring(L,"swig_runtime_data_type_pointer" SWIG_RUNTIME_VERSION SWIG_TYPE_TABLE_NAME);
  lua_pushlightuserdata(L,(void*)module);
  lua_rawset(L,LUA_REGISTRYINDEX);
}

/* -----------------------------------------------------------------------------
 * global variable support code: modules
 * ----------------------------------------------------------------------------- */

/* this function is called when trying to set an immutable.
default action is to print an error.
This can removed with a compile flag SWIGLUA_IGNORE_SET_IMMUTABLE */
SWIGINTERN int SWIG_Lua_set_immutable(lua_State *L)
{
/*  there should be 1 param passed in: the new value */
#ifndef SWIGLUA_IGNORE_SET_IMMUTABLE
  lua_pop(L,1);  /* remove it */
  luaL_error(L,"This variable is immutable");
#endif
    return 0;   /* should not return anything */
}

#ifdef SWIG_LUA_ELUA_EMULATE

SWIGRUNTIME void SWIG_Lua_NewPointerObj(lua_State *L,void *ptr,swig_type_info *type, int own);
SWIGRUNTIME void SWIG_Lua_NewPackedObj(lua_State *L,void *ptr,size_t size,swig_type_info *type);
static int swig_lua_elua_emulate_unique_key;

/* This function emulates eLua rotables behaviour. It loads a rotable definition into the usual lua table. */
SWIGINTERN void SWIG_Lua_elua_emulate_register(lua_State *L, const swig_elua_entry *table)
{
  int i, table_parsed, parsed_tables_array, target_table;
  assert(lua_istable(L,-1));
  target_table = lua_gettop(L);
  /* Get the registry where we put all parsed tables to avoid loops */
  lua_rawgetp(L, LUA_REGISTRYINDEX, &swig_lua_elua_emulate_unique_key);
  if(lua_isnil(L,-1)) {
    lua_pop(L,1);
    lua_newtable(L);
    lua_pushvalue(L,-1);
    lua_rawsetp(L,LUA_REGISTRYINDEX,(void*)(&swig_lua_elua_emulate_unique_key));
  }
  parsed_tables_array = lua_gettop(L);
  lua_pushvalue(L,target_table);
  lua_rawsetp(L, parsed_tables_array, table);
  table_parsed = 0;
  const int SWIGUNUSED pairs_start = lua_gettop(L);
  for(i = 0;table[i].key.type != LUA_TNIL || table[i].value.type != LUA_TNIL;i++)
  {
    const swig_elua_entry *entry = table + i;
    int is_metatable = 0;
    switch(entry->key.type) {
      case LUA_TSTRING:
        lua_pushstring(L,entry->key.key.strkey);
        if(strcmp(entry->key.key.strkey, SWIG_LUA_ELUA_EMUL_METATABLE_KEY) == 0)
          is_metatable = 1;
        break;
      case  LUA_TNUMBER:
        lua_pushnumber(L,entry->key.key.numkey);
        break;
      case LUA_TNIL:
        lua_pushnil(L);
        break;
      default:
        assert(0);
    }
    switch(entry->value.type) {
      case LUA_TSTRING:
        lua_pushstring(L,entry->value.value.string);
        break;
      case  LUA_TNUMBER:
        lua_pushnumber(L,entry->value.value.number);
        break;
      case LUA_TFUNCTION:
        lua_pushcfunction(L,entry->value.value.function);
        break;
      case LUA_TTABLE:
        lua_rawgetp(L,parsed_tables_array, entry->value.value.table);
        table_parsed = !lua_isnil(L,-1);
        if(!table_parsed) {
          lua_pop(L,1); /*remove nil */
          lua_newtable(L);
          SWIG_Lua_elua_emulate_register(L,entry->value.value.table);
        } 
        if(is_metatable) {
          assert(lua_istable(L,-1));
          lua_pushvalue(L,-1);
          lua_setmetatable(L,target_table);
        }

        break;
      case LUA_TUSERDATA:
        if(entry->value.value.userdata.member) 
          SWIG_NewMemberObj(L,entry->value.value.userdata.pvalue,
              entry->value.value.userdata.lvalue,
              *(entry->value.value.userdata.ptype));
        else 
          SWIG_NewPointerObj(L,entry->value.value.userdata.pvalue,
              *(entry->value.value.userdata.ptype),0);
        break;
      case LUA_TNIL:
        lua_pushnil(L);
        break;
      default:
        assert(0);
    }
    assert(lua_gettop(L) == pairs_start + 2);
    lua_rawset(L,target_table);
  }
  lua_pop(L,1); /* Removing parsed tables storage */
  assert(lua_gettop(L) == target_table);
}

SWIGINTERN void SWIG_Lua_elua_emulate_register_clear(lua_State *L)
{
  lua_pushnil(L);
  lua_rawsetp(L, LUA_REGISTRYINDEX, &swig_lua_elua_emulate_unique_key);
}

SWIGINTERN void SWIG_Lua_get_class_registry(lua_State *L);

SWIGINTERN int SWIG_Lua_emulate_elua_getmetatable(lua_State *L)
{
  SWIG_check_num_args("getmetatable(SWIG eLua emulation)", 1, 1);
  SWIG_Lua_get_class_registry(L);
  lua_getfield(L,-1,"lua_getmetatable");
  lua_remove(L,-2); /* remove the registry*/
  assert(!lua_isnil(L,-1));
  lua_pushvalue(L,1);
  assert(lua_gettop(L) == 3); /* object | function | object again */
  lua_call(L,1,1);
  if(!lua_isnil(L,-1)) /*There is an ordinary metatable */
    return 1;
  /*if it is a table, then emulate elua behaviour - check for __metatable attribute of a table*/
  assert(lua_gettop(L) == 2);
  if(lua_istable(L,-2)) {
    lua_pop(L,1); /*remove the nil*/
    lua_getfield(L,-1, SWIG_LUA_ELUA_EMUL_METATABLE_KEY);
  }
  assert(lua_gettop(L) == 2);
  return 1;
  
fail:
  lua_error(L);
  return 0;
}

SWIGINTERN void SWIG_Lua_emulate_elua_swap_getmetatable(lua_State *L)
{
  SWIG_Lua_get_class_registry(L);
  lua_pushglobaltable(L);
  lua_pushstring(L,"lua_getmetatable");
  lua_getfield(L,-2,"getmetatable");
  assert(!lua_isnil(L,-1));
  lua_rawset(L,-4);
  lua_pushstring(L, "getmetatable");
  lua_pushcfunction(L, SWIG_Lua_emulate_elua_getmetatable);
  lua_rawset(L,-3);
  lua_pop(L,2);
      
}
/* END OF REMOVE */

#endif
/* -----------------------------------------------------------------------------
 * global variable support code: namespaces and modules (which are the same thing)
 * ----------------------------------------------------------------------------- */

SWIGINTERN int SWIG_Lua_namespace_get(lua_State *L)
{
/*  there should be 2 params passed in
  (1) table (not the meta table)
  (2) string name of the attribute
*/
  assert(lua_istable(L,-2));  /* just in case */
  lua_getmetatable(L,-2);
  assert(lua_istable(L,-1));
  SWIG_Lua_get_table(L,".get"); /* find the .get table */
  assert(lua_istable(L,-1));
  /* look for the key in the .get table */
  lua_pushvalue(L,2);  /* key */
  lua_rawget(L,-2);
  lua_remove(L,-2); /* stack tidy, remove .get table */
  if (lua_iscfunction(L,-1))
  {  /* found it so call the fn & return its value */
    lua_call(L,0,1);  /* 1 value in (userdata),1 out (result) */
    lua_remove(L,-2); /* stack tidy, remove metatable */
    return 1;
  }
  lua_pop(L,1);  /* remove whatever was there */
  /* ok, so try the .fn table */
  SWIG_Lua_get_table(L,".fn"); /* find the .get table */
  assert(lua_istable(L,-1));  /* just in case */
  lua_pushvalue(L,2);  /* key */
  lua_rawget(L,-2);  /* look for the fn */
  lua_remove(L,-2); /* stack tidy, remove .fn table */
  if (lua_isfunction(L,-1)) /* note: whether it's a C function or lua function */
  {  /* found it so return the fn & let lua call it */
    lua_remove(L,-2); /* stack tidy, remove metatable */
    return 1;
  }
  lua_pop(L,1);  /* remove whatever was there */
  return 0;
}

SWIGINTERN int SWIG_Lua_namespace_set(lua_State *L)
{
/*  there should be 3 params passed in
  (1) table (not the meta table)
  (2) string name of the attribute
  (3) any for the new value
*/

  assert(lua_istable(L,1));
  lua_getmetatable(L,1);    /* get the meta table */
  assert(lua_istable(L,-1));

  SWIG_Lua_get_table(L,".set"); /* find the .set table */
  if (lua_istable(L,-1))
  {
    /* look for the key in the .set table */
    lua_pushvalue(L,2);  /* key */
    lua_rawget(L,-2);
    if (lua_iscfunction(L,-1))
    {  /* found it so call the fn & return its value */
      lua_pushvalue(L,3);  /* value */
      lua_call(L,1,0);
      return 0;
    }
    lua_pop(L,1);  /* remove the value */
  }
  lua_pop(L,1);  /* remove the value .set table */
  lua_pop(L,1); /* remote metatable */
  lua_rawset(L,-3);
  return 0;
}

#if (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_LUA) /* In elua this is useless */
SWIGINTERN void SWIG_Lua_InstallConstants(lua_State *L, swig_lua_const_info constants[]); /* forward declaration */
SWIGINTERN void  SWIG_Lua_add_variable(lua_State *L,const char *name,lua_CFunction getFn,lua_CFunction setFn); /* forward declaration */
SWIGINTERN void  SWIG_Lua_class_register(lua_State *L,swig_lua_class *clss);

/* helper function - register namespace methods and attributes into namespace */
SWIGINTERN int SWIG_Lua_add_namespace_details(lua_State *L, swig_lua_namespace *ns)
{
  int i;
  /* There must be namespace table (not metatable) at the top of the stack */
  assert(lua_istable(L,-1));
  SWIG_Lua_InstallConstants(L, ns->ns_constants);

  /* add methods to the namespace/module table */
  for(i=0;ns->ns_methods[i].name;i++){
    SWIG_Lua_add_function(L,ns->ns_methods[i].name,ns->ns_methods[i].func);
  }
  lua_getmetatable(L,-1);

  /* add fns */
  for(i=0;ns->ns_attributes[i].name;i++){
    SWIG_Lua_add_variable(L,ns->ns_attributes[i].name,ns->ns_attributes[i].getmethod,ns->ns_attributes[i].setmethod);
  }

  /* clear stack - remove metatble */
  lua_pop(L,1);
  return 0;
}

/* Register all classes in the namespace */
SWIGINTERN void SWIG_Lua_add_namespace_classes(lua_State *L, swig_lua_namespace *ns)
{
  swig_lua_class **classes;

  /* There must be a module/namespace table at the top of the stack */
  assert(lua_istable(L,-1));

  classes = ns->ns_classes;

  if( classes != 0 ) {
    while(*classes != 0) {
      SWIG_Lua_class_register(L, *classes);
      classes++;
    }
  }
}

/* Helper function. Creates namespace table and adds it to module table
   if 'reg' is true, then will register namespace table to parent one (must be on top of the stack
   when function is called).
   Function always returns newly registered table on top of the stack.
*/
SWIGINTERN void SWIG_Lua_namespace_register(lua_State *L, swig_lua_namespace *ns, int reg)
{
  swig_lua_namespace **sub_namespace;
  /* 1 argument - table on the top of the stack */
  const int SWIGUNUSED begin = lua_gettop(L);
  assert(lua_istable(L,-1)); /* just in case. This is supposed to be module table or parent namespace table */
  lua_checkstack(L,5);
  lua_newtable(L); /* namespace itself */
  lua_newtable(L); /* metatable for namespace */

  /* add a table called ".get" */
  lua_pushstring(L,".get");
  lua_newtable(L);
  lua_rawset(L,-3);
  /* add a table called ".set" */
  lua_pushstring(L,".set");
  lua_newtable(L);
  lua_rawset(L,-3);
  /* add a table called ".fn" */
  lua_pushstring(L,".fn");
  lua_newtable(L);
  lua_rawset(L,-3);

  /* add accessor fns for using the .get,.set&.fn */
  SWIG_Lua_add_function(L,"__index",SWIG_Lua_namespace_get);
  SWIG_Lua_add_function(L,"__newindex",SWIG_Lua_namespace_set);

  lua_setmetatable(L,-2); /* set metatable */

  /* Register all functions, variables etc */
  SWIG_Lua_add_namespace_details(L,ns);
  /* Register classes */
  SWIG_Lua_add_namespace_classes(L,ns);

  sub_namespace = ns->ns_namespaces;
  if( sub_namespace != 0) {
    while(*sub_namespace != 0) {
      SWIG_Lua_namespace_register(L, *sub_namespace, 1);
      lua_pop(L,1); /* removing sub-namespace table */
      sub_namespace++;
    }
  }

  if (reg) {
    lua_pushstring(L,ns->name);
    lua_pushvalue(L,-2);
    lua_rawset(L,-4); /* add namespace to module table */
  }
  assert(lua_gettop(L) == begin+1);
}
#endif /* SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_LUA */

/* -----------------------------------------------------------------------------
 * global variable support code: classes
 * ----------------------------------------------------------------------------- */

SWIGINTERN void  SWIG_Lua_get_class_metatable(lua_State *L,const char *cname);

typedef int (*swig_lua_base_iterator_func)(lua_State*,swig_type_info*, int, int *ret);

SWIGINTERN int SWIG_Lua_iterate_bases(lua_State *L, swig_type_info * SWIGUNUSED swig_type,
  int first_arg, swig_lua_base_iterator_func func, int  *const ret)
{
    /* first_arg - position of the object in stack. Everything that is above are arguments
     * and is passed to every evocation of the func */
    int last_arg = lua_gettop(L);/* position of last argument */
    int original_metatable = last_arg + 1;
    size_t bases_count;
    int result = SWIG_ERROR;
    int bases_table;
    (void)swig_type;
    lua_getmetatable(L,first_arg);

    /* initialise base search */
#if (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_LUA)
    SWIG_Lua_get_table(L,".bases");
    assert(lua_istable(L,-1));
    bases_count = lua_rawlen(L,-1);
    bases_table = lua_gettop(L);
#else
    /* In elua .bases table doesn't exist. Use table from swig_lua_class */
    (void)bases_table;
    assert(swig_type!=0);
    swig_module_info *module=SWIG_GetModule(L);
    swig_lua_class **bases= ((swig_lua_class*)(swig_type->clientdata))->bases;
    const char **base_names= ((swig_lua_class*)(swig_type->clientdata))->base_names;
    bases_count = 0;
    for(;base_names[bases_count];
      bases_count++);/* get length of bases */
#endif

    if(ret)
      *ret = 0;
    if(bases_count>0)
    {
      int to_remove;
      size_t i;
      int j;
      int subcall_last_arg;
      int subcall_first_arg = lua_gettop(L) + 1;/* Here a copy of first_arg and arguments begin */
      int valid = 1;
      swig_type_info *base_swig_type = 0;
      for(j=first_arg;j<=last_arg;j++)
        lua_pushvalue(L,j);
      subcall_last_arg = lua_gettop(L);

      /* Trick: temporarily replacing original metatable with metatable for base class and call getter */
      for(i=0;i<bases_count;i++) {
        /* Iteration through class bases */
#if (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_LUA)
        lua_rawgeti(L,bases_table,i+1);
        base_swig_type = 0;
        if(lua_isnil(L,-1)) {
          valid = 0;
          lua_pop(L,1);
        } else {
          valid = 1;
        }
#else /* In elua .bases table doesn't exist. Use table from swig_lua_class */
        swig_lua_class *base_class = bases[i];
        if(!base_class) {
          valid = 0;
        } else {
          valid = 1;
          SWIG_Lua_get_class_metatable(L,base_class->fqname);
          base_swig_type = SWIG_TypeQueryModule(module,module,base_names[i]);
          assert(base_swig_type != 0);
        }
#endif

        if(!valid)
          continue;
        assert(lua_isuserdata(L, subcall_first_arg));
        assert(lua_istable(L,-1));
        lua_setmetatable(L,subcall_first_arg); /* Set new metatable */
        assert(lua_gettop(L) == subcall_last_arg);
        result = func(L, base_swig_type,subcall_first_arg, ret); /* Forward call */
        if(result != SWIG_ERROR) {
          break;
        }
      }
      /* Restore original metatable */
      lua_pushvalue(L,original_metatable);
      lua_setmetatable(L,first_arg);
      /* Clear - remove everything between last_arg and subcall_last_arg including */
      to_remove = subcall_last_arg - last_arg;
      for(j=0;j<to_remove;j++)
        lua_remove(L,last_arg+1);
    } else {
      /* Remove everything after last_arg */
      lua_pop(L, lua_gettop(L) - last_arg);
    }
    if(ret) assert(lua_gettop(L) == last_arg + *ret);
    return result;
}

/* The class.get method helper, performs the lookup of class attributes.
 * It returns an error code. Number of function return values is passed inside 'ret'.
 * first_arg is not used in this function because function always has 2 arguments.
 */
SWIGINTERN int  SWIG_Lua_class_do_get(lua_State *L, swig_type_info *type, int SWIGUNUSED first_arg, int *ret)
{
/*  there should be 2 params passed in
  (1) userdata (not the meta table)
  (2) string name of the attribute
*/
  int bases_search_result;
  int substack_start = lua_gettop(L)-2;
  assert(first_arg == substack_start+1);
  lua_checkstack(L,5);
  assert(lua_isuserdata(L,-2));  /* just in case */
  lua_getmetatable(L,-2);    /* get the meta table */
  assert(lua_istable(L,-1));  /* just in case */
  SWIG_Lua_get_table(L,".get"); /* find the .get table */
  assert(lua_istable(L,-1));  /* just in case */
  /* look for the key in the .get table */
  lua_pushvalue(L,substack_start+2);  /* key */
  lua_rawget(L,-2);
  lua_remove(L,-2); /* stack tidy, remove .get table */
  if (lua_iscfunction(L,-1))
  {  /* found it so call the fn & return its value */
    lua_pushvalue(L,substack_start+1);  /* the userdata */
    lua_call(L,1,1);  /* 1 value in (userdata),1 out (result) */
    lua_remove(L,-2); /* stack tidy, remove metatable */
    if(ret)
      *ret = 1;
    return SWIG_OK;
  }
  lua_pop(L,1);  /* remove whatever was there */
  /* ok, so try the .fn table */
  SWIG_Lua_get_table(L,".fn"); /* find the .fn table */
  assert(lua_istable(L,-1));  /* just in case */
  lua_pushvalue(L,substack_start+2);  /* key */
  lua_rawget(L,-2);  /* look for the fn */
  lua_remove(L,-2); /* stack tidy, remove .fn table */
  if (lua_isfunction(L,-1)) /* note: if its a C function or lua function */
  {  /* found it so return the fn & let lua call it */
    lua_remove(L,-2); /* stack tidy, remove metatable */
    if(ret)
      *ret = 1;
    return SWIG_OK;
  }
  lua_pop(L,1);  /* remove whatever was there */
  /* NEW: looks for the __getitem() fn
  this is a user provided get fn */
  SWIG_Lua_get_table(L,"__getitem"); /* find the __getitem fn */
  if (lua_iscfunction(L,-1))  /* if its there */
  {  /* found it so call the fn & return its value */
    lua_pushvalue(L,substack_start+1);  /* the userdata */
    lua_pushvalue(L,substack_start+2);  /* the parameter */
    lua_call(L,2,1);  /* 2 value in (userdata),1 out (result) */
    lua_remove(L,-2); /* stack tidy, remove metatable */
    if(ret) *ret = 1;
    return SWIG_OK;
  }
  lua_pop(L,1);
  /* Remove the metatable */
  lua_pop(L,1);
  /* Search in base classes */
  bases_search_result = SWIG_Lua_iterate_bases(L,type,substack_start+1,SWIG_Lua_class_do_get,ret);
  return bases_search_result;  /* sorry not known */
}

/* the class.get method, performs the lookup of class attributes
 */
SWIGINTERN int  SWIG_Lua_class_get(lua_State *L)
{
/*  there should be 2 params passed in
  (1) userdata (not the meta table)
  (2) string name of the attribute
*/
  int result;
  swig_lua_userdata *usr;
  swig_type_info *type;
  int ret = 0;
  assert(lua_isuserdata(L,1));
  usr=(swig_lua_userdata*)lua_touserdata(L,1);  /* get data */
  type = usr->type;
  result = SWIG_Lua_class_do_get(L,type,1,&ret);
  if(result == SWIG_OK)
    return ret;

  return 0;
}

/* helper for the class.set method, performs the lookup of class attributes
 * It returns error code. Number of function return values is passed inside 'ret'
 */
SWIGINTERN int  SWIG_Lua_class_do_set(lua_State *L, swig_type_info *type, int first_arg, int *ret)
{
/*  there should be 3 params passed in
  (1) table (not the meta table)
  (2) string name of the attribute
  (3) any for the new value
  */

  int bases_search_result;
  int substack_start = lua_gettop(L) - 3;
  lua_checkstack(L,5);
  assert(lua_isuserdata(L,substack_start+1));  /* just in case */
  lua_getmetatable(L,substack_start+1);    /* get the meta table */
  assert(lua_istable(L,-1));  /* just in case */
  if(ret)
    *ret = 0; /* it is setter - number of return values is always 0 */

  SWIG_Lua_get_table(L,".set"); /* find the .set table */
  if (lua_istable(L,-1))
  {
    /* look for the key in the .set table */
    lua_pushvalue(L,substack_start+2);  /* key */
    lua_rawget(L,-2);
    lua_remove(L,-2); /* tidy stack, remove .set table */
    if (lua_iscfunction(L,-1))
    {  /* found it so call the fn & return its value */
      lua_pushvalue(L,substack_start+1);  /* userdata */
      lua_pushvalue(L,substack_start+3);  /* value */
      lua_call(L,2,0);
      lua_remove(L,substack_start+4); /*remove metatable*/
      return SWIG_OK;
    }
    lua_pop(L,1);  /* remove the value */
  } else {
    lua_pop(L,1);  /* remove the answer for .set table request*/
  }
  /* NEW: looks for the __setitem() fn
  this is a user provided set fn */
  SWIG_Lua_get_table(L,"__setitem"); /* find the fn */
  if (lua_iscfunction(L,-1))  /* if its there */
  {  /* found it so call the fn & return its value */
    lua_pushvalue(L,substack_start+1);  /* the userdata */
    lua_pushvalue(L,substack_start+2);  /* the parameter */
    lua_pushvalue(L,substack_start+3);  /* the value */
    lua_call(L,3,0);  /* 3 values in ,0 out */
    lua_remove(L,-2); /* stack tidy, remove metatable */
    return SWIG_OK;
  }
  lua_pop(L,1); /* remove value */

  lua_pop(L,1); /* remove metatable */
  /* Search among bases */
  bases_search_result = SWIG_Lua_iterate_bases(L,type,first_arg,SWIG_Lua_class_do_set,ret);
  if(ret)
    assert(*ret == 0);
  assert(lua_gettop(L) == substack_start + 3);
  return bases_search_result;
}

/* This is the actual method exported to Lua. It calls SWIG_Lua_class_do_set and correctly
 * handles return values.
 */
SWIGINTERN int  SWIG_Lua_class_set(lua_State *L)
{
/*  There should be 3 params passed in
  (1) table (not the meta table)
  (2) string name of the attribute
  (3) any for the new value
  */
  int ret = 0;
  int result;
  swig_lua_userdata *usr;
  swig_type_info *type;
  assert(lua_isuserdata(L,1));
  usr=(swig_lua_userdata*)lua_touserdata(L,1);  /* get data */
  type = usr->type;
  result = SWIG_Lua_class_do_set(L,type,1,&ret);
  if(result != SWIG_OK) {
   SWIG_Lua_pushferrstring(L,"Assignment not possible. No setter/member with this name. For custom assignments implement __setitem method.");
   lua_error(L);
  } else {
    assert(ret==0);
  }
  return 0;
}

/* the class.destruct method called by the interpreter */
SWIGINTERN int  SWIG_Lua_class_destruct(lua_State *L)
{
/*  there should be 1 params passed in
  (1) userdata (not the meta table) */
  swig_lua_userdata *usr;
  swig_lua_class *clss;
  assert(lua_isuserdata(L,-1));  /* just in case */
  usr=(swig_lua_userdata*)lua_touserdata(L,-1);  /* get it */
  /* if must be destroyed & has a destructor */
  if (usr->own) /* if must be destroyed */
  {
    clss=(swig_lua_class*)usr->type->clientdata;  /* get the class */
    if (clss && clss->destructor)  /* there is a destroy fn */
    {
      clss->destructor(usr->ptr);  /* bye bye */
    }
  }
  return 0;
}

/* the class.__tostring method called by the interpreter and print */
SWIGINTERN int  SWIG_Lua_class_tostring(lua_State *L)
{
/*  there should be 1 param passed in
  (1) userdata (not the metatable) */
  const char *className;
  void* userData;
  assert(lua_isuserdata(L,1));  /* just in case */
  userData = lua_touserdata(L,1); /* get the userdata address for later */
  lua_getmetatable(L,1);    /* get the meta table */
  assert(lua_istable(L,-1));  /* just in case */

  lua_getfield(L, -1, ".type");
  className = lua_tostring(L, -1);

  lua_pushfstring(L, "<%s userdata: %p>", className, userData);
  return 1;
}

/* to manually disown some userdata */
SWIGINTERN int  SWIG_Lua_class_disown(lua_State *L)
{
/*  there should be 1 params passed in
  (1) userdata (not the meta table) */
  swig_lua_userdata *usr;
  assert(lua_isuserdata(L,-1));  /* just in case */
  usr=(swig_lua_userdata*)lua_touserdata(L,-1);  /* get it */
  
  usr->own = 0; /* clear our ownership */
  return 0;
}

/* lua callable function to compare userdata's value
the issue is that two userdata may point to the same thing
but to lua, they are different objects */
SWIGRUNTIME int SWIG_Lua_class_equal(lua_State *L)
{
  int result;
  swig_lua_userdata *usr1,*usr2;
  if (!lua_isuserdata(L,1) || !lua_isuserdata(L,2))  /* just in case */
    return 0;  /* nil reply */
  usr1=(swig_lua_userdata*)lua_touserdata(L,1);  /* get data */
  usr2=(swig_lua_userdata*)lua_touserdata(L,2);  /* get data */
  /*result=(usr1->ptr==usr2->ptr && usr1->type==usr2->type); only works if type is the same*/
  result=(usr1->ptr==usr2->ptr);
   lua_pushboolean(L,result);
  return 1;
}

/* populate table at the top of the stack with metamethods that ought to be inherited */
SWIGINTERN void SWIG_Lua_populate_inheritable_metamethods(lua_State *L)
{
  SWIG_Lua_add_boolean(L, "__add", 1);
  SWIG_Lua_add_boolean(L, "__sub", 1);
  SWIG_Lua_add_boolean(L, "__mul", 1);
  SWIG_Lua_add_boolean(L, "__div", 1);
  SWIG_Lua_add_boolean(L, "__mod", 1);
  SWIG_Lua_add_boolean(L, "__pow", 1);
  SWIG_Lua_add_boolean(L, "__unm", 1);
  SWIG_Lua_add_boolean(L, "__len", 1 );
  SWIG_Lua_add_boolean(L, "__concat", 1 );
  SWIG_Lua_add_boolean(L, "__eq", 1);
  SWIG_Lua_add_boolean(L, "__lt", 1);
  SWIG_Lua_add_boolean(L, "__le", 1);
  SWIG_Lua_add_boolean(L, "__call", 1);
  SWIG_Lua_add_boolean(L, "__tostring", 1);
  SWIG_Lua_add_boolean(L, "__gc", 0);
}

/* creates the swig registry */
SWIGINTERN void SWIG_Lua_create_class_registry(lua_State *L)
{
  /* create main SWIG registry table */
  lua_pushstring(L,"SWIG");
  lua_newtable(L);
  /* populate it with some predefined data */

  /* .library table. Placeholder */
  lua_pushstring(L,".library");
  lua_newtable(L);
  {
    /* list of metamethods that class inherits from its bases */
    lua_pushstring(L,"inheritable_metamethods");
    lua_newtable(L);
    /* populate with list of metamethods */
    SWIG_Lua_populate_inheritable_metamethods(L);
    lua_rawset(L,-3);
  }
  lua_rawset(L,-3);

  lua_rawset(L,LUA_REGISTRYINDEX);
}

/* gets the swig registry (or creates it) */
SWIGINTERN void  SWIG_Lua_get_class_registry(lua_State *L)
{
  /* add this all into the swig registry: */
  lua_pushstring(L,"SWIG");
  lua_rawget(L,LUA_REGISTRYINDEX);  /* get the registry */
  if (!lua_istable(L,-1))  /* not there */
  {  /* must be first time, so add it */
    lua_pop(L,1);  /* remove the result */
    SWIG_Lua_create_class_registry(L);
    /* then get it */
    lua_pushstring(L,"SWIG");
    lua_rawget(L,LUA_REGISTRYINDEX);
  }
}

SWIGINTERN void SWIG_Lua_get_inheritable_metamethods(lua_State *L)
{
  SWIG_Lua_get_class_registry(L);
  lua_pushstring(L, ".library");
  lua_rawget(L,-2);
  assert( !lua_isnil(L,-1) );
  lua_pushstring(L, "inheritable_metamethods");
  lua_rawget(L,-2);

  /* Remove class registry and library table */
  lua_remove(L,-2);
  lua_remove(L,-2);
}

/* Helper function to get the classes metatable from the register */
SWIGINTERN void  SWIG_Lua_get_class_metatable(lua_State *L,const char *cname)
{
  SWIG_Lua_get_class_registry(L);  /* get the registry */
  lua_pushstring(L,cname);  /* get the name */
  lua_rawget(L,-2);    /* get it */
  lua_remove(L,-2);    /* tidy up (remove registry) */
}

/* Set up the base classes pointers.
Each class structure has a list of pointers to the base class structures.
This function fills them.
It cannot be done at compile time, as this will not work with hireachies
spread over more than one swig file. 
Therefore it must be done at runtime, querying the SWIG type system.
*/
SWIGINTERN void SWIG_Lua_init_base_class(lua_State *L,swig_lua_class *clss)
{
  int i=0;
  swig_module_info *module=SWIG_GetModule(L);
  for(i=0;clss->base_names[i];i++)
  {
    if (clss->bases[i]==0) /* not found yet */
    {
      /* lookup and cache the base class */
      swig_type_info *info = SWIG_TypeQueryModule(module,module,clss->base_names[i]);
      if (info) clss->bases[i] = (swig_lua_class *) info->clientdata;
    }
  }
}

#if defined(SWIG_LUA_SQUASH_BASES) && (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_LUA)
/* Merges two tables  */
SWIGINTERN void SWIG_Lua_merge_tables_by_index(lua_State *L, int target, int source)
{
  /* iterating */
  lua_pushnil(L);
  while (lua_next(L,source) != 0) {
    /* -1 - value, -2 - index */
    /* have to copy to assign */
    lua_pushvalue(L,-2); /* copy of index */
    lua_pushvalue(L,-2); /* copy of value */
    lua_rawset(L, target);
    lua_pop(L,1);
    /* only key is left */
  }
}

/* Merges two tables with given name. original - index of target metatable, base - index of source metatable */
SWIGINTERN void SWIG_Lua_merge_tables(lua_State *L, const char* name, int original, int base)
{
  /* push original[name], then base[name] */
  lua_pushstring(L,name);
  lua_rawget(L,original);
  int original_table = lua_gettop(L);
  lua_pushstring(L,name);
  lua_rawget(L,base);
  int base_table = lua_gettop(L);
  SWIG_Lua_merge_tables_by_index(L, original_table, base_table);
  /* clearing stack */
  lua_pop(L,2);
}

/* Function takes all symbols from base and adds it to derived class. It's just a helper. */
SWIGINTERN void SWIG_Lua_class_squash_base(lua_State *L, swig_lua_class *base_cls)
{
  /* There is one parameter - original, i.e. 'derived' class metatable */
  assert(lua_istable(L,-1));
  int original = lua_gettop(L);
  SWIG_Lua_get_class_metatable(L,base_cls->fqname);
  int base = lua_gettop(L);
  SWIG_Lua_merge_tables(L, ".fn", original, base );
  SWIG_Lua_merge_tables(L, ".set", original, base );
  SWIG_Lua_merge_tables(L, ".get", original, base );
  lua_pop(L,1);
}

/* Function squashes all symbols from 'clss' bases into itself */
SWIGINTERN void  SWIG_Lua_class_squash_bases(lua_State *L, swig_lua_class *clss)
{
  int i;
  SWIG_Lua_get_class_metatable(L,clss->fqname);
  for(i=0;clss->base_names[i];i++)
  {
    if (clss->bases[i]==0) /* Somehow it's not found. Skip it */
      continue;
    /* Thing is: all bases are already registered. Thus they have already executed
     * this function. So we just need to squash them into us, because their bases
     * are already squashed into them. No need for recursion here!
     */
    SWIG_Lua_class_squash_base(L, clss->bases[i]);
  }
  lua_pop(L,1); /*tidy stack*/
}
#endif

#if (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_LUA) /* In elua this is useless */
/* helper add a variable to a registered class */
SWIGINTERN void  SWIG_Lua_add_variable(lua_State *L,const char *name,lua_CFunction getFn,lua_CFunction setFn)
{
  assert(lua_istable(L,-1));  /* just in case */
  SWIG_Lua_get_table(L,".get"); /* find the .get table */
  assert(lua_istable(L,-1));  /* just in case */
  SWIG_Lua_add_function(L,name,getFn);
  lua_pop(L,1);       /* tidy stack (remove table) */
  if (setFn)
  {
    SWIG_Lua_get_table(L,".set"); /* find the .set table */
    assert(lua_istable(L,-1));  /* just in case */
    SWIG_Lua_add_function(L,name,setFn);
    lua_pop(L,1);       /* tidy stack (remove table) */
  }
}

/* helper to recursively add class static details (static attributes, operations and constants) */
SWIGINTERN void SWIG_Lua_add_class_static_details(lua_State *L, swig_lua_class *clss)
{
  int i = 0;
  /* The class namespace table must be on the top of the stack */
  assert(lua_istable(L,-1));
  /* call all the base classes first: we can then override these later: */
  for(i=0;clss->bases[i];i++)
  {
    SWIG_Lua_add_class_static_details(L,clss->bases[i]);
  }

  SWIG_Lua_add_namespace_details(L, clss->cls_static);
}

SWIGINTERN void SWIG_Lua_add_class_user_metamethods(lua_State *L, swig_lua_class *clss); /* forward declaration */

/* helper to recursively add class details (attributes & operations) */
SWIGINTERN void  SWIG_Lua_add_class_instance_details(lua_State *L, swig_lua_class *clss)
{
  int i;
  size_t bases_count = 0;
  /* Add bases to .bases table */
  SWIG_Lua_get_table(L,".bases");
  assert(lua_istable(L,-1));  /* just in case */
  for(i=0;clss->bases[i];i++)
  {
    SWIG_Lua_get_class_metatable(L,clss->bases[i]->fqname);
    /* Base class must be already registered */
    assert(lua_istable(L,-1));
    lua_rawseti(L,-2,i+1); /* In lua indexing starts from 1 */
    bases_count++;
  }
  assert(lua_rawlen(L,-1) == bases_count);
  lua_pop(L,1); /* remove .bases table */
  /* add attributes */
  for(i=0;clss->attributes[i].name;i++){
    SWIG_Lua_add_variable(L,clss->attributes[i].name,clss->attributes[i].getmethod,clss->attributes[i].setmethod);
  }
  /* add methods to the metatable */
  SWIG_Lua_get_table(L,".fn"); /* find the .fn table */
  assert(lua_istable(L,-1));  /* just in case */
  for(i=0;clss->methods[i].name;i++){
    SWIG_Lua_add_function(L,clss->methods[i].name,clss->methods[i].func);
  }
  lua_pop(L,1);       /* tidy stack (remove table) */
  /* add operator overloads
    This adds methods from metatable array to metatable. Can mess up garbage
    collectind if someone defines __gc method
    */
  if(clss->metatable) {
    for(i=0;clss->metatable[i].name;i++) {
      SWIG_Lua_add_function(L,clss->metatable[i].name,clss->metatable[i].func);
    }
  }

#if !defined(SWIG_LUA_SQUASH_BASES)
  /* Adding metamethods that are defined in base classes. If bases were squashed
   * then it is obviously unnecessary
   */
  SWIG_Lua_add_class_user_metamethods(L, clss);
#endif
}

/* Helpers to add user defined class metamedhods - __add, __sub etc. The helpers are needed
   for the following issue: Lua runtime checks for metamethod existence with rawget function
   ignoring our SWIG-provided __index and __newindex functions. Thus our inheritance-aware method
   search algorithm doesn't work in such case. (Not to say that Lua runtime queries metamethod directly
   in metatable and not in object).
   Current solution is this: if somewhere in hierarchy metamethod __x is defined, then all descendants
   are automatically given a special proxy __x that calls the real __x method.
   Obvious idea - to copy __x instead of creating __x-proxy is wrong because if someone changes __x in runtime,
   those changes must be reflected in all descendants.
*/

SWIGRUNTIME int SWIG_Lua_resolve_metamethod(lua_State *L); /*forward declaration*/

/* The real function that resolves a metamethod.
 * Function searches given class and all it's bases(recursively) for first instance of something that is
 * not equal to SWIG_Lua_resolve_metatmethod. (Almost always this 'something' is actual metamethod implementation
 * and it is a SWIG-generated C function.). It returns value on the top of the L and there is no garbage below the
 * answer.
 * Returns 1 if found, 0 otherwise.
 * clss is class which metatable we will search for method
 * metamethod_name_idx is index in L where metamethod name (as string) lies
 * skip_check allows to skip searching metamethod in givel clss and immideatelly go to searching in bases. skip_check
 * is not caried to subsequent recursive calls - false is always passed. It is set to true only at first call from
 * SWIG_Lua_resolve_metamethod
 * */
SWIGINTERN int SWIG_Lua_do_resolve_metamethod(lua_State *L, const swig_lua_class *clss, int metamethod_name_idx,
    int skip_check)
{
  /* This function is called recursively */
  int result = 0;
  int i = 0;

  if (!skip_check) {
    SWIG_Lua_get_class_metatable(L, clss->fqname);
    lua_pushvalue(L, metamethod_name_idx);
    lua_rawget(L,-2);
    /* If this is cfunction and it is equal to SWIG_Lua_resolve_metamethod then
     * this isn't the function we are looking for :)
     * lua_tocfunction will return NULL if not cfunction
     */
    if (!lua_isnil(L,-1) && lua_tocfunction(L,-1) != SWIG_Lua_resolve_metamethod ) {
      lua_remove(L,-2); /* removing class metatable */
      return 1;
    }
    lua_pop(L,2); /* remove class metatable and query result */
  }

  /* Forwarding calls to bases */
  for(i=0;clss->bases[i];i++)
  {
    result = SWIG_Lua_do_resolve_metamethod(L, clss->bases[i], metamethod_name_idx, 0);
    if (result)
      break;
  }

  return result;
}

/* The proxy function for metamethod. All parameters are passed as cclosure. Searches for actual method
 * and calls it */
SWIGRUNTIME int SWIG_Lua_resolve_metamethod(lua_State *L)
{
  int numargs;
  int metamethod_name_idx;
  const swig_lua_class* clss;
  int result;

  lua_checkstack(L,5);
  numargs = lua_gettop(L); /* number of arguments to pass to actual metamethod */
  
  /* Get upvalues from closure */
  lua_pushvalue(L, lua_upvalueindex(1)); /*Get function name*/
  metamethod_name_idx = lua_gettop(L);
  
  lua_pushvalue(L, lua_upvalueindex(2));
  clss = (const swig_lua_class*)(lua_touserdata(L,-1));
  lua_pop(L,1); /* remove lightuserdata with clss from stack */

  /* Actual work */
  result = SWIG_Lua_do_resolve_metamethod(L, clss, metamethod_name_idx, 1);
  if (!result) {
   SWIG_Lua_pushferrstring(L,"The metamethod proxy is set, but it failed to find actual metamethod. Memory corruption is most likely explanation.");
   lua_error(L);
   return 0;
  }

  lua_remove(L,-2); /* remove metamethod key */
  lua_insert(L,1); /* move function to correct position */
  lua_call(L, numargs, LUA_MULTRET);
  return lua_gettop(L); /* return all results */
}


/* If given metamethod must be present in given class, then creates appropriate proxy
 * Returns 1 if successfully added, 0 if not added because no base class has it, -1
 * if method is defined in the class metatable itself
 */
SWIGINTERN int SWIG_Lua_add_class_user_metamethod(lua_State *L, swig_lua_class *clss, const int metatable_index)
{
  int key_index;
  int success = 0;
  int i = 0;

  /* metamethod name - on the top of the stack */
  assert(lua_isstring(L,-1));
  
  key_index = lua_gettop(L);

  /* Check whether method is already defined in metatable */
  lua_pushvalue(L,key_index); /* copy of the key */
  lua_gettable(L,metatable_index);
  if( !lua_isnil(L,-1) ) {
    lua_pop(L,1);
    return -1;
  }
  lua_pop(L,1); 

  /* Iterating over immediate bases */
  for(i=0;clss->bases[i];i++)
  {
    const swig_lua_class *base = clss->bases[i];
    SWIG_Lua_get_class_metatable(L, base->fqname);
    lua_pushvalue(L, key_index);
    lua_rawget(L, -2);
    if( !lua_isnil(L,-1) ) {
      lua_pushvalue(L, key_index); 

      /* Add proxy function */
      lua_pushvalue(L, key_index); /* first closure value is function name */
      lua_pushlightuserdata(L, clss); /* second closure value is swig_lua_class structure */
      lua_pushcclosure(L, SWIG_Lua_resolve_metamethod, 2);
      
      lua_rawset(L, metatable_index);
      success = 1;
    }
    lua_pop(L,1); /* remove function or nil */
    lua_pop(L,1); /* remove base class metatable */

    if( success )
      break;
  }

  return success; 
}

SWIGINTERN void SWIG_Lua_add_class_user_metamethods(lua_State *L, swig_lua_class *clss)
{
  int metatable_index;
  int metamethods_info_index;
  int tostring_undefined;
  int eq_undefined = 0;

  SWIG_Lua_get_class_metatable(L, clss->fqname);
  metatable_index = lua_gettop(L);
  SWIG_Lua_get_inheritable_metamethods(L);
  assert(lua_istable(L,-1));
  metamethods_info_index = lua_gettop(L);
  lua_pushnil(L); /* first key */
  while(lua_next(L, metamethods_info_index) != 0 ) {
    /* key at index -2, value at index -1 */
    const int is_inheritable = lua_toboolean(L,-2);
    lua_pop(L,1); /* remove value - we don't need it anymore */

    if(is_inheritable) { /* if metamethod is inheritable */
      SWIG_Lua_add_class_user_metamethod(L,clss,metatable_index);
    }
  }

  lua_pop(L,1); /* remove inheritable metatmethods table */

  /* Special handling for __tostring method */
  lua_pushstring(L, "__tostring");
  lua_pushvalue(L,-1);
  lua_rawget(L,metatable_index);
  tostring_undefined = lua_isnil(L,-1);
  lua_pop(L,1);
  if( tostring_undefined ) {
    lua_pushcfunction(L, SWIG_Lua_class_tostring);
    lua_rawset(L, metatable_index);
  } else {
    lua_pop(L,1); /* remove copy of the key */
  }

  /* Special handling for __eq method */
  lua_pushstring(L, "__eq");
  lua_pushvalue(L,-1);
  lua_rawget(L,metatable_index);
  eq_undefined = lua_isnil(L,-1);
  lua_pop(L,1);
  if( eq_undefined ) {
    lua_pushcfunction(L, SWIG_Lua_class_equal);
    lua_rawset(L, metatable_index);
  } else {
    lua_pop(L,1); /* remove copy of the key */
  }
  /* Warning: __index and __newindex are SWIG-defined. For user-defined operator[]
   * a __getitem/__setitem method should be defined
   */
  lua_pop(L,1); /* pop class metatable */
}

/* Register class static methods,attributes etc as well as constructor proxy */
SWIGINTERN void SWIG_Lua_class_register_static(lua_State *L, swig_lua_class *clss)
{
  const int SWIGUNUSED begin = lua_gettop(L);
  lua_checkstack(L,5); /* just in case */
  assert(lua_istable(L,-1));  /* just in case */
  assert(strcmp(clss->name, clss->cls_static->name) == 0); /* in class those 2 must be equal */

  SWIG_Lua_namespace_register(L,clss->cls_static, 1);

  assert(lua_istable(L,-1)); /* just in case */

  /*  add its constructor to module with the name of the class
  so you can do MyClass(...) as well as new_MyClass(...)
  BUT only if a constructor is defined
  (this overcomes the problem of pure virtual classes without constructors)*/
  if (clss->constructor)
  {
    lua_getmetatable(L,-1);
    assert(lua_istable(L,-1)); /* just in case */
    SWIG_Lua_add_function(L,"__call", clss->constructor);
    lua_pop(L,1);
  }

  assert(lua_istable(L,-1)); /* just in case */
  SWIG_Lua_add_class_static_details(L, clss);

  /* clear stack */
  lua_pop(L,1);
  assert( lua_gettop(L) == begin );
}

/* Performs the instance (non-static) class registration process. Metatable for class is created
 * and added to the class registry.
 */
SWIGINTERN void  SWIG_Lua_class_register_instance(lua_State *L,swig_lua_class *clss)
{
  const int SWIGUNUSED begin = lua_gettop(L);
  int i;
  /* if name already there (class is already registered) then do nothing */
  SWIG_Lua_get_class_registry(L);  /* get the registry */
  lua_pushstring(L,clss->fqname);  /* get the name */
  lua_rawget(L,-2);
  if(!lua_isnil(L,-1)) {
    lua_pop(L,2);
    assert(lua_gettop(L)==begin);
    return;
  }
  lua_pop(L,2); /* tidy stack */
  /* Recursively initialize all bases */
  for(i=0;clss->bases[i];i++)
  {
    SWIG_Lua_class_register_instance(L,clss->bases[i]);
  }
  /* Again, get registry and push name */
  SWIG_Lua_get_class_registry(L);  /* get the registry */
  lua_pushstring(L,clss->fqname);  /* get the name */
  lua_newtable(L);    /* create the metatable */
#if defined(SWIG_LUA_SQUASH_BASES) && (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_LUA)
  /* If squashing is requested, then merges all bases metatable into this one.
   * It would get us all special methods: __getitem, __add etc.
   * This would set .fn, .type, and other .xxx incorrectly, but we will overwrite it right away
   */
  {
    int new_metatable_index = lua_absindex(L,-1);
    for(i=0;clss->bases[i];i++)
    {
      int base_metatable;
      SWIG_Lua_get_class_metatable(L,clss->bases[i]->fqname);
      base_metatable = lua_absindex(L,-1);
      SWIG_Lua_merge_tables_by_index(L,new_metatable_index, base_metatable);
      lua_pop(L,1);
    }
  }
  /* And now we will overwrite all incorrectly set data */
#endif
  /* add string of class name called ".type" */
  lua_pushstring(L,".type");
  lua_pushstring(L,clss->fqname);
  lua_rawset(L,-3);
  /* add a table called bases */
  lua_pushstring(L,".bases");
  lua_newtable(L);
  lua_rawset(L,-3);
  /* add a table called ".get" */
  lua_pushstring(L,".get");
  lua_newtable(L);
  lua_rawset(L,-3);
  /* add a table called ".set" */
  lua_pushstring(L,".set");
  lua_newtable(L);
  lua_rawset(L,-3);
  /* add a table called ".fn" */
  lua_pushstring(L,".fn");
  lua_newtable(L);
  /* add manual disown method */
  SWIG_Lua_add_function(L,"__disown",SWIG_Lua_class_disown);
  lua_rawset(L,-3);
  /* add accessor fns for using the .get,.set&.fn */
  SWIG_Lua_add_function(L,"__index",SWIG_Lua_class_get);
  SWIG_Lua_add_function(L,"__newindex",SWIG_Lua_class_set);
  SWIG_Lua_add_function(L,"__gc",SWIG_Lua_class_destruct);
  /* add it */
  lua_rawset(L,-3);  /* metatable into registry */
  lua_pop(L,1);      /* tidy stack (remove registry) */
  assert(lua_gettop(L) == begin);

#if defined(SWIG_LUA_SQUASH_BASES) && (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_LUA)
  /* Now merge all symbols from .fn, .set, .get etc from bases to our tables */
  SWIG_Lua_class_squash_bases(L,clss);
#endif
  SWIG_Lua_get_class_metatable(L,clss->fqname);
  SWIG_Lua_add_class_instance_details(L,clss);  /* recursive adding of details (atts & ops) */
  lua_pop(L,1);      /* tidy stack (remove class metatable) */
  assert( lua_gettop(L) == begin );
}

SWIGINTERN void  SWIG_Lua_class_register(lua_State *L,swig_lua_class *clss)
{
  int SWIGUNUSED begin;
  assert(lua_istable(L,-1)); /* This is a table (module or namespace) where classes will be added */
  SWIG_Lua_class_register_instance(L,clss);
  SWIG_Lua_class_register_static(L,clss);

  /* Add links from static part to instance part and vice versa */
  /* [SWIG registry]                                   [Module]
   *    "MyClass" ----> [MyClass metatable] <=====     "MyClass" -+> [static part]
   *                     ".get" ----> ...        |                |     getmetatable()----|
   *                     ".set" ----> ...        |                |                       |
   *                     ".static" --------------)----------------/           [static part metatable]
   *                                             |                                ".get" --> ...
   *                                             |                                ".set" --> ....
   *                                             |=============================== ".instance"
   */
  begin = lua_gettop(L);
  lua_pushstring(L,clss->cls_static->name);
  lua_rawget(L,-2); /* get class static table */
  assert(lua_istable(L,-1));
  lua_getmetatable(L,-1);
  assert(lua_istable(L,-1)); /* get class static metatable */
  lua_pushstring(L,".instance"); /* prepare key */

  SWIG_Lua_get_class_metatable(L,clss->fqname); /* get class metatable */
  assert(lua_istable(L,-1));
  lua_pushstring(L,".static"); /* prepare key */
  lua_pushvalue(L, -4); /* push static class TABLE */
  assert(lua_istable(L,-1));
  lua_rawset(L,-3); /* assign static class table(!NOT metatable) as ".static" member of class metatable */
  lua_rawset(L,-3); /* assign class metatable as ".instance" member of class static METATABLE */
  lua_pop(L,2);
  assert(lua_gettop(L) == begin);
}
#endif /* SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_LUA */

#if (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUA) || (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUAC)
SWIGINTERN void SWIG_Lua_elua_class_register_instance(lua_State *L, swig_lua_class *clss)
{
  const int SWIGUNUSED begin = lua_gettop(L);
  int i;
  /* if name already there (class is already registered) then do nothing */
  SWIG_Lua_get_class_registry(L);  /* get the registry */
  lua_pushstring(L,clss->fqname);  /* get the name */
  lua_rawget(L,-2);
  if(!lua_isnil(L,-1)) {
    lua_pop(L,2);
    assert(lua_gettop(L)==begin);
    return;
  }
  lua_pop(L,2); /* tidy stack */
  /* Recursively initialize all bases */
  for(i=0;clss->bases[i];i++)
  {
    SWIG_Lua_elua_class_register_instance(L,clss->bases[i]);
  }
  /* Again, get registry and push name */
  SWIG_Lua_get_class_registry(L);  /* get the registry */
  lua_pushstring(L,clss->fqname);  /* get the name */
  assert(clss->metatable);
  lua_pushrotable(L, (void*)(clss->metatable));    /* create the metatable */
  lua_rawset(L,-3);
  lua_pop(L,1);
  assert(lua_gettop(L) == begin);
}
#endif /* elua && eluac */

/* -----------------------------------------------------------------------------
 * Class/structure conversion fns
 * ----------------------------------------------------------------------------- */

/* helper to add metatable to new lua object */
SWIGINTERN void SWIG_Lua_AddMetatable(lua_State *L,swig_type_info *type)
{
  if (type->clientdata)  /* there is clientdata: so add the metatable */
  {
    SWIG_Lua_get_class_metatable(L,((swig_lua_class*)(type->clientdata))->fqname);
    if (lua_istable(L,-1))
    {
      lua_setmetatable(L,-2);
    }
    else
    {
      lua_pop(L,1);
    }
  }
}

/* pushes a new object into the lua stack */
SWIGRUNTIME void SWIG_Lua_NewPointerObj(lua_State *L,void *ptr,swig_type_info *type, int own)
{
  swig_lua_userdata *usr;
  if (!ptr){
    lua_pushnil(L);
    return;
  }
  usr=(swig_lua_userdata*)lua_newuserdata(L,sizeof(swig_lua_userdata));  /* get data */
  usr->ptr=ptr;  /* set the ptr */
  usr->type=type;
  usr->own=own;
#if (SWIG_LUA_TARGET != SWIG_LUA_FLAVOR_ELUAC)
  SWIG_Lua_AddMetatable(L,type); /* add metatable */
#endif
}

/* takes a object from the lua stack & converts it into an object of the correct type
 (if possible) */
SWIGRUNTIME int  SWIG_Lua_ConvertPtr(lua_State *L,int index,void **ptr,swig_type_info *type,int flags)
{
  swig_lua_userdata *usr;
  swig_cast_info *cast;
  if (lua_isnil(L,index)){*ptr=0; return SWIG_OK;}    /* special case: lua nil => NULL pointer */
  usr=(swig_lua_userdata*)lua_touserdata(L,index);  /* get data */
  if (usr)
  {
    if (flags & SWIG_POINTER_DISOWN) /* must disown the object */
    {
        usr->own=0;
    }
    if (!type)            /* special cast void*, no casting fn */
    {
      *ptr=usr->ptr;
      return SWIG_OK; /* ok */
    }
    cast=SWIG_TypeCheckStruct(usr->type,type); /* performs normal type checking */
    if (cast)
    {
      int newmemory = 0;
      *ptr=SWIG_TypeCast(cast,usr->ptr,&newmemory);
      assert(!newmemory); /* newmemory handling not yet implemented */
      return SWIG_OK;  /* ok */
    }
  }
  return SWIG_ERROR;  /* error */
}

SWIGRUNTIME void* SWIG_Lua_MustGetPtr(lua_State *L,int index,swig_type_info *type,int flags,
       int argnum,const char *func_name){
  void *result;
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,index,&result,type,flags))){
    luaL_error (L,"Error in %s, expected a %s at argument number %d\n",
		func_name,(type && type->str)?type->str:"void*",argnum);
  }
  return result;
}

/* pushes a packed userdata. user for member fn pointers only */
SWIGRUNTIME void SWIG_Lua_NewPackedObj(lua_State *L,void *ptr,size_t size,swig_type_info *type)
{
  swig_lua_rawdata *raw;
  assert(ptr); /* not acceptable to pass in a NULL value */
  raw=(swig_lua_rawdata*)lua_newuserdata(L,sizeof(swig_lua_rawdata)-1+size);  /* alloc data */
  raw->type=type;
  raw->own=0;
  memcpy(raw->data,ptr,size); /* copy the data */
  SWIG_Lua_AddMetatable(L,type); /* add metatable */
}
    
/* converts a packed userdata. user for member fn pointers only */
SWIGRUNTIME int  SWIG_Lua_ConvertPacked(lua_State *L,int index,void *ptr,size_t size,swig_type_info *type)
{
  swig_lua_rawdata *raw;
  raw=(swig_lua_rawdata*)lua_touserdata(L,index);  /* get data */
  if (!raw) return SWIG_ERROR;  /* error */
  if (type==0 || type==raw->type) /* void* or identical type */
  {
    memcpy(ptr,raw->data,size); /* copy it */
    return SWIG_OK; /* ok */
  }
  return SWIG_ERROR;  /* error */
}

/* a function to get the typestring of a piece of data */
SWIGRUNTIME const char *SWIG_Lua_typename(lua_State *L, int tp)
{
  swig_lua_userdata *usr;
  if (lua_isuserdata(L,tp))
  {
    usr=(swig_lua_userdata*)lua_touserdata(L,tp);  /* get data */
    if (usr && usr->type && usr->type->str)
      return usr->type->str;
    return "userdata (unknown type)";
  }
  return lua_typename(L,lua_type(L,tp));
}

/* lua callable function to get the userdata's type */
SWIGRUNTIME int SWIG_Lua_type(lua_State *L)
{
  lua_pushstring(L,SWIG_Lua_typename(L,1));
  return 1;
}

/* -----------------------------------------------------------------------------
 * global variable support code: class/struct typemap functions
 * ----------------------------------------------------------------------------- */

#if ((SWIG_LUA_TARGET != SWIG_LUA_FLAVOR_ELUA) && (SWIG_LUA_TARGET != SWIG_LUA_FLAVOR_ELUAC))
/* Install Constants */
SWIGINTERN void
SWIG_Lua_InstallConstants(lua_State *L, swig_lua_const_info constants[]) {
  int i;
  for (i = 0; constants[i].type; i++) {
    switch(constants[i].type) {
    case SWIG_LUA_INT:
      lua_pushstring(L,constants[i].name);
      lua_pushinteger(L,(lua_Number)constants[i].lvalue);
      lua_rawset(L,-3);
      break;
    case SWIG_LUA_FLOAT:
      lua_pushstring(L,constants[i].name);
      lua_pushnumber(L,(lua_Number)constants[i].dvalue);
      lua_rawset(L,-3);
      break;
    case SWIG_LUA_CHAR:
      lua_pushstring(L,constants[i].name);
      {
        char c = constants[i].lvalue;
        lua_pushlstring(L,&c,1);
      }
      lua_rawset(L,-3);
      break;
    case SWIG_LUA_STRING:
      lua_pushstring(L,constants[i].name);
      lua_pushstring(L,(char *) constants[i].pvalue);
      lua_rawset(L,-3);
      break;
    case SWIG_LUA_POINTER:
      lua_pushstring(L,constants[i].name);
      SWIG_NewPointerObj(L,constants[i].pvalue, *(constants[i]).ptype,0);
      lua_rawset(L,-3);
      break;
    case SWIG_LUA_BINARY:
      lua_pushstring(L,constants[i].name);
      SWIG_NewMemberObj(L,constants[i].pvalue,constants[i].lvalue,*(constants[i]).ptype);
      lua_rawset(L,-3);
      break;
    default:
      break;
    }
  }
}
#endif

/* -----------------------------------------------------------------------------
 * executing lua code from within the wrapper
 * ----------------------------------------------------------------------------- */

#ifndef SWIG_DOSTRING_FAIL /* Allows redefining of error function */
#define SWIG_DOSTRING_FAIL(S) fprintf(stderr,"%s\n",S)
#endif
/* Executes a C string in Lua which is a really simple way of calling lua from C
Unfortunately lua keeps changing its APIs, so we need a conditional compile
In lua 5.0.X it's lua_dostring()
In lua 5.1.X it's luaL_dostring()
*/
SWIGINTERN int 
SWIG_Lua_dostring(lua_State *L, const char *str) {
  int ok,top;
  if (str==0 || str[0]==0) return 0; /* nothing to do */
  top=lua_gettop(L); /* save stack */
#if (defined(LUA_VERSION_NUM) && (LUA_VERSION_NUM>=501))
  ok=luaL_dostring(L,str);	/* looks like this is lua 5.1.X or later, good */
#else
  ok=lua_dostring(L,str);	/* might be lua 5.0.x, using lua_dostring */
#endif
  if (ok!=0) {
    SWIG_DOSTRING_FAIL(lua_tostring(L,-1));
  }
  lua_settop(L,top); /* restore the stack */
  return ok;
}    

#ifdef __cplusplus
}
#endif

/* ------------------------------ end luarun.swg  ------------------------------ */


/* -------- TYPES TABLE (BEGIN) -------- */

#define SWIGTYPE_p_LUA_EVENT swig_types[0]
#define SWIGTYPE_p_LUA_FUNCTION swig_types[1]
#define SWIGTYPE_p_LUA_METHOD swig_types[2]
#define SWIGTYPE_p_align_t swig_types[3]
#define SWIGTYPE_p_cvar_t swig_types[4]
#define SWIGTYPE_p_invDef_t swig_types[5]
#define SWIGTYPE_p_itemFilterTypes_t swig_types[6]
#define SWIGTYPE_p_layoutAlign_t swig_types[7]
#define SWIGTYPE_p_linkedList_t swig_types[8]
#define SWIGTYPE_p_longlines_t swig_types[9]
#define SWIGTYPE_p_panelLayout_t swig_types[10]
#define SWIGTYPE_p_uiAbstractBaseNode_t swig_types[11]
#define SWIGTYPE_p_uiAbstractOptionNode_t swig_types[12]
#define SWIGTYPE_p_uiAbstractScrollableNode_t swig_types[13]
#define SWIGTYPE_p_uiAbstractScrollbarNode_t swig_types[14]
#define SWIGTYPE_p_uiAbstractValueNode_t swig_types[15]
#define SWIGTYPE_p_uiBarNode_t swig_types[16]
#define SWIGTYPE_p_uiBaseInventoryNode_t swig_types[17]
#define SWIGTYPE_p_uiBaseLayoutNode_t swig_types[18]
#define SWIGTYPE_p_uiBaseMapNode_t swig_types[19]
#define SWIGTYPE_p_uiButtonNode_t swig_types[20]
#define SWIGTYPE_p_uiCheckBoxNode_t swig_types[21]
#define SWIGTYPE_p_uiConFuncNode_t swig_types[22]
#define SWIGTYPE_p_uiContainerNode_t swig_types[23]
#define SWIGTYPE_p_uiDataNode_t swig_types[24]
#define SWIGTYPE_p_uiEkgNode_t swig_types[25]
#define SWIGTYPE_p_uiGeoscapeNode_t swig_types[26]
#define SWIGTYPE_p_uiImageNode_t swig_types[27]
#define SWIGTYPE_p_uiItemNode_t swig_types[28]
#define SWIGTYPE_p_uiLineChartNode_t swig_types[29]
#define SWIGTYPE_p_uiMessageListNode_t swig_types[30]
#define SWIGTYPE_p_uiModelNode_t swig_types[31]
#define SWIGTYPE_p_uiNode_t swig_types[32]
#define SWIGTYPE_p_uiOptionListNode_t swig_types[33]
#define SWIGTYPE_p_uiOptionNode_t swig_types[34]
#define SWIGTYPE_p_uiOptionTreeNode_t swig_types[35]
#define SWIGTYPE_p_uiPanelNode_t swig_types[36]
#define SWIGTYPE_p_uiRadarNode_t swig_types[37]
#define SWIGTYPE_p_uiRadioButtonNode_t swig_types[38]
#define SWIGTYPE_p_uiRowsNode_t swig_types[39]
#define SWIGTYPE_p_uiSelectBoxNode_t swig_types[40]
#define SWIGTYPE_p_uiSequenceNode_t swig_types[41]
#define SWIGTYPE_p_uiSpinnerNode_t swig_types[42]
#define SWIGTYPE_p_uiStringNode_t swig_types[43]
#define SWIGTYPE_p_uiTBarNode_t swig_types[44]
#define SWIGTYPE_p_uiTabNode_t swig_types[45]
#define SWIGTYPE_p_uiText2Node_t swig_types[46]
#define SWIGTYPE_p_uiTextEntryNode_t swig_types[47]
#define SWIGTYPE_p_uiTextListNode_t swig_types[48]
#define SWIGTYPE_p_uiTextNode_t swig_types[49]
#define SWIGTYPE_p_uiTextureNode_t swig_types[50]
#define SWIGTYPE_p_uiTimerNode_t swig_types[51]
#define SWIGTYPE_p_uiVScrollBarNode_t swig_types[52]
#define SWIGTYPE_p_uiVideoNode_t swig_types[53]
#define SWIGTYPE_p_uiWidgetNode_t swig_types[54]
#define SWIGTYPE_p_uiWindowNode_t swig_types[55]
#define SWIGTYPE_p_uiZoneNode_t swig_types[56]
#define SWIGTYPE_p_vec2_struct_t swig_types[57]
#define SWIGTYPE_p_vec3_struct_t swig_types[58]
static swig_type_info *swig_types[60];
static swig_module_info swig_module = {swig_types, 59, 0, 0, 0, 0};
#define SWIG_TypeQuery(name) SWIG_TypeQueryModule(&swig_module, &swig_module, name)
#define SWIG_MangledTypeQuery(name) SWIG_MangledTypeQueryModule(&swig_module, &swig_module, name)

/* -------- TYPES TABLE (END) -------- */

#define SWIG_name      "ufo"
#define SWIG_init      luaopen_ufo
#define SWIG_init_user luaopen_ufo_user

#define SWIG_LUACODE   luaopen_ufo_luacode

namespace swig {
typedef struct{} LANGUAGE_OBJ;
}


/* disable al casting warnings (enabled at the bottom line of this file) */
#pragma GCC diagnostic ignored "-Wcast-qual"

/* common client stuff */
#include "../../../shared/shared.h"
#include "../../../shared/vector.h"
#include "../../../shared/ufotypes.h"
#include "../../../common/cvar.h"
#include "../../../common/scripts.h"
#include "../../../common/scripts_lua.h"

#include "../../cl_renderer.h"
#include "../../cl_inventory.h"

/* ui specific stuff */
#include "../ui_behaviour.h"
#include "../ui_data.h"
#include "../ui_dataids.h"
#include "../ui_node.h"
#include "../ui_nodes.h"
#include "../ui_main.h"
#include "../ui_sprite.h"

#include "../node/ui_node_abstractnode.h"
#include "../node/ui_node_abstractoption.h"
#include "../node/ui_node_abstractscrollable.h"
#include "../node/ui_node_abstractscrollbar.h"
#include "../node/ui_node_abstractvalue.h"

#include "../node/ui_node_bar.h"
#include "../node/ui_node_base.h"
#include "../node/ui_node_baseinventory.h"
#include "../node/ui_node_battlescape.h"
#include "../node/ui_node_button.h"
#include "../node/ui_node_checkbox.h"
#include "../node/ui_node_container.h"
#include "../node/ui_node_controls.h"
#include "../node/ui_node_data.h"
#include "../node/ui_node_ekg.h"
#include "../node/ui_node_geoscape.h"
#include "../node/ui_node_image.h"
#include "../node/ui_node_item.h"
#include "../node/ui_node_linechart.h"
#include "../node/ui_node_messagelist.h"
#include "../node/ui_node_model.h"
#include "../node/ui_node_option.h"
#include "../node/ui_node_optionlist.h"
#include "../node/ui_node_optiontree.h"
#include "../node/ui_node_panel.h"
#include "../node/ui_node_radar.h"
#include "../node/ui_node_radiobutton.h"
#include "../node/ui_node_rows.h"
#include "../node/ui_node_selectbox.h"
#include "../node/ui_node_sequence.h"
#include "../node/ui_node_special.h"
#include "../node/ui_node_spinner.h"
#include "../node/ui_node_string.h"
#include "../node/ui_node_tab.h"
#include "../node/ui_node_tbar.h"
#include "../node/ui_node_text.h"
#include "../node/ui_node_text2.h"
#include "../node/ui_node_textentry.h"
#include "../node/ui_node_textlist.h"
#include "../node/ui_node_texture.h"
#include "../node/ui_node_timer.h"
#include "../node/ui_node_video.h"
#include "../node/ui_node_vscrollbar.h"
#include "../node/ui_node_window.h"
#include "../node/ui_node_zone.h"

#include "../ui_lua.h"

/* other game stuff */
#include "../../../game/inv_shared.h"

/*
	typedefs only visible for SWIG, used for subclassing uiNode_t (see below for more details). Note
	that uiAbstractNode_t is missing from the list, since this is the uiNode_t type.
*/
typedef uiNode_t uiAbstractBaseNode_t;
typedef uiNode_t uiAbstractOptionNode_t;
typedef uiNode_t uiAbstractScrollableNode_t;
typedef uiNode_t uiAbstractScrollbarNode_t;
typedef uiNode_t uiAbstractValueNode_t;

typedef uiNode_t uiBarNode_t;
typedef uiNode_t uiBaseMapNode_t;
typedef uiNode_t uiBaseLayoutNode_t;
typedef uiNode_t uiBaseInventoryNode_t;
typedef uiNode_t uiButtonNode_t;
typedef uiNode_t uiCheckBoxNode_t;
typedef uiNode_t uiConFuncNode_t;
typedef uiNode_t uiContainerNode_t;
typedef uiNode_t uiDataNode_t;
typedef uiNode_t uiEkgNode_t;
typedef uiNode_t uiGeoscapeNode_t;
typedef uiNode_t uiImageNode_t;
typedef uiNode_t uiItemNode_t;
typedef uiNode_t uiLineChartNode_t;
typedef uiNode_t uiMessageListNode_t;
typedef uiNode_t uiModelNode_t;
typedef uiNode_t uiOptionNode_t;
typedef uiNode_t uiOptionListNode_t;
typedef uiNode_t uiOptionTreeNode_t;
typedef uiNode_t uiPanelNode_t;
typedef uiNode_t uiRadarNode_t;
typedef uiNode_t uiRadioButtonNode_t;
typedef uiNode_t uiRowsNode_t;
typedef uiNode_t uiSelectBoxNode_t;
typedef uiNode_t uiSequenceNode_t;
typedef uiNode_t uiSpinnerNode_t;
typedef uiNode_t uiStringNode_t;
typedef uiNode_t uiTabNode_t;
typedef uiNode_t uiTBarNode_t;
typedef uiNode_t uiTextNode_t;
typedef uiNode_t uiText2Node_t;
typedef uiNode_t uiTextEntryNode_t;
typedef uiNode_t uiTextListNode_t;
typedef uiNode_t uiTextureNode_t;
typedef uiNode_t uiTimerNode_t;
typedef uiNode_t uiVideoNode_t;
typedef uiNode_t uiVScrollBarNode_t;
typedef uiNode_t uiWidgetNode_t; /* note: ufo class = "controls" */
typedef uiNode_t uiWindowNode_t;
typedef uiNode_t uiZoneNode_t;

// skipped: uiFuncNode, uiNullNode, uiTodoNode

/*
   This function queries the SWIG type table for a type information structure. It is used in combination
   with the typemap for converting return values that specify uiNode_t*.
*/
void* UI_SWIG_TypeQuery (const char* name) {
	swig_type_info* info=SWIG_TypeQuery(name);
	if (!info) {
		info = SWIG_TypeQuery("uiNode_t *");
	}
	return info;
}

/*
	This function returns the SWIG typename for the given node.
*/
const char* UI_SWIG_NodeTypeName (void* node) {
	swig_type_info* info = (swig_type_info*)((uiNode_t*)node)->behaviour->lua_SWIG_typeinfo;
	return info->str;
}


SWIGINTERN char *cvar_t_name(cvar_t *self){ return self->name; }
SWIGINTERN char *cvar_t_as_string(cvar_t *self){ return self->string; }
SWIGINTERN float cvar_t_as_float(cvar_t *self){ return self->value; }
SWIGINTERN int cvar_t_as_integer(cvar_t *self){ return self->integer; }
SWIGINTERN void cvar_t_set_value__SWIG_0(cvar_t *self,float number){ Cvar_SetValue(self->name, number);  }

SWIGINTERN int SWIG_lua_isnilstring(lua_State *L, int idx) {
  int ret = lua_isstring(L, idx);
  if (!ret)
   ret = lua_isnil(L, idx);
  return ret;
}

SWIGINTERN void cvar_t_set_value__SWIG_1(cvar_t *self,char const *text){ Cvar_Set(self->name, text); }
SWIGINTERN char *invDef_t_name(invDef_t *self){ return self->name; }
SWIGINTERN bool uiNode_t_is_window(uiNode_t *self){ return UI_Node_IsWindow(self); }
SWIGINTERN bool uiNode_t_is_disabled(uiNode_t *self){ return UI_Node_IsDisabled(self); }
SWIGINTERN bool uiNode_t_is_invisible(uiNode_t *self){ return UI_Node_IsInvisible(self); }
SWIGINTERN bool uiNode_t_is_ghost(uiNode_t *self){ return UI_Node_IsGhost(self); }
SWIGINTERN bool uiNode_t_is_flashing(uiNode_t *self){ return UI_Node_IsFlashing(self); }
SWIGINTERN bool uiNode_t_is_function(uiNode_t *self){ return UI_Node_IsFunction(self); }
SWIGINTERN bool uiNode_t_is_virtual(uiNode_t *self){ return UI_Node_IsVirtual(self); }
SWIGINTERN bool uiNode_t_is_abstract(uiNode_t *self){ return UI_Node_IsAbstract(self); }
SWIGINTERN float uiNode_t_left(uiNode_t *self){ return self->box.pos[0]; }
SWIGINTERN float uiNode_t_top(uiNode_t *self){ return self->box.pos[1]; }
SWIGINTERN float uiNode_t_width(uiNode_t *self){ return self->box.size[0]; }
SWIGINTERN float uiNode_t_height(uiNode_t *self){ return self->box.size[1]; }
SWIGINTERN int uiNode_t_bordersize(uiNode_t *self){ return self->border; }
SWIGINTERN char const *uiNode_t_name(uiNode_t *self){ return self->name; }
SWIGINTERN char const *uiNode_t_type(uiNode_t *self){ return self->behaviour->name; }
SWIGINTERN char const *uiNode_t_text(uiNode_t *self){ return UI_Node_GetText(self); }
SWIGINTERN char const *uiNode_t_font(uiNode_t *self){ return self->font; }
SWIGINTERN char const *uiNode_t_image(uiNode_t *self){ return self->image; }
SWIGINTERN int uiNode_t_contentalign(uiNode_t *self){ return self->contentAlign; }
SWIGINTERN int uiNode_t_layoutalign(uiNode_t *self){ return self->align; }
SWIGINTERN float uiNode_t_flashspeed(uiNode_t *self){ return self->flashSpeed; }
SWIGINTERN int uiNode_t_padding(uiNode_t *self){ return self->padding; }
SWIGINTERN uiNode_t *uiNode_t_first(uiNode_t *self){ return self->firstChild; }
SWIGINTERN uiNode_t *uiNode_t_last(uiNode_t *self){ return self->lastChild; }
SWIGINTERN uiNode_t *uiNode_t_next(uiNode_t *self){ return self->next; }
SWIGINTERN uiNode_t *uiNode_t_parent(uiNode_t *self){ return self->parent; }
SWIGINTERN uiNode_t *uiNode_t_root(uiNode_t *self){ return self->root; }
SWIGINTERN uiNode_t *uiNode_t_child(uiNode_t *self,char const *name){ return UI_GetNode(self, name); }
SWIGINTERN uiNode_t *uiNode_t_find(uiNode_t *self,char const *name){ return UI_FindNode(self, name); }
SWIGINTERN void uiNode_t_append_node(uiNode_t *self,uiNode_t *node){ UI_AppendNode(self, node); }
SWIGINTERN void uiNode_t_insert_node(uiNode_t *self,uiNode_t *node,uiNode_t *prev){ UI_InsertNode(self, prev, node); }
SWIGINTERN void uiNode_t_delete_node(uiNode_t *self){ UI_DeleteNode (self); }
SWIGINTERN void uiNode_t_remove_children(uiNode_t *self){ UI_DeleteAllChild (self); }
SWIGINTERN void uiNode_t_set_left(uiNode_t *self,float value){ UI_NodeSetBox(self, value, -1, -1, -1); }
SWIGINTERN void uiNode_t_set_top(uiNode_t *self,float value){ UI_NodeSetBox(self, -1, value, -1, -1); }
SWIGINTERN void uiNode_t_set_width(uiNode_t *self,float value){ UI_NodeSetBox(self, -1, -1, value, -1); }
SWIGINTERN void uiNode_t_set_height(uiNode_t *self,float value){ UI_NodeSetBox(self, -1, -1, -1, value); }
SWIGINTERN void uiNode_t_set_box(uiNode_t *self,float left,float top,float width,float height){ UI_NodeSetBox(self, left, top, width, height); }
SWIGINTERN void uiNode_t_set_flashing(uiNode_t *self,bool value){ self->flash = value; }
SWIGINTERN void uiNode_t_set_flashspeed(uiNode_t *self,float value){ self->flashSpeed = value; }
SWIGINTERN void uiNode_t_set_invisible(uiNode_t *self,bool value){ self->invis = value; }
SWIGINTERN void uiNode_t_set_ghost(uiNode_t *self,bool value){ self->ghost = value; }
SWIGINTERN void uiNode_t_set_pos(uiNode_t *self,float x,float y){ UI_NodeSetPos(self, x, y); }
SWIGINTERN void uiNode_t_set_size(uiNode_t *self,float w,float h){ UI_NodeSetSize(self, w, h); }
SWIGINTERN void uiNode_t_set_color(uiNode_t *self,float r,float g,float b,float a){ Vector4Set(self->color, r, g, b, a); }
SWIGINTERN void uiNode_t_set_disabledcolor(uiNode_t *self,float r,float g,float b,float a){ Vector4Set(self->disabledColor, r, g, b, a); }
SWIGINTERN void uiNode_t_set_flashcolor(uiNode_t *self,float r,float g,float b,float a){ Vector4Set(self->flashColor, r, g, b, a); }
SWIGINTERN void uiNode_t_set_selectcolor(uiNode_t *self,float r,float g,float b,float a){ Vector4Set(self->selectedColor, r, g, b, a); }
SWIGINTERN void uiNode_t_set_backgroundcolor(uiNode_t *self,float r,float g,float b,float a){ Vector4Set(self->bgcolor, r, g, b, a); }
SWIGINTERN void uiNode_t_set_bordersize(uiNode_t *self,int size){ self->border = size; }
SWIGINTERN void uiNode_t_set_bordercolor(uiNode_t *self,float r,float g,float b,float a){ Vector4Set(self->bordercolor, r, g, b, a); }
SWIGINTERN void uiNode_t_set_text(uiNode_t *self,char const *text){ UI_Node_SetText(self, text); }
SWIGINTERN void uiNode_t_set_font(uiNode_t *self,char const *name){ UI_Node_SetFont(self, name); }
SWIGINTERN void uiNode_t_set_image(uiNode_t *self,char const *name){ UI_Node_SetImage (self, name); }
SWIGINTERN void uiNode_t_set_contentalign(uiNode_t *self,int value){ self->contentAlign = value; }
SWIGINTERN void uiNode_t_set_layoutalign(uiNode_t *self,int value){ self->align = value; }
SWIGINTERN void uiNode_t_set_tooltip(uiNode_t *self,char const *text){ UI_Node_SetTooltip(self, text); }
SWIGINTERN void uiNode_t_set_disabled(uiNode_t *self,bool value){ UI_Node_SetDisabled(self, value); }
SWIGINTERN void uiNode_t_set_borderthickness(uiNode_t *self,int value){ self->border = value; }
SWIGINTERN void uiNode_t_set_padding(uiNode_t *self,int value){ self->padding = value; }
SWIGINTERN void uiNode_t___setitem(uiNode_t *self,char const *name,LUA_METHOD fcn){ UI_Node_SetItem(self, name, fcn); }
SWIGINTERN LUA_METHOD uiNode_t___getitem(uiNode_t *self,char const *name){ LUA_METHOD fcn = UI_Node_GetItem(self, name); return fcn; }
SWIGINTERN void uiNode_t_add_classmethod(uiNode_t *self,char const *name,LUA_METHOD fcn){ UI_AddBehaviourMethod(self->behaviour, name, fcn); }
SWIGINTERN void uiNode_t_add_nodemethod(uiNode_t *self,char const *name,LUA_METHOD fcn){ UI_AddNodeMethod(self, name, fcn); }
SWIGINTERN int uiAbstractOptionNode_t_dataid(uiAbstractOptionNode_t *self){ return UI_AbstractOption_GetDataId(self); }
SWIGINTERN int uiAbstractOptionNode_t_count(uiAbstractOptionNode_t *self){ return UI_AbstractOption_GetCount(self); }
SWIGINTERN char const *uiAbstractOptionNode_t_cvar(uiAbstractOptionNode_t *self){ return UI_AbstractOption_GetCvar(self); }
SWIGINTERN int uiAbstractOptionNode_t_current(uiAbstractOptionNode_t *self){ return UI_AbstractOption_Scroll_Current(self); }
SWIGINTERN int uiAbstractOptionNode_t_viewsize(uiAbstractOptionNode_t *self){ return UI_AbstractOption_Scroll_ViewSize(self); }
SWIGINTERN int uiAbstractOptionNode_t_fullsize(uiAbstractOptionNode_t *self){ return UI_AbstractOption_Scroll_FullSize(self); }
SWIGINTERN void uiAbstractOptionNode_t_set_dataid(uiAbstractOptionNode_t *self,int id){ UI_AbstractOption_SetDataId(self, id); }
SWIGINTERN void uiAbstractOptionNode_t_set_cvar(uiAbstractOptionNode_t *self,char const *name){ UI_AbstractOption_SetCvar (self, name); }
SWIGINTERN void uiAbstractOptionNode_t_set_background(uiAbstractOptionNode_t *self,char const *name){ UI_AbstractOption_SetBackgroundByName(self, name); }
SWIGINTERN void uiAbstractOptionNode_t_set_current(uiAbstractOptionNode_t *self,int pos){ UI_AbstractOption_Scroll_SetCurrent(self, pos); }
SWIGINTERN void uiAbstractOptionNode_t_set_viewsize(uiAbstractOptionNode_t *self,int size){ UI_AbstractOption_Scroll_SetViewSize(self, size); }
SWIGINTERN void uiAbstractOptionNode_t_set_fullsize(uiAbstractOptionNode_t *self,int size){ UI_AbstractOption_Scroll_SetFullSize(self, size);}

static LUA_EVENT uiAbstractOptionNode_t_lua_onViewChange_get(uiAbstractOptionNode_t* node) {
	return UI_EXTRADATA(node, abstractOptionExtraData_t).lua_onViewChange;
}
static void uiAbstractOptionNode_t_lua_onViewChange_set(uiAbstractOptionNode_t* node, LUA_EVENT fn) {
	UI_EXTRADATA(node, abstractOptionExtraData_t).lua_onViewChange = fn;
}

SWIGINTERN int uiAbstractScrollableNode_t_viewpos(uiAbstractScrollableNode_t *self){ return UI_EXTRADATA(self, abstractScrollableExtraData_t).scrollY.viewPos; }
SWIGINTERN int uiAbstractScrollableNode_t_viewsize(uiAbstractScrollableNode_t *self){ return UI_EXTRADATA(self, abstractScrollableExtraData_t).scrollY.viewSize; }
SWIGINTERN int uiAbstractScrollableNode_t_fullsize(uiAbstractScrollableNode_t *self){ return UI_EXTRADATA(self, abstractScrollableExtraData_t).scrollY.fullSize; }
SWIGINTERN void uiAbstractScrollableNode_t_pageup(uiAbstractScrollableNode_t *self){ dynamic_cast<uiAbstractScrollableNode*>(self->behaviour->manager.get())->pageUp(self); }
SWIGINTERN void uiAbstractScrollableNode_t_pagedown(uiAbstractScrollableNode_t *self){ dynamic_cast<uiAbstractScrollableNode*>(self->behaviour->manager.get())->pageDown(self); }
SWIGINTERN void uiAbstractScrollableNode_t_moveup(uiAbstractScrollableNode_t *self){ dynamic_cast<uiAbstractScrollableNode*>(self->behaviour->manager.get())->moveUp(self); }
SWIGINTERN void uiAbstractScrollableNode_t_movedown(uiAbstractScrollableNode_t *self){ dynamic_cast<uiAbstractScrollableNode*>(self->behaviour->manager.get())->moveDown(self); }
SWIGINTERN void uiAbstractScrollableNode_t_movehome(uiAbstractScrollableNode_t *self){ dynamic_cast<uiAbstractScrollableNode*>(self->behaviour->manager.get())->moveHome(self); }
SWIGINTERN void uiAbstractScrollableNode_t_moveend(uiAbstractScrollableNode_t *self){ dynamic_cast<uiAbstractScrollableNode*>(self->behaviour->manager.get())->moveEnd(self); }
SWIGINTERN void uiAbstractScrollableNode_t_set_viewpos(uiAbstractScrollableNode_t *self,int pos){ dynamic_cast<uiAbstractScrollableNode*>(self->behaviour->manager.get())->setScrollY(self, pos, -1, -1); }
SWIGINTERN void uiAbstractScrollableNode_t_set_viewsize(uiAbstractScrollableNode_t *self,int size){ dynamic_cast<uiAbstractScrollableNode*>(self->behaviour->manager.get())->setScrollY(self, -1, size, -1); }
SWIGINTERN void uiAbstractScrollableNode_t_set_fullsize(uiAbstractScrollableNode_t *self,int size){ dynamic_cast<uiAbstractScrollableNode*>(self->behaviour->manager.get())->setScrollY(self, -1, -1, size); }

static LUA_EVENT uiAbstractScrollableNode_t_lua_onViewChange_get(uiAbstractScrollableNode_t* node) {
	return UI_EXTRADATA(node, abstractScrollableExtraData_t).lua_onViewChange;
}
static void uiAbstractScrollableNode_t_lua_onViewChange_set(uiAbstractScrollableNode_t* node, LUA_EVENT fn) {
	UI_EXTRADATA(node, abstractScrollableExtraData_t).lua_onViewChange = fn;
}

SWIGINTERN bool uiAbstractScrollbarNode_t_is_autoshowscroll(uiAbstractScrollbarNode_t *self){ return UI_EXTRADATA(self, abstractScrollbarExtraData_t).hideWhenUnused; }
SWIGINTERN int uiAbstractScrollbarNode_t_current(uiAbstractScrollbarNode_t *self){ return UI_EXTRADATA(self, abstractScrollbarExtraData_t).pos; }
SWIGINTERN int uiAbstractScrollbarNode_t_viewsize(uiAbstractScrollbarNode_t *self){ return UI_EXTRADATA(self, abstractScrollbarExtraData_t).viewsize; }
SWIGINTERN int uiAbstractScrollbarNode_t_fullsize(uiAbstractScrollbarNode_t *self){ return UI_EXTRADATA(self, abstractScrollbarExtraData_t).fullsize; }
SWIGINTERN void uiAbstractScrollbarNode_t_set_autoshowscroll(uiAbstractScrollbarNode_t *self,bool value){ UI_EXTRADATA(self, abstractScrollbarExtraData_t).hideWhenUnused = value; }
SWIGINTERN void uiAbstractScrollbarNode_t_set_current(uiAbstractScrollbarNode_t *self,int pos){ UI_AbstractScrollbarNodeSet(self, pos); }
SWIGINTERN void uiAbstractScrollbarNode_t_set_viewsize(uiAbstractScrollbarNode_t *self,int size){ UI_EXTRADATA(self, abstractScrollbarExtraData_t).viewsize = size; }
SWIGINTERN void uiAbstractScrollbarNode_t_set_fullsize(uiAbstractScrollbarNode_t *self,int size){ UI_EXTRADATA(self, abstractScrollbarExtraData_t).fullsize = size; }
SWIGINTERN float uiAbstractValueNode_t_min(uiAbstractValueNode_t *self){ return UI_AbstractValue_GetMin(self); }
SWIGINTERN float uiAbstractValueNode_t_max(uiAbstractValueNode_t *self){ return UI_AbstractValue_GetMax(self); }
SWIGINTERN float uiAbstractValueNode_t_value(uiAbstractValueNode_t *self){ return UI_AbstractValue_GetValue(self); }
SWIGINTERN float uiAbstractValueNode_t_delta(uiAbstractValueNode_t *self){ return UI_AbstractValue_GetDelta(self); }
SWIGINTERN float uiAbstractValueNode_t_lastdiff(uiAbstractValueNode_t *self){ return UI_AbstractValue_GetLastDiff(self); }
SWIGINTERN float uiAbstractValueNode_t_shiftmultiplier(uiAbstractValueNode_t *self){ return UI_AbstractValue_GetShiftIncreaseFactor(self); }
SWIGINTERN void uiAbstractValueNode_t_inc_value(uiAbstractValueNode_t *self){ UI_AbstractValue_IncValue (self); }
SWIGINTERN void uiAbstractValueNode_t_dec_value(uiAbstractValueNode_t *self){ UI_AbstractValue_DecValue (self); }
SWIGINTERN void uiAbstractValueNode_t_set_range__SWIG_0(uiAbstractValueNode_t *self,float min,float max){ UI_AbstractValue_SetRange (self, min, max); }
SWIGINTERN void uiAbstractValueNode_t_set_range__SWIG_1(uiAbstractValueNode_t *self,char const *min,char const *max){ UI_AbstractValue_SetRangeCvar(self, min, max); }
SWIGINTERN void uiAbstractValueNode_t_set_min__SWIG_0(uiAbstractValueNode_t *self,float min){ UI_AbstractValue_SetMin(self, min);  }
SWIGINTERN void uiAbstractValueNode_t_set_max__SWIG_0(uiAbstractValueNode_t *self,float max){ UI_AbstractValue_SetMax(self, max); }
SWIGINTERN void uiAbstractValueNode_t_set_value__SWIG_0(uiAbstractValueNode_t *self,float value){ UI_AbstractValue_SetValue (self, value); }
SWIGINTERN void uiAbstractValueNode_t_set_min__SWIG_1(uiAbstractValueNode_t *self,char const *min){ UI_AbstractValue_SetMinCvar(self, min); }
SWIGINTERN void uiAbstractValueNode_t_set_max__SWIG_1(uiAbstractValueNode_t *self,char const *max){ UI_AbstractValue_SetMaxCvar(self, max); }
SWIGINTERN void uiAbstractValueNode_t_set_value__SWIG_1(uiAbstractValueNode_t *self,char const *name){ UI_AbstractValue_SetValueCvar (self, name); }
SWIGINTERN void uiAbstractValueNode_t_set_delta(uiAbstractValueNode_t *self,float delta){ UI_AbstractValue_SetDelta(self, delta); }
SWIGINTERN void uiAbstractValueNode_t_set_shiftmultiplier(uiAbstractValueNode_t *self,float value){ UI_AbstractValue_SetShiftIncreaseFactor(self, value); }
SWIGINTERN bool uiBarNode_t_is_readonly(uiBarNode_t *self){ return UI_EXTRADATA(self, barExtraData_t).readOnly; }
SWIGINTERN bool uiBarNode_t_is_nohover(uiBarNode_t *self){ return UI_EXTRADATA(self, barExtraData_t).noHover; }
SWIGINTERN int uiBarNode_t_direction(uiBarNode_t *self){ return UI_EXTRADATA(self, barExtraData_t).orientation; }
SWIGINTERN void uiBarNode_t_set_direction(uiBarNode_t *self,int value){ UI_EXTRADATA(self, barExtraData_t).orientation = (align_t)value; }
SWIGINTERN void uiBarNode_t_set_readonly(uiBarNode_t *self,bool value){ UI_EXTRADATA(self, barExtraData_t).readOnly = value; }
SWIGINTERN void uiBarNode_t_set_nohover(uiBarNode_t *self,bool value){ UI_EXTRADATA(self, barExtraData_t).noHover = value; }
SWIGINTERN int uiAbstractBaseNode_t_baseid(uiAbstractBaseNode_t *self){ return UI_EXTRADATA(self, baseExtraData_t).baseid; }
SWIGINTERN void uiAbstractBaseNode_t_set_baseid(uiAbstractBaseNode_t *self,int value){ UI_EXTRADATA(self, baseExtraData_t).baseid = value; }
SWIGINTERN bool uiButtonNode_t_flipicon(uiButtonNode_t *self){ return UI_EXTRADATA(self, buttonExtraData_t).flipIcon; }
SWIGINTERN void uiButtonNode_t_set_flipicon(uiButtonNode_t *self,bool value){ UI_EXTRADATA(self, buttonExtraData_t).flipIcon = value; }
SWIGINTERN void uiButtonNode_t_set_background(uiButtonNode_t *self,char const *name){ UI_Button_SetBackgroundByName(self, name); }
SWIGINTERN void uiButtonNode_t_set_icon(uiButtonNode_t *self,char const *name){ UI_Button_SetIconByName(self, name); }
SWIGINTERN bool uiCheckBoxNode_t_as_boolean(uiCheckBoxNode_t *self){ return UI_CheckBox_ValueAsBoolean(self); }
SWIGINTERN int uiCheckBoxNode_t_as_integer(uiCheckBoxNode_t *self){ return UI_CheckBox_ValueAsInteger(self); }
SWIGINTERN void uiCheckBoxNode_t_set_background(uiCheckBoxNode_t *self,char const *name){ UI_CheckBox_SetBackgroundByName(self, name); }
SWIGINTERN void uiCheckBoxNode_t_set_iconchecked(uiCheckBoxNode_t *self,char const *name){ UI_CheckBox_SetIconCheckedByName(self, name); }
SWIGINTERN void uiCheckBoxNode_t_set_iconunchecked(uiCheckBoxNode_t *self,char const *name){ UI_CheckBox_SetIconUncheckedByName(self, name); }
SWIGINTERN void uiCheckBoxNode_t_set_iconunknown(uiCheckBoxNode_t *self,char const *name){ UI_CheckBox_SetIconUnknownByName(self, name); }
SWIGINTERN void uiCheckBoxNode_t_toggle(uiCheckBoxNode_t *self){ UI_CheckBox_Toggle(self); }
SWIGINTERN int uiContainerNode_t_selectedid(uiContainerNode_t *self){ return UI_EXTRADATA(self, containerExtraData_t).lastSelectedId; }

static LUA_EVENT uiContainerNode_t_lua_onSelect_get(uiContainerNode_t* node) {
	return UI_EXTRADATA(node, containerExtraData_t).lua_onSelect;
}
static void uiContainerNode_t_lua_onSelect_set(uiContainerNode_t* node, LUA_EVENT fn) {
	UI_EXTRADATA(node, containerExtraData_t).lua_onSelect = fn;
}

SWIGINTERN int uiBaseInventoryNode_t_filtertype(uiBaseInventoryNode_t *self){ return UI_EXTRADATA(self, baseInventoryExtraData_t).filterEquipType; }
SWIGINTERN int uiBaseInventoryNode_t_columns(uiBaseInventoryNode_t *self){ return UI_EXTRADATA(self, baseInventoryExtraData_t).columns; }
SWIGINTERN bool uiBaseInventoryNode_t_is_displayweapon(uiBaseInventoryNode_t *self){ return UI_EXTRADATA(self, baseInventoryExtraData_t).displayWeapon; }
SWIGINTERN bool uiBaseInventoryNode_t_is_displayweaponammo(uiBaseInventoryNode_t *self){ return UI_EXTRADATA(self, baseInventoryExtraData_t).displayAmmoOfWeapon; }
SWIGINTERN bool uiBaseInventoryNode_t_is_displayammo(uiBaseInventoryNode_t *self){ return UI_EXTRADATA(self, baseInventoryExtraData_t).displayAmmo; }
SWIGINTERN bool uiBaseInventoryNode_t_is_displayimplant(uiBaseInventoryNode_t *self){ return UI_EXTRADATA(self, baseInventoryExtraData_t).displayImplant; }
SWIGINTERN bool uiBaseInventoryNode_t_is_displayunavailable(uiBaseInventoryNode_t *self){ return UI_EXTRADATA(self, baseInventoryExtraData_t).displayUnavailableItem; }
SWIGINTERN bool uiBaseInventoryNode_t_is_displayunavailableammo(uiBaseInventoryNode_t *self){ return UI_EXTRADATA(self, baseInventoryExtraData_t).displayUnavailableAmmoOfWeapon; }
SWIGINTERN bool uiBaseInventoryNode_t_is_displayavailableontop(uiBaseInventoryNode_t *self){ return UI_EXTRADATA(self, baseInventoryExtraData_t).displayAvailableOnTop; }
SWIGINTERN void uiBaseInventoryNode_t_set_displayweapon(uiBaseInventoryNode_t *self,bool value){ UI_EXTRADATA(self, baseInventoryExtraData_t).displayWeapon = value; }
SWIGINTERN void uiBaseInventoryNode_t_set_displayweaponammo(uiBaseInventoryNode_t *self,bool value){ UI_EXTRADATA(self, baseInventoryExtraData_t).displayAmmoOfWeapon = value; }
SWIGINTERN void uiBaseInventoryNode_t_set_displayammo(uiBaseInventoryNode_t *self,bool value){ UI_EXTRADATA(self, baseInventoryExtraData_t).displayAmmo = value; }
SWIGINTERN void uiBaseInventoryNode_t_set_displayimplant(uiBaseInventoryNode_t *self,bool value){ UI_EXTRADATA(self, baseInventoryExtraData_t).displayImplant = value; }
SWIGINTERN void uiBaseInventoryNode_t_set_displayunavailable(uiBaseInventoryNode_t *self,bool value){ UI_EXTRADATA(self, baseInventoryExtraData_t).displayUnavailableItem = value; }
SWIGINTERN void uiBaseInventoryNode_t_set_displayunavailableammo(uiBaseInventoryNode_t *self,bool value){ UI_EXTRADATA(self, baseInventoryExtraData_t).displayUnavailableAmmoOfWeapon = value; }
SWIGINTERN void uiBaseInventoryNode_t_set_displayavailableontop(uiBaseInventoryNode_t *self,bool value){ UI_EXTRADATA(self, baseInventoryExtraData_t).displayAvailableOnTop = value; }
SWIGINTERN int uiBaseInventoryNode_t_viewpos(uiBaseInventoryNode_t *self){ return UI_EXTRADATA(self, baseInventoryExtraData_t).scrollY.viewPos; }
SWIGINTERN int uiBaseInventoryNode_t_viewsize(uiBaseInventoryNode_t *self){ return UI_EXTRADATA(self, baseInventoryExtraData_t).scrollY.viewSize; }
SWIGINTERN int uiBaseInventoryNode_t_fullsize(uiBaseInventoryNode_t *self){ return UI_EXTRADATA(self, baseInventoryExtraData_t).scrollY.fullSize; }
SWIGINTERN void uiBaseInventoryNode_t_set_viewpos(uiBaseInventoryNode_t *self,int pos){ UI_EXTRADATA(self, baseInventoryExtraData_t).scrollY.viewPos = pos; }
SWIGINTERN void uiBaseInventoryNode_t_set_viewsize(uiBaseInventoryNode_t *self,int size){ UI_EXTRADATA(self, baseInventoryExtraData_t).scrollY.viewSize = size; }
SWIGINTERN void uiBaseInventoryNode_t_set_fullsize(uiBaseInventoryNode_t *self,int size){ UI_EXTRADATA(self, baseInventoryExtraData_t).scrollY.fullSize = size; }

static LUA_EVENT uiBaseInventoryNode_t_lua_onViewChange_get(uiBaseInventoryNode_t* node) {
	return UI_EXTRADATA(node, baseInventoryExtraData_t).lua_onViewChange;
}
static void uiBaseInventoryNode_t_lua_onViewChange_set(uiBaseInventoryNode_t* node, LUA_EVENT fn) {
	UI_EXTRADATA(node, baseInventoryExtraData_t).lua_onViewChange = fn;
}

SWIGINTERN char *uiDataNode_t_as_string(uiDataNode_t *self){ return const_cast<char*>(UI_Node_GetText(self)); }
SWIGINTERN int uiDataNode_t_as_integer(uiDataNode_t *self){ return UI_EXTRADATA(self, dataExtraData_t).integer; }
SWIGINTERN float uiDataNode_t_as_float(uiDataNode_t *self){ return UI_EXTRADATA(self, dataExtraData_t).number; }
SWIGINTERN void uiDataNode_t_set_value__SWIG_0(uiDataNode_t *self,char const *value){ UI_Node_SetText(self, value); }
SWIGINTERN void uiDataNode_t_set_value__SWIG_1(uiDataNode_t *self,int value){ UI_EXTRADATA(self, dataExtraData_t).integer = value; }
SWIGINTERN void uiDataNode_t_set_valuef(uiDataNode_t *self,float value){ UI_EXTRADATA(self, dataExtraData_t).number = value; }
SWIGINTERN void uiGeoscapeNode_t_zoomin(uiGeoscapeNode_t *self){ dynamic_cast<uiGeoscapeNode*>(self->behaviour->manager.get())->zoom(self, false); }
SWIGINTERN void uiGeoscapeNode_t_zoomout(uiGeoscapeNode_t *self){ dynamic_cast<uiGeoscapeNode*>(self->behaviour->manager.get())->zoom(self, true); }
SWIGINTERN bool uiImageNode_t_is_keepratio(uiImageNode_t *self){ return UI_EXTRADATA(self, imageExtraData_t).preventRatio; }
SWIGINTERN bool uiImageNode_t_is_mousefx(uiImageNode_t *self){ return UI_EXTRADATA(self, imageExtraData_t).mousefx; }
SWIGINTERN vec2_struct_t *uiImageNode_t_texh(uiImageNode_t *self){ return (vec2_struct_t*)UI_EXTRADATA(self, imageExtraData_t).texh; }
SWIGINTERN vec2_struct_t *uiImageNode_t_texl(uiImageNode_t *self){ return (vec2_struct_t*)UI_EXTRADATA(self, imageExtraData_t).texl; }
SWIGINTERN void uiImageNode_t_set_keepratio(uiImageNode_t *self,bool value){ UI_EXTRADATA(self, imageExtraData_t).preventRatio = value; }
SWIGINTERN void uiImageNode_t_set_mousefx(uiImageNode_t *self,bool value){ UI_EXTRADATA(self, imageExtraData_t).mousefx = value; }
SWIGINTERN void uiImageNode_t_set_source(uiImageNode_t *self,char const *name){ UI_Node_SetImage(self, name); }
SWIGINTERN void uiImageNode_t_set_texh(uiImageNode_t *self,float v1,float v2){ Vector2Set(UI_EXTRADATA(self, imageExtraData_t).texh, v1, v2); }
SWIGINTERN void uiImageNode_t_set_texl(uiImageNode_t *self,float v1,float v2){ Vector2Set(UI_EXTRADATA(self, imageExtraData_t).texl, v1, v2); }
SWIGINTERN float uiEkgNode_t_scrollspeed(uiEkgNode_t *self){ return UI_EXTRADATA(self, ekgExtraData_t).scrollSpeed; }
SWIGINTERN float uiEkgNode_t_cvarscale(uiEkgNode_t *self){ return UI_EXTRADATA(self, ekgExtraData_t).scaleCvarValue; }
SWIGINTERN void uiEkgNode_t_set_scrollspeed(uiEkgNode_t *self,float value){ UI_EXTRADATA(self, ekgExtraData_t).scrollSpeed = value; }
SWIGINTERN void uiEkgNode_t_set_cvarscale(uiEkgNode_t *self,float value){ UI_EXTRADATA(self, ekgExtraData_t).scaleCvarValue = value; }
SWIGINTERN bool uiLineChartNode_t_is_showaxes(uiLineChartNode_t *self){ return UI_EXTRADATA(self, lineChartExtraData_t).displayAxes; }
SWIGINTERN int uiLineChartNode_t_dataid(uiLineChartNode_t *self){ return UI_EXTRADATA(self, lineChartExtraData_t).dataId; }
SWIGINTERN void uiLineChartNode_t_set_dataid(uiLineChartNode_t *self,int id){ UI_EXTRADATA(self, lineChartExtraData_t).dataId = id; }
SWIGINTERN void uiLineChartNode_t_set_showaxes(uiLineChartNode_t *self,bool value){ UI_EXTRADATA(self, lineChartExtraData_t).displayAxes = value; }
SWIGINTERN void uiLineChartNode_t_set_axescolor(uiLineChartNode_t *self,float r,float g,float b,float a){ Vector4Set(UI_EXTRADATA(self, lineChartExtraData_s).axesColor, r, g, b, a); }
SWIGINTERN bool uiModelNode_t_is_autoscale(uiModelNode_t *self){ return UI_EXTRADATA(self, modelExtraData_t).autoscale; }
SWIGINTERN bool uiModelNode_t_is_mouserotate(uiModelNode_t *self){ return UI_EXTRADATA(self, modelExtraData_t).rotateWithMouse; }
SWIGINTERN vec3_struct_t *uiModelNode_t_angles(uiModelNode_t *self){ return (vec3_struct_t*)(UI_EXTRADATA(self, modelExtraData_t).angles); }
SWIGINTERN vec3_struct_t *uiModelNode_t_origin(uiModelNode_t *self){ return (vec3_struct_t*)(UI_EXTRADATA(self, modelExtraData_t).origin); }
SWIGINTERN vec3_struct_t *uiModelNode_t_omega(uiModelNode_t *self){ return (vec3_struct_t*)(UI_EXTRADATA(self, modelExtraData_t).omega); }
SWIGINTERN vec3_struct_t *uiModelNode_t_scale(uiModelNode_t *self){ return (vec3_struct_t*)(UI_EXTRADATA(self, modelExtraData_t).scale); }
SWIGINTERN char *uiModelNode_t_model(uiModelNode_t *self){ return const_cast<char*>(UI_EXTRADATA(self, modelExtraData_t).model); }
SWIGINTERN char *uiModelNode_t_skin(uiModelNode_t *self){ return const_cast<char*>(UI_EXTRADATA(self, modelExtraData_t).skin); }
SWIGINTERN char *uiModelNode_t_animation(uiModelNode_t *self){ return const_cast<char*>(UI_EXTRADATA(self, modelExtraData_t).animation); }
SWIGINTERN char *uiModelNode_t_tag(uiModelNode_t *self){ return const_cast<char*>(UI_EXTRADATA(self, modelExtraData_t).tag); }
SWIGINTERN void uiModelNode_t_set_autoscale(uiModelNode_t *self,bool value){ UI_EXTRADATA(self, modelExtraData_t).autoscale = value; }
SWIGINTERN void uiModelNode_t_set_mouserotate(uiModelNode_t *self,bool value){ UI_EXTRADATA(self, modelExtraData_t).rotateWithMouse = value; }
SWIGINTERN void uiModelNode_t_set_angles(uiModelNode_t *self,float a1,float a2,float a3){ VectorSet(UI_EXTRADATA(self, modelExtraData_t).angles, a1, a2, a3); }
SWIGINTERN void uiModelNode_t_set_origin(uiModelNode_t *self,float a1,float a2,float a3){ VectorSet(UI_EXTRADATA(self, modelExtraData_t).origin, a1, a2, a3); }
SWIGINTERN void uiModelNode_t_set_omega(uiModelNode_t *self,float a1,float a2,float a3){ VectorSet(UI_EXTRADATA(self, modelExtraData_t).omega, a1, a2, a3); }
SWIGINTERN void uiModelNode_t_set_scale(uiModelNode_t *self,float a1,float a2,float a3){ VectorSet(UI_EXTRADATA(self, modelExtraData_t).scale, a1, a2, a3); }
SWIGINTERN void uiModelNode_t_set_model(uiModelNode_t *self,char const *name){ UI_Model_SetModelSource(self, name); }
SWIGINTERN void uiModelNode_t_set_skin(uiModelNode_t *self,char const *name){ UI_Model_SetSkinSource(self, name); }
SWIGINTERN void uiModelNode_t_set_animation(uiModelNode_t *self,char const *name){ UI_Model_SetAnimationSource(self, name); }
SWIGINTERN void uiModelNode_t_set_tag(uiModelNode_t *self,char const *name){ UI_Model_SetTagSource(self, name); }
SWIGINTERN bool uiItemNode_t_is_containerlike(uiItemNode_t *self){ return UI_EXTRADATA(self, modelExtraData_t).containerLike; }
SWIGINTERN void uiItemNode_t_set_containerlike(uiItemNode_t *self,bool value){ UI_EXTRADATA(self, modelExtraData_t).containerLike = value; }
SWIGINTERN bool uiOptionNode_t_is_collapsed(uiOptionNode_t *self){ return UI_EXTRADATA(self, optionExtraData_t).collapsed; }
SWIGINTERN bool uiOptionNode_t_is_flipicion(uiOptionNode_t *self){ return UI_EXTRADATA(self, optionExtraData_t).flipIcon; }
SWIGINTERN bool uiOptionNode_t_is_truncated(uiOptionNode_t *self){ return UI_EXTRADATA(self, optionExtraData_t).truncated; }
SWIGINTERN char *uiOptionNode_t_label(uiOptionNode_t *self){ return UI_EXTRADATA(self, optionExtraData_t).label; }
SWIGINTERN char *uiOptionNode_t_value(uiOptionNode_t *self){ return UI_EXTRADATA(self, optionExtraData_t).value; }
SWIGINTERN int uiOptionNode_t_count(uiOptionNode_t *self){ return UI_EXTRADATA(self, optionExtraData_t).childCount; }
SWIGINTERN void uiOptionNode_t_set_label(uiOptionNode_t *self,char const *text){ UI_Option_SetLabel (self, text); }
SWIGINTERN void uiOptionNode_t_set_value(uiOptionNode_t *self,char const *text){ UI_Option_SetValue (self, text); }
SWIGINTERN void uiOptionNode_t_set_collapsed(uiOptionNode_t *self,bool value){ UI_EXTRADATA(self, optionExtraData_t).collapsed = value; }
SWIGINTERN void uiOptionNode_t_set_flipicion(uiOptionNode_t *self,bool value){ UI_EXTRADATA(self, optionExtraData_t).flipIcon = value; }
SWIGINTERN void uiOptionNode_t_set_truncated(uiOptionNode_t *self,bool value){ UI_EXTRADATA(self, optionExtraData_t).truncated = value; }
SWIGINTERN void uiOptionNode_t_set_icon(uiOptionNode_t *self,char const *name){ UI_Option_SetIconByName (self, name); }
SWIGINTERN void uiOptionTreeNode_t_set_selectedvalue(uiOptionTreeNode_t *self,char const *value){ UI_OptionTree_SelectValue(self, value); }
SWIGINTERN bool uiPanelNode_t_is_wheelscrollable(uiPanelNode_t *self){ return UI_EXTRADATA(self, panelExtraData_t).wheelScrollable; }
SWIGINTERN int uiPanelNode_t_layout(uiPanelNode_t *self){ return UI_EXTRADATA(self, panelExtraData_t).layout; }
SWIGINTERN int uiPanelNode_t_layoutmargin(uiPanelNode_t *self){ return UI_EXTRADATA(self, panelExtraData_t).layoutMargin; }
SWIGINTERN int uiPanelNode_t_layoutcolumns(uiPanelNode_t *self){ return UI_EXTRADATA(self, panelExtraData_t).layoutColumns; }
SWIGINTERN void uiPanelNode_t_set_layout(uiPanelNode_t *self,int value){ UI_EXTRADATA(self, panelExtraData_t).layout = (panelLayout_t)value; }
SWIGINTERN void uiPanelNode_t_set_layoutmargin(uiPanelNode_t *self,int value){ UI_EXTRADATA(self, panelExtraData_t).layoutMargin = value; }
SWIGINTERN void uiPanelNode_t_set_layoutcolumns(uiPanelNode_t *self,int value){ UI_EXTRADATA(self, panelExtraData_t).layoutColumns = value; }
SWIGINTERN void uiPanelNode_t_set_wheelscrollable(uiPanelNode_t *self,bool value){ UI_EXTRADATA(self, panelExtraData_t).wheelScrollable = value; }
SWIGINTERN void uiPanelNode_t_set_background(uiPanelNode_t *self,char const *name){ UI_Panel_SetBackgroundByName(self, name); }
SWIGINTERN bool uiRadioButtonNode_t_is_flipicon(uiRadioButtonNode_t *self){ return UI_EXTRADATA(self, radioButtonExtraData_t).flipIcon; }
SWIGINTERN char *uiRadioButtonNode_t_as_string(uiRadioButtonNode_t *self){ return UI_EXTRADATA(self, radioButtonExtraData_t).string; }
SWIGINTERN float uiRadioButtonNode_t_as_float(uiRadioButtonNode_t *self){ return UI_EXTRADATA(self, radioButtonExtraData_t).value; }
SWIGINTERN void uiRadioButtonNode_t_set_value__SWIG_0(uiRadioButtonNode_t *self,char const *value){ UI_RadioButton_SetValue(self, value); }
SWIGINTERN void uiRadioButtonNode_t_set_value__SWIG_1(uiRadioButtonNode_t *self,float value){ UI_RadioButton_SetValue(self, value); }
SWIGINTERN void uiRadioButtonNode_t_set_flipicon(uiRadioButtonNode_t *self,bool value){ UI_EXTRADATA(self, radioButtonExtraData_t).flipIcon = value; }
SWIGINTERN void uiRadioButtonNode_t_set_background(uiRadioButtonNode_t *self,char const *name){ UI_RadioButton_SetBackgroundByName(self, name); }
SWIGINTERN void uiRadioButtonNode_t_set_icon(uiRadioButtonNode_t *self,char const *name){ UI_RadioButton_SetIconByName(self, name); }
SWIGINTERN int uiRowsNode_t_current(uiRowsNode_t *self){ return UI_EXTRADATA(self, rowsExtraData_t).current; }
SWIGINTERN int uiRowsNode_t_lineheight(uiRowsNode_t *self){ return UI_EXTRADATA(self, rowsExtraData_t).lineHeight; }
SWIGINTERN void uiRowsNode_t_set_current(uiRowsNode_t *self,int value){ UI_EXTRADATA(self, rowsExtraData_t).current = value; }
SWIGINTERN void uiRowsNode_t_set_lineheight(uiRowsNode_t *self,int value){ UI_EXTRADATA(self, rowsExtraData_t).lineHeight = value; }
SWIGINTERN bool uiSequenceNode_t_is_playing(uiSequenceNode_t *self){ return UI_EXTRADATA(self, sequenceExtraData_t).playing; }
SWIGINTERN void uiSequenceNode_t_set_source(uiSequenceNode_t *self,char const *name){ UI_Sequence_SetSource(self, name); }

static LUA_EVENT uiSequenceNode_t_lua_onEnd_get(uiSequenceNode_t* node) {
	return UI_EXTRADATA(node, sequenceExtraData_t).lua_onEnd;
}
static void uiSequenceNode_t_lua_onEnd_set(uiSequenceNode_t* node, LUA_EVENT fn) {
	UI_EXTRADATA(node, sequenceExtraData_t).lua_onEnd = fn;
}

SWIGINTERN bool uiSpinnerNode_t_is_horizontal(uiSpinnerNode_t *self){ return UI_EXTRADATA(self, spinnerExtraData_t).horizontal; }
SWIGINTERN bool uiSpinnerNode_t_is_inverted(uiSpinnerNode_t *self){ return UI_EXTRADATA(self, spinnerExtraData_t).inverted; }
SWIGINTERN int uiSpinnerNode_t_mode(uiSpinnerNode_t *self){ return UI_EXTRADATA(self, spinnerExtraData_t).mode; }
SWIGINTERN void uiSpinnerNode_t_set_background(uiSpinnerNode_t *self,char const *name){ UI_Spinner_SetBackgroundByName(self, name); }
SWIGINTERN void uiSpinnerNode_t_set_topicon(uiSpinnerNode_t *self,char const *name){ UI_Spinner_SetTopIconByName(self, name); }
SWIGINTERN void uiSpinnerNode_t_set_bottomicon(uiSpinnerNode_t *self,char const *name){ UI_Spinner_SetBottomIconByName(self, name); }
SWIGINTERN void uiSpinnerNode_t_set_mode(uiSpinnerNode_t *self,int mode){ UI_EXTRADATA(self, spinnerExtraData_t).mode = mode; }
SWIGINTERN void uiSpinnerNode_t_set_horizontal(uiSpinnerNode_t *self,bool value){ UI_EXTRADATA(self, spinnerExtraData_t).horizontal = value; }
SWIGINTERN void uiSpinnerNode_t_set_inverted(uiSpinnerNode_t *self,bool value){ UI_EXTRADATA(self, spinnerExtraData_t).inverted = value; }
SWIGINTERN int uiStringNode_t_longlines(uiStringNode_t *self){ return UI_EXTRADATA(self, stringExtraData_t).longlines; }
SWIGINTERN void uiStringNode_t_set_longlines(uiStringNode_t *self,int value){ UI_EXTRADATA(self, stringExtraData_t).longlines = value; }
SWIGINTERN vec2_struct_t *uiTBarNode_t_texh(uiTBarNode_t *self){ return (vec2_struct_t*)UI_EXTRADATA(self, tbarExtraData_t).texh; }
SWIGINTERN vec2_struct_t *uiTBarNode_t_texl(uiTBarNode_t *self){ return (vec2_struct_t*)UI_EXTRADATA(self, tbarExtraData_t).texl; }
SWIGINTERN void uiTBarNode_t_set_source(uiTBarNode_t *self,char const *name){ UI_TBar_SetImage(self, name); }
SWIGINTERN void uiTBarNode_t_set_texh(uiTBarNode_t *self,float v1,float v2){ Vector2Set(UI_EXTRADATA(self, tbarExtraData_t).texh, v1, v2); }
SWIGINTERN void uiTBarNode_t_set_texl(uiTBarNode_t *self,float v1,float v2){ Vector2Set(UI_EXTRADATA(self, tbarExtraData_t).texl, v1, v2); }
SWIGINTERN int uiTextNode_t_dataid(uiTextNode_t *self){ return UI_EXTRADATA(self, textExtraData_t).dataID; }
SWIGINTERN int uiTextNode_t_lineheight(uiTextNode_t *self){ return UI_EXTRADATA(self, textExtraData_t).lineHeight; }
SWIGINTERN int uiTextNode_t_lineselected(uiTextNode_t *self){ return UI_EXTRADATA(self, textExtraData_t).textLineSelected; }
SWIGINTERN int uiTextNode_t_longlines(uiTextNode_t *self){ return UI_EXTRADATA(self, textExtraData_t).longlines; }
SWIGINTERN char *uiTextNode_t_textselected(uiTextNode_t *self){ return const_cast<char*>(UI_EXTRADATA(self, textExtraData_t).textSelected); }
SWIGINTERN int uiTextNode_t_tabwidth(uiTextNode_t *self){ return UI_EXTRADATA(self, textExtraData_t).tabWidth; }
SWIGINTERN void uiTextNode_t_set_dataid(uiTextNode_t *self,int id){ UI_EXTRADATA(self, textExtraData_t).dataID = id; }
SWIGINTERN void uiTextNode_t_set_longlines(uiTextNode_t *self,int value){ UI_EXTRADATA(self, textExtraData_t).longlines =  value; }
SWIGINTERN void uiTextNode_t_set_lineheight(uiTextNode_t *self,int value){ UI_EXTRADATA(self, textExtraData_t).lineHeight = value; }
SWIGINTERN void uiTextNode_t_set_lineselected(uiTextNode_t *self,int line){ UI_TextNodeSelectLine(self, line); }
SWIGINTERN void uiTextNode_t_set_tabwidth(uiTextNode_t *self,int value){ UI_EXTRADATA(self, textExtraData_t).tabWidth = value; }
SWIGINTERN bool uiTextEntryNode_t_is_password(uiTextEntryNode_t *self){ return UI_EXTRADATA(self, textEntryExtraData_t).isPassword; }
SWIGINTERN bool uiTextEntryNode_t_is_clickoutabort(uiTextEntryNode_t *self){return UI_EXTRADATA(self, textEntryExtraData_s).clickOutAbort; }
SWIGINTERN int uiTextEntryNode_t_cursorposition(uiTextEntryNode_t *self){ return UI_EXTRADATA(self, textEntryExtraData_s).cursorPosition; }
SWIGINTERN void uiTextEntryNode_t_set_password(uiTextEntryNode_t *self,bool value){ UI_EXTRADATA(self, textEntryExtraData_s).isPassword = value; }
SWIGINTERN void uiTextEntryNode_t_set_clickoutabort(uiTextEntryNode_t *self,bool value){ UI_EXTRADATA(self, textEntryExtraData_s).clickOutAbort = value; }
SWIGINTERN void uiTextEntryNode_t_set_background(uiTextEntryNode_t *self,char const *name){ UI_TextEntry_SetBackgroundByName(self, name); }

static LUA_EVENT uiTextEntryNode_t_lua_onTextEntryAbort_get(uiTextEntryNode_t* node) {
	return UI_EXTRADATA(node, textEntryExtraData_s).lua_onTextEntryAbort;
}
static void uiTextEntryNode_t_lua_onTextEntryAbort_set(uiTextEntryNode_t* node, LUA_EVENT fn) {
	UI_EXTRADATA(node, textEntryExtraData_s).lua_onTextEntryAbort = fn;
}

SWIGINTERN void uiTextureNode_t_set_source(uiTextureNode_t *self,char const *name){ UI_Node_SetImage(self, name); }
SWIGINTERN int uiTimerNode_t_timeout(uiTimerNode_t *self){ return UI_EXTRADATA(self, timerExtraData_t).timeOut; }
SWIGINTERN void uiTimerNode_t_set_timeout(uiTimerNode_t *self,int value){ UI_EXTRADATA(self, timerExtraData_t).timeOut = value; }

static LUA_EVENT uiTimerNode_t_lua_onEvent_get(uiTimerNode_t* node) {
	return UI_EXTRADATA(node, timerExtraData_t).lua_onEvent;
}
static void uiTimerNode_t_lua_onEvent_set(uiTimerNode_t* node, LUA_EVENT fn) {
	UI_EXTRADATA(node, timerExtraData_t).lua_onEvent = fn;
}

SWIGINTERN bool uiVideoNode_t_is_nosound(uiVideoNode_t *self){ return UI_EXTRADATA(self, videoExtraData_t).nosound; }
SWIGINTERN void uiVideoNode_t_set_nosound(uiVideoNode_t *self,bool value){ UI_EXTRADATA(self, videoExtraData_t).nosound = value; }
SWIGINTERN void uiVideoNode_t_set_source(uiVideoNode_t *self,char const *name){ UI_Video_SetSource(self, name); }

static LUA_EVENT uiVideoNode_t_lua_onEnd_get(uiVideoNode_t* node) {
	return UI_EXTRADATA(node, videoExtraData_t).lua_onEnd;
}
static void uiVideoNode_t_lua_onEnd_set(uiVideoNode_t* node, LUA_EVENT fn) {
	UI_EXTRADATA(node, videoExtraData_t).lua_onEnd = fn;
}

SWIGINTERN bool uiWindowNode_t_is_fullscreen(uiWindowNode_t *self){ return UI_EXTRADATA(self, windowExtraData_t).isFullScreen; }
SWIGINTERN bool uiWindowNode_t_is_modal(uiWindowNode_t *self){ return UI_EXTRADATA(self, windowExtraData_t).modal; }
SWIGINTERN bool uiWindowNode_t_is_starlayout(uiWindowNode_t *self){ return UI_EXTRADATA(self, windowExtraData_t).starLayout; }
SWIGINTERN void uiWindowNode_t_close(uiWindowNode_t *self){ UI_PopWindow (false); }
SWIGINTERN void uiWindowNode_t_open(uiWindowNode_t *self){ UI_PushWindow(self->name, nullptr, nullptr); }
SWIGINTERN void uiWindowNode_t_set_background(uiWindowNode_t *self,char const *name){ UI_Window_SetBackgroundByName(self, name); }
SWIGINTERN void uiWindowNode_t_set_fullscreen(uiWindowNode_t *self,bool value){ UI_EXTRADATA(self, windowExtraData_t).isFullScreen = value; }
SWIGINTERN void uiWindowNode_t_set_modal(uiWindowNode_t *self,bool value){ UI_EXTRADATA(self, windowExtraData_t).modal = value; }
SWIGINTERN void uiWindowNode_t_set_fill(uiWindowNode_t *self,bool value){ UI_EXTRADATA(self, windowExtraData_t).fill = value; }
SWIGINTERN void uiWindowNode_t_set_dragbutton(uiWindowNode_t *self,bool value){ UI_Window_SetDragButton(self, value); }
SWIGINTERN void uiWindowNode_t_set_closebutton(uiWindowNode_t *self,bool value){ UI_Window_SetCloseButton(self, value); }
SWIGINTERN void uiWindowNode_t_set_starlayout(uiWindowNode_t *self,bool value){ UI_EXTRADATA(self, windowExtraData_t).starLayout = value; }
SWIGINTERN void uiWindowNode_t_set_preventtypingescape(uiWindowNode_t *self,bool value){ UI_EXTRADATA(self, windowExtraData_t).preventTypingEscape = value; }
SWIGINTERN void uiWindowNode_t_set_noticepos(uiWindowNode_t *self,float x,float y){ Vector2Set(UI_EXTRADATA(self, windowExtraData_t).noticePos, x, y); }

static LUA_EVENT uiWindowNode_t_lua_onWindowOpened_get(uiWindowNode_t* node) {
	return UI_EXTRADATA(node, windowExtraData_t).lua_onWindowOpened;
}
static void uiWindowNode_t_lua_onWindowOpened_set (uiWindowNode_t* node, LUA_EVENT fn) {
	UI_EXTRADATA(node, windowExtraData_t).lua_onWindowOpened = fn;
}
static LUA_EVENT uiWindowNode_t_lua_onWindowClosed_get(uiWindowNode_t* node) {
	return UI_EXTRADATA(node, windowExtraData_t).lua_onWindowClosed;
}
static void uiWindowNode_t_lua_onWindowClosed_set (uiWindowNode_t* node, LUA_EVENT fn) {
	UI_EXTRADATA(node, windowExtraData_t).lua_onWindowClosed = fn;
}

SWIGINTERN bool uiZoneNode_t_is_repeat(uiZoneNode_t *self){ return UI_EXTRADATA(self, zoneExtraData_t).repeat; }
SWIGINTERN int uiZoneNode_t_clickdelay(uiZoneNode_t *self){ return UI_EXTRADATA(self, zoneExtraData_t).clickDelay; }
SWIGINTERN void uiZoneNode_t_set_repeat(uiZoneNode_t *self,bool value){ UI_EXTRADATA(self, zoneExtraData_t).repeat = value; }
SWIGINTERN void uiZoneNode_t_set_clickdelay(uiZoneNode_t *self,int value){ UI_EXTRADATA(self, zoneExtraData_t).clickDelay = value; }

static uiBarNode_t* UI_CreateBar (uiNode_t* parent, const char* name, const char* super) {
	return UI_CreateControl (parent, "bar", name, super);
}
static uiBaseMapNode_t* UI_CreateBaseMap (uiNode_t* parent, const char* name, const char* super) {
	return UI_CreateControl (parent, "basemap", name, super);
}
static uiBaseLayoutNode_t* UI_CreateBaseLayout (uiNode_t* parent, const char* name, const char* super) {
	return UI_CreateControl (parent, "baselayout", name, super);
}
static uiBaseInventoryNode_t* UI_CreateBaseInventory (uiNode_t* parent, const char* name, const char* super) {
	return UI_CreateControl (parent, "baseinventory", name, super);
}
static uiButtonNode_t* UI_CreateButton (uiNode_t* parent, const char* name, const char* super) {
	return UI_CreateControl (parent, "button", name, super);
}
static uiCheckBoxNode_t* UI_CreateCheckBox (uiNode_t* parent, const char* name, const char* super) {
	return UI_CreateControl (parent, "checkbox", name, super);
}
static uiConFuncNode_t* UI_CreateConFunc (uiNode_t* parent, const char* name, const char* super) {
	return UI_CreateControl (parent, "confunc", name, super);
}
static uiContainerNode_t* UI_CreateContainer (uiNode_t* parent, const char* name, const char* super) {
	return UI_CreateControl (parent, "container", name, super);
}
static uiDataNode_t* UI_CreateData (uiNode_t* parent, const char* name, const char* super) {
	return UI_CreateControl (parent, "data", name, super);
}
static uiEkgNode_t* UI_CreateEkg (uiNode_t* parent, const char* name, const char* super) {
	return UI_CreateControl (parent, "ekg", name, super);
}
static uiGeoscapeNode_t* UI_CreateGeoscape (uiNode_t* parent, const char* name, const char* super) {
	return UI_CreateControl (parent, "geoscape", name, super);
}
static uiImageNode_t* UI_CreateImage (uiNode_t* parent, const char* name, const char* super) {
	return UI_CreateControl (parent, "image", name, super);
}
static uiItemNode_t* UI_CreateItem (uiNode_t* parent, const char* name, const char* super) {
	return UI_CreateControl (parent, "item", name, super);
}
static uiLineChartNode_t* UI_CreateLineChart(uiNode_t* parent, const char* name, const char* super) {
	return UI_CreateControl (parent, "linechart", name, super);
}
static uiMessageListNode_t* UI_CreateMessageList (uiNode_t* parent, const char* name, const char* super) {
	return UI_CreateControl (parent, "messagelist", name, super);
}
static uiModelNode_t* UI_CreateModel (uiNode_t* parent, const char* name, const char* super) {
	return UI_CreateControl (parent, "model", name, super);
}
static uiOptionNode_t* UI_CreateOption (uiNode_t* parent, const char* name, const char* super) {
	return UI_CreateControl (parent, "option", name, super);
}
static uiOptionListNode_t* UI_CreateOptionList (uiNode_t* parent, const char* name, const char* super) {
	return UI_CreateControl (parent, "optionlist", name, super);
}
static uiOptionTreeNode_t* UI_CreateOptionTree (uiNode_t* parent, const char* name, const char* super) {
	return UI_CreateControl (parent, "optiontree", name, super);
}
static uiPanelNode_t* UI_CreatePanel (uiNode_t* parent, const char* name, const char* super) {
	return UI_CreateControl (parent, "panel", name, super);
}
static uiRadarNode_t* UI_CreateRadar (uiNode_t* parent, const char* name, const char* super) {
	return UI_CreateControl (parent, "radar", name, super);
}
static uiRadioButtonNode_t* UI_CreateRadioButton (uiNode_t* parent, const char* name, const char* super) {
	return UI_CreateControl (parent, "radiobutton", name, super);
}
static uiRowsNode_t* UI_CreateRows (uiNode_t* parent, const char* name, const char* super) {
	return UI_CreateControl (parent, "rows", name, super);
}
static uiSelectBoxNode_t* UI_CreateSelectBox (uiNode_t* parent, const char* name, const char* super) {
	return UI_CreateControl (parent, "selectbox", name, super);
}
static uiSequenceNode_t* UI_CreateSequence (uiNode_t* parent, const char* name, const char* super) {
	return UI_CreateControl (parent, "sequence", name, super);
}
static uiSpinnerNode_t* UI_CreateSpinner (uiNode_t* parent, const char* name, const char* super) {
	return UI_CreateControl (parent, "spinner", name, super);
}
static uiStringNode_t* UI_CreateString (uiNode_t* parent, const char* name, const char* super) {
	return UI_CreateControl (parent, "string", name, super);
}
static uiTabNode_t* UI_CreateTab (uiNode_t* parent, const char* name, const char* super) {
	return UI_CreateControl (parent, "tab", name, super);
}
static uiTBarNode_t* UI_CreateTBar (uiNode_t* parent, const char* name, const char* super) {
	return UI_CreateControl (parent, "tbar", name, super);
}
static uiTextNode_t* UI_CreateText (uiNode_t* parent, const char* name, const char* super) {
	return UI_CreateControl (parent, "text", name, super);
}
static uiText2Node_t* UI_CreateText2 (uiNode_t* parent, const char* name, const char* super) {
	return UI_CreateControl (parent, "text2", name, super);
}
static uiTextEntryNode_t* UI_CreateTextEntry (uiNode_t* parent, const char* name, const char* super) {
	return UI_CreateControl (parent, "textentry", name, super);
}
static uiTextListNode_t* UI_CreateTextList (uiNode_t* parent, const char* name, const char* super) {
	return UI_CreateControl (parent, "textlist", name, super);
}
static uiTextureNode_t* UI_CreateTexture (uiNode_t* parent, const char* name, const char* super) {
	return UI_CreateControl (parent, "texture", name, super);
}
static uiTimerNode_t* UI_CreateTimer (uiNode_t* parent, const char* name, const char* super) {
	return UI_CreateControl (parent, "timer", name, super);
}
static uiVideoNode_t* UI_CreateVideo (uiNode_t* parent, const char* name, const char* super) {
	return UI_CreateControl (parent, "video", name, super);
}
static uiVScrollBarNode_t* UI_CreateVScrollbar (uiNode_t* parent, const char* name, const char* super) {
	return UI_CreateControl (parent, "vscrollbar", name, super);
}
static uiWidgetNode_t* UI_CreateWidget (uiNode_t* parent, const char* name, const char* super) {
	return UI_CreateControl (parent, "controls", name, super);
}
static uiWindowNode_t* UI_CreateWindow (const char* name, const char* super) {
	return UI_CreateWindow("window", name, super);
}
static uiZoneNode_t* UI_CreateZone (uiNode_t* parent, const char* name, const char* super) {
	return UI_CreateControl (parent, "zone", name, super);
}

#ifdef __cplusplus
extern "C" {
#endif
static int _wrap_cvar_name(lua_State* L) {
  int SWIG_arg = 0;
  cvar_t *arg1 = (cvar_t *) 0 ;
  char *result = 0 ;
  
  SWIG_check_num_args("cvar_t::name",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("cvar_t::name",1,"cvar_t *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_cvar_t,0))){
    SWIG_fail_ptr("cvar_name",1,SWIGTYPE_p_cvar_t);
  }
  
  result = (char *)cvar_t_name(arg1);
  lua_pushstring(L,(const char *)result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cvar_as_string(lua_State* L) {
  int SWIG_arg = 0;
  cvar_t *arg1 = (cvar_t *) 0 ;
  char *result = 0 ;
  
  SWIG_check_num_args("cvar_t::as_string",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("cvar_t::as_string",1,"cvar_t *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_cvar_t,0))){
    SWIG_fail_ptr("cvar_as_string",1,SWIGTYPE_p_cvar_t);
  }
  
  result = (char *)cvar_t_as_string(arg1);
  lua_pushstring(L,(const char *)result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cvar_as_float(lua_State* L) {
  int SWIG_arg = 0;
  cvar_t *arg1 = (cvar_t *) 0 ;
  float result;
  
  SWIG_check_num_args("cvar_t::as_float",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("cvar_t::as_float",1,"cvar_t *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_cvar_t,0))){
    SWIG_fail_ptr("cvar_as_float",1,SWIGTYPE_p_cvar_t);
  }
  
  result = (float)cvar_t_as_float(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cvar_as_integer(lua_State* L) {
  int SWIG_arg = 0;
  cvar_t *arg1 = (cvar_t *) 0 ;
  int result;
  
  SWIG_check_num_args("cvar_t::as_integer",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("cvar_t::as_integer",1,"cvar_t *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_cvar_t,0))){
    SWIG_fail_ptr("cvar_as_integer",1,SWIGTYPE_p_cvar_t);
  }
  
  result = (int)cvar_t_as_integer(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cvar_set_value__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  cvar_t *arg1 = (cvar_t *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("cvar_t::set_value",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("cvar_t::set_value",1,"cvar_t *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("cvar_t::set_value",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_cvar_t,0))){
    SWIG_fail_ptr("cvar_set_value",1,SWIGTYPE_p_cvar_t);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  cvar_t_set_value__SWIG_0(arg1,arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cvar_set_value__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  cvar_t *arg1 = (cvar_t *) 0 ;
  char *arg2 = (char *) 0 ;
  
  SWIG_check_num_args("cvar_t::set_value",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("cvar_t::set_value",1,"cvar_t *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("cvar_t::set_value",2,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_cvar_t,0))){
    SWIG_fail_ptr("cvar_set_value",1,SWIGTYPE_p_cvar_t);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  cvar_t_set_value__SWIG_1(arg1,(char const *)arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cvar_set_value(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_cvar_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_cvar_set_value__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_cvar_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = SWIG_lua_isnilstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_cvar_set_value__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'cvar_set_value'\n"
    "  Possible C/C++ prototypes are:\n"
    "    cvar_t::set_value(float)\n"
    "    cvar_t::set_value(char const *)\n");
  lua_error(L);return 0;
}


static int _wrap_new_cvar(lua_State* L) {
  int SWIG_arg = 0;
  cvar_t *result = 0 ;
  
  SWIG_check_num_args("cvar_t::cvar_t",0,0)
  result = (cvar_t *)new cvar_t();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_cvar_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_cvar(void *obj) {
cvar_t *arg1 = (cvar_t *) obj;
delete arg1;
}
static int _proxy__wrap_new_cvar(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_cvar);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_cvar_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_cvar_methods[]= {
    { "name", _wrap_cvar_name},
    { "as_string", _wrap_cvar_as_string},
    { "as_float", _wrap_cvar_as_float},
    { "as_integer", _wrap_cvar_as_integer},
    { "set_value", _wrap_cvar_set_value},
    {0,0}
};
static swig_lua_method swig_cvar_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_cvar_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_cvar_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_cvar_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_cvar_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_cvar_Sf_SwigStatic = {
    "cvar",
    swig_cvar_Sf_SwigStatic_methods,
    swig_cvar_Sf_SwigStatic_attributes,
    swig_cvar_Sf_SwigStatic_constants,
    swig_cvar_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_cvar_bases[] = {0};
static const char *swig_cvar_base_names[] = {0};
static swig_lua_class _wrap_class_cvar = { "cvar", "cvar", &SWIGTYPE_p_cvar_t,_proxy__wrap_new_cvar, swig_delete_cvar, swig_cvar_methods, swig_cvar_attributes, &swig_cvar_Sf_SwigStatic, swig_cvar_meta, swig_cvar_bases, swig_cvar_base_names };

static int _wrap_findvar(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  cvar_t *result = 0 ;
  
  SWIG_check_num_args("Cvar_FindVar",1,1)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("Cvar_FindVar",1,"char const *");
  arg1 = (char *)lua_tostring(L, 1);
  result = (cvar_t *)Cvar_FindVar((char const *)arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_cvar_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_getvar__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  int arg3 ;
  char *arg4 = (char *) 0 ;
  cvar_t *result = 0 ;
  
  SWIG_check_num_args("Cvar_Get",4,4)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("Cvar_Get",1,"char const *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("Cvar_Get",2,"char const *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Cvar_Get",3,"int");
  if(!SWIG_lua_isnilstring(L,4)) SWIG_fail_arg("Cvar_Get",4,"char const *");
  arg1 = (char *)lua_tostring(L, 1);
  arg2 = (char *)lua_tostring(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  arg4 = (char *)lua_tostring(L, 4);
  result = (cvar_t *)Cvar_Get((char const *)arg1,(char const *)arg2,arg3,(char const *)arg4);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_cvar_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_getvar__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  int arg3 ;
  cvar_t *result = 0 ;
  
  SWIG_check_num_args("Cvar_Get",3,3)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("Cvar_Get",1,"char const *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("Cvar_Get",2,"char const *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Cvar_Get",3,"int");
  arg1 = (char *)lua_tostring(L, 1);
  arg2 = (char *)lua_tostring(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  result = (cvar_t *)Cvar_Get((char const *)arg1,(char const *)arg2,arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_cvar_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_getvar__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  cvar_t *result = 0 ;
  
  SWIG_check_num_args("Cvar_Get",2,2)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("Cvar_Get",1,"char const *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("Cvar_Get",2,"char const *");
  arg1 = (char *)lua_tostring(L, 1);
  arg2 = (char *)lua_tostring(L, 2);
  result = (cvar_t *)Cvar_Get((char const *)arg1,(char const *)arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_cvar_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_getvar__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  cvar_t *result = 0 ;
  
  SWIG_check_num_args("Cvar_Get",1,1)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("Cvar_Get",1,"char const *");
  arg1 = (char *)lua_tostring(L, 1);
  result = (cvar_t *)Cvar_Get((char const *)arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_cvar_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_getvar(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      _v = SWIG_lua_isnilstring(L,argv[0]);
    }
    if (_v) {
      return _wrap_getvar__SWIG_3(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      _v = SWIG_lua_isnilstring(L,argv[0]);
    }
    if (_v) {
      {
        _v = SWIG_lua_isnilstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_getvar__SWIG_2(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      _v = SWIG_lua_isnilstring(L,argv[0]);
    }
    if (_v) {
      {
        _v = SWIG_lua_isnilstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_getvar__SWIG_1(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      _v = SWIG_lua_isnilstring(L,argv[0]);
    }
    if (_v) {
      {
        _v = SWIG_lua_isnilstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = SWIG_lua_isnilstring(L,argv[3]);
          }
          if (_v) {
            return _wrap_getvar__SWIG_0(L);
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'getvar'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Cvar_Get(char const *,char const *,int,char const *)\n"
    "    Cvar_Get(char const *,char const *,int)\n"
    "    Cvar_Get(char const *,char const *)\n"
    "    Cvar_Get(char const *)\n");
  lua_error(L);return 0;
}


static int _wrap_delvar(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  bool result;
  
  SWIG_check_num_args("Cvar_Delete",1,1)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("Cvar_Delete",1,"char const *");
  arg1 = (char *)lua_tostring(L, 1);
  result = (bool)Cvar_Delete((char const *)arg1);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_invDef_name(lua_State* L) {
  int SWIG_arg = 0;
  invDef_t *arg1 = (invDef_t *) 0 ;
  char *result = 0 ;
  
  SWIG_check_num_args("invDef_t::name",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("invDef_t::name",1,"invDef_t *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_invDef_t,0))){
    SWIG_fail_ptr("invDef_name",1,SWIGTYPE_p_invDef_t);
  }
  
  result = (char *)invDef_t_name(arg1);
  lua_pushstring(L,(const char *)result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_invDef(lua_State* L) {
  int SWIG_arg = 0;
  invDef_t *result = 0 ;
  
  SWIG_check_num_args("invDef_t::invDef_t",0,0)
  result = (invDef_t *)new invDef_t();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_invDef_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_invDef(void *obj) {
invDef_t *arg1 = (invDef_t *) obj;
delete arg1;
}
static int _proxy__wrap_new_invDef(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_invDef);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_invDef_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_invDef_methods[]= {
    { "name", _wrap_invDef_name},
    {0,0}
};
static swig_lua_method swig_invDef_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_invDef_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_invDef_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_invDef_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_invDef_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_invDef_Sf_SwigStatic = {
    "invDef",
    swig_invDef_Sf_SwigStatic_methods,
    swig_invDef_Sf_SwigStatic_attributes,
    swig_invDef_Sf_SwigStatic_constants,
    swig_invDef_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_invDef_bases[] = {0};
static const char *swig_invDef_base_names[] = {0};
static swig_lua_class _wrap_class_invDef = { "invDef", "invDef", &SWIGTYPE_p_invDef_t,_proxy__wrap_new_invDef, swig_delete_invDef, swig_invDef_methods, swig_invDef_attributes, &swig_invDef_Sf_SwigStatic, swig_invDef_meta, swig_invDef_bases, swig_invDef_base_names };

static int _wrap_uiNode_on_click_set(lua_State* L) {
  int SWIG_arg = 0;
  uiNode_t *arg1 = (uiNode_t *) 0 ;
  LUA_EVENT arg2 ;
  
  SWIG_check_num_args("uiNode_t::lua_onClick",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("uiNode_t::lua_onClick",1,"uiNode_t *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_uiNode_t,0))){
    SWIG_fail_ptr("uiNode_on_click_set",1,SWIGTYPE_p_uiNode_t);
  }
  
  {
    arg2 = (LUA_EVENT)luaL_ref (L, LUA_REGISTRYINDEX);
  }
  if (arg1) (arg1)->lua_onClick = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_uiNode_on_click_get(lua_State* L) {
  int SWIG_arg = 0;
  uiNode_t *arg1 = (uiNode_t *) 0 ;
  LUA_EVENT result;
  
  SWIG_check_num_args("uiNode_t::lua_onClick",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("uiNode_t::lua_onClick",1,"uiNode_t *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_uiNode_t,0))){
    SWIG_fail_ptr("uiNode_on_click_get",1,SWIGTYPE_p_uiNode_t);
  }
  
  result =  ((arg1)->lua_onClick);
  {
    LUA_EVENT * resultptr = new LUA_EVENT((const LUA_EVENT &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_LUA_EVENT,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_uiNode_on_rightclick_set(lua_State* L) {
  int SWIG_arg = 0;
  uiNode_t *arg1 = (uiNode_t *) 0 ;
  LUA_EVENT arg2 ;
  
  SWIG_check_num_args("uiNode_t::lua_onRightClick",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("uiNode_t::lua_onRightClick",1,"uiNode_t *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_uiNode_t,0))){
    SWIG_fail_ptr("uiNode_on_rightclick_set",1,SWIGTYPE_p_uiNode_t);
  }
  
  {
    arg2 = (LUA_EVENT)luaL_ref (L, LUA_REGISTRYINDEX);
  }
  if (arg1) (arg1)->lua_onRightClick = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_uiNode_on_rightclick_get(lua_State* L) {
  int SWIG_arg = 0;
  uiNode_t *arg1 = (uiNode_t *) 0 ;
  LUA_EVENT result;
  
  SWIG_check_num_args("uiNode_t::lua_onRightClick",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("uiNode_t::lua_onRightClick",1,"uiNode_t *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_uiNode_t,0))){
    SWIG_fail_ptr("uiNode_on_rightclick_get",1,SWIGTYPE_p_uiNode_t);
  }
  
  result =  ((arg1)->lua_onRightClick);
  {
    LUA_EVENT * resultptr = new LUA_EVENT((const LUA_EVENT &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_LUA_EVENT,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_uiNode_on_middleclick_set(lua_State* L) {
  int SWIG_arg = 0;
  uiNode_t *arg1 = (uiNode_t *) 0 ;
  LUA_EVENT arg2 ;
  
  SWIG_check_num_args("uiNode_t::lua_onMiddleClick",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("uiNode_t::lua_onMiddleClick",1,"uiNode_t *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_uiNode_t,0))){
    SWIG_fail_ptr("uiNode_on_middleclick_set",1,SWIGTYPE_p_uiNode_t);
  }
  
  {
    arg2 = (LUA_EVENT)luaL_ref (L, LUA_REGISTRYINDEX);
  }
  if (arg1) (arg1)->lua_onMiddleClick = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_uiNode_on_middleclick_get(lua_State* L) {
  int SWIG_arg = 0;
  uiNode_t *arg1 = (uiNode_t *) 0 ;
  LUA_EVENT result;
  
  SWIG_check_num_args("uiNode_t::lua_onMiddleClick",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("uiNode_t::lua_onMiddleClick",1,"uiNode_t *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_uiNode_t,0))){
    SWIG_fail_ptr("uiNode_on_middleclick_get",1,SWIGTYPE_p_uiNode_t);
  }
  
  result =  ((arg1)->lua_onMiddleClick);
  {
    LUA_EVENT * resultptr = new LUA_EVENT((const LUA_EVENT &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_LUA_EVENT,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_uiNode_on_wheelup_set(lua_State* L) {
  int SWIG_arg = 0;
  uiNode_t *arg1 = (uiNode_t *) 0 ;
  LUA_EVENT arg2 ;
  
  SWIG_check_num_args("uiNode_t::lua_onWheelUp",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("uiNode_t::lua_onWheelUp",1,"uiNode_t *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_uiNode_t,0))){
    SWIG_fail_ptr("uiNode_on_wheelup_set",1,SWIGTYPE_p_uiNode_t);
  }
  
  {
    arg2 = (LUA_EVENT)luaL_ref (L, LUA_REGISTRYINDEX);
  }
  if (arg1) (arg1)->lua_onWheelUp = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_uiNode_on_wheelup_get(lua_State* L) {
  int SWIG_arg = 0;
  uiNode_t *arg1 = (uiNode_t *) 0 ;
  LUA_EVENT result;
  
  SWIG_check_num_args("uiNode_t::lua_onWheelUp",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("uiNode_t::lua_onWheelUp",1,"uiNode_t *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_uiNode_t,0))){
    SWIG_fail_ptr("uiNode_on_wheelup_get",1,SWIGTYPE_p_uiNode_t);
  }
  
  result =  ((arg1)->lua_onWheelUp);
  {
    LUA_EVENT * resultptr = new LUA_EVENT((const LUA_EVENT &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_LUA_EVENT,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_uiNode_on_wheeldown_set(lua_State* L) {
  int SWIG_arg = 0;
  uiNode_t *arg1 = (uiNode_t *) 0 ;
  LUA_EVENT arg2 ;
  
  SWIG_check_num_args("uiNode_t::lua_onWheelDown",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("uiNode_t::lua_onWheelDown",1,"uiNode_t *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_uiNode_t,0))){
    SWIG_fail_ptr("uiNode_on_wheeldown_set",1,SWIGTYPE_p_uiNode_t);
  }
  
  {
    arg2 = (LUA_EVENT)luaL_ref (L, LUA_REGISTRYINDEX);
  }
  if (arg1) (arg1)->lua_onWheelDown = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_uiNode_on_wheeldown_get(lua_State* L) {
  int SWIG_arg = 0;
  uiNode_t *arg1 = (uiNode_t *) 0 ;
  LUA_EVENT result;
  
  SWIG_check_num_args("uiNode_t::lua_onWheelDown",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("uiNode_t::lua_onWheelDown",1,"uiNode_t *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_uiNode_t,0))){
    SWIG_fail_ptr("uiNode_on_wheeldown_get",1,SWIGTYPE_p_uiNode_t);
  }
  
  result =  ((arg1)->lua_onWheelDown);
  {
    LUA_EVENT * resultptr = new LUA_EVENT((const LUA_EVENT &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_LUA_EVENT,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_uiNode_on_wheel_set(lua_State* L) {
  int SWIG_arg = 0;
  uiNode_t *arg1 = (uiNode_t *) 0 ;
  LUA_EVENT arg2 ;
  
  SWIG_check_num_args("uiNode_t::lua_onWheel",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("uiNode_t::lua_onWheel",1,"uiNode_t *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_uiNode_t,0))){
    SWIG_fail_ptr("uiNode_on_wheel_set",1,SWIGTYPE_p_uiNode_t);
  }
  
  {
    arg2 = (LUA_EVENT)luaL_ref (L, LUA_REGISTRYINDEX);
  }
  if (arg1) (arg1)->lua_onWheel = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_uiNode_on_wheel_get(lua_State* L) {
  int SWIG_arg = 0;
  uiNode_t *arg1 = (uiNode_t *) 0 ;
  LUA_EVENT result;
  
  SWIG_check_num_args("uiNode_t::lua_onWheel",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("uiNode_t::lua_onWheel",1,"uiNode_t *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_uiNode_t,0))){
    SWIG_fail_ptr("uiNode_on_wheel_get",1,SWIGTYPE_p_uiNode_t);
  }
  
  result =  ((arg1)->lua_onWheel);
  {
    LUA_EVENT * resultptr = new LUA_EVENT((const LUA_EVENT &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_LUA_EVENT,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_uiNode_on_focusgained_set(lua_State* L) {
  int SWIG_arg = 0;
  uiNode_t *arg1 = (uiNode_t *) 0 ;
  LUA_EVENT arg2 ;
  
  SWIG_check_num_args("uiNode_t::lua_onFocusGained",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("uiNode_t::lua_onFocusGained",1,"uiNode_t *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_uiNode_t,0))){
    SWIG_fail_ptr("uiNode_on_focusgained_set",1,SWIGTYPE_p_uiNode_t);
  }
  
  {
    arg2 = (LUA_EVENT)luaL_ref (L, LUA_REGISTRYINDEX);
  }
  if (arg1) (arg1)->lua_onFocusGained = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_uiNode_on_focusgained_get(lua_State* L) {
  int SWIG_arg = 0;
  uiNode_t *arg1 = (uiNode_t *) 0 ;
  LUA_EVENT result;
  
  SWIG_check_num_args("uiNode_t::lua_onFocusGained",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("uiNode_t::lua_onFocusGained",1,"uiNode_t *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_uiNode_t,0))){
    SWIG_fail_ptr("uiNode_on_focusgained_get",1,SWIGTYPE_p_uiNode_t);
  }
  
  result =  ((arg1)->lua_onFocusGained);
  {
    LUA_EVENT * resultptr = new LUA_EVENT((const LUA_EVENT &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_LUA_EVENT,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_uiNode_on_focuslost_set(lua_State* L) {
  int SWIG_arg = 0;
  uiNode_t *arg1 = (uiNode_t *) 0 ;
  LUA_EVENT arg2 ;
  
  SWIG_check_num_args("uiNode_t::lua_onFocusLost",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("uiNode_t::lua_onFocusLost",1,"uiNode_t *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_uiNode_t,0))){
    SWIG_fail_ptr("uiNode_on_focuslost_set",1,SWIGTYPE_p_uiNode_t);
  }
  
  {
    arg2 = (LUA_EVENT)luaL_ref (L, LUA_REGISTRYINDEX);
  }
  if (arg1) (arg1)->lua_onFocusLost = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_uiNode_on_focuslost_get(lua_State* L) {
  int SWIG_arg = 0;
  uiNode_t *arg1 = (uiNode_t *) 0 ;
  LUA_EVENT result;
  
  SWIG_check_num_args("uiNode_t::lua_onFocusLost",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("uiNode_t::lua_onFocusLost",1,"uiNode_t *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_uiNode_t,0))){
    SWIG_fail_ptr("uiNode_on_focuslost_get",1,SWIGTYPE_p_uiNode_t);
  }
  
  result =  ((arg1)->lua_onFocusLost);
  {
    LUA_EVENT * resultptr = new LUA_EVENT((const LUA_EVENT &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_LUA_EVENT,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_uiNode_on_keypressed_set(lua_State* L) {
  int SWIG_arg = 0;
  uiNode_t *arg1 = (uiNode_t *) 0 ;
  LUA_EVENT arg2 ;
  
  SWIG_check_num_args("uiNode_t::lua_onKeyPressed",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("uiNode_t::lua_onKeyPressed",1,"uiNode_t *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_uiNode_t,0))){
    SWIG_fail_ptr("uiNode_on_keypressed_set",1,SWIGTYPE_p_uiNode_t);
  }
  
  {
    arg2 = (LUA_EVENT)luaL_ref (L, LUA_REGISTRYINDEX);
  }
  if (arg1) (arg1)->lua_onKeyPressed = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_uiNode_on_keypressed_get(lua_State* L) {
  int SWIG_arg = 0;
  uiNode_t *arg1 = (uiNode_t *) 0 ;
  LUA_EVENT result;
  
  SWIG_check_num_args("uiNode_t::lua_onKeyPressed",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("uiNode_t::lua_onKeyPressed",1,"uiNode_t *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_uiNode_t,0))){
    SWIG_fail_ptr("uiNode_on_keypressed_get",1,SWIGTYPE_p_uiNode_t);
  }
  
  result =  ((arg1)->lua_onKeyPressed);
  {
    LUA_EVENT * resultptr = new LUA_EVENT((const LUA_EVENT &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_LUA_EVENT,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_uiNode_on_keyreleased_set(lua_State* L) {
  int SWIG_arg = 0;
  uiNode_t *arg1 = (uiNode_t *) 0 ;
  LUA_EVENT arg2 ;
  
  SWIG_check_num_args("uiNode_t::lua_onKeyReleased",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("uiNode_t::lua_onKeyReleased",1,"uiNode_t *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_uiNode_t,0))){
    SWIG_fail_ptr("uiNode_on_keyreleased_set",1,SWIGTYPE_p_uiNode_t);
  }
  
  {
    arg2 = (LUA_EVENT)luaL_ref (L, LUA_REGISTRYINDEX);
  }
  if (arg1) (arg1)->lua_onKeyReleased = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_uiNode_on_keyreleased_get(lua_State* L) {
  int SWIG_arg = 0;
  uiNode_t *arg1 = (uiNode_t *) 0 ;
  LUA_EVENT result;
  
  SWIG_check_num_args("uiNode_t::lua_onKeyReleased",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("uiNode_t::lua_onKeyReleased",1,"uiNode_t *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_uiNode_t,0))){
    SWIG_fail_ptr("uiNode_on_keyreleased_get",1,SWIGTYPE_p_uiNode_t);
  }
  
  result =  ((arg1)->lua_onKeyReleased);
  {
    LUA_EVENT * resultptr = new LUA_EVENT((const LUA_EVENT &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_LUA_EVENT,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_uiNode_on_loaded_set(lua_State* L) {
  int SWIG_arg = 0;
  uiNode_t *arg1 = (uiNode_t *) 0 ;
  LUA_EVENT arg2 ;
  
  SWIG_check_num_args("uiNode_t::lua_onLoaded",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("uiNode_t::lua_onLoaded",1,"uiNode_t *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_uiNode_t,0))){
    SWIG_fail_ptr("uiNode_on_loaded_set",1,SWIGTYPE_p_uiNode_t);
  }
  
  {
    arg2 = (LUA_EVENT)luaL_ref (L, LUA_REGISTRYINDEX);
  }
  if (arg1) (arg1)->lua_onLoaded = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_uiNode_on_loaded_get(lua_State* L) {
  int SWIG_arg = 0;
  uiNode_t *arg1 = (uiNode_t *) 0 ;
  LUA_EVENT result;
  
  SWIG_check_num_args("uiNode_t::lua_onLoaded",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("uiNode_t::lua_onLoaded",1,"uiNode_t *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_uiNode_t,0))){
    SWIG_fail_ptr("uiNode_on_loaded_get",1,SWIGTYPE_p_uiNode_t);
  }
  
  result =  ((arg1)->lua_onLoaded);
  {
    LUA_EVENT * resultptr = new LUA_EVENT((const LUA_EVENT &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_LUA_EVENT,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_uiNode_on_activate_set(lua_State* L) {
  int SWIG_arg = 0;
  uiNode_t *arg1 = (uiNode_t *) 0 ;
  LUA_EVENT arg2 ;
  
  SWIG_check_num_args("uiNode_t::lua_onActivate",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("uiNode_t::lua_onActivate",1,"uiNode_t *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_uiNode_t,0))){
    SWIG_fail_ptr("uiNode_on_activate_set",1,SWIGTYPE_p_uiNode_t);
  }
  
  {
    arg2 = (LUA_EVENT)luaL_ref (L, LUA_REGISTRYINDEX);
  }
  if (arg1) (arg1)->lua_onActivate = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_uiNode_on_activate_get(lua_State* L) {
  int SWIG_arg = 0;
  uiNode_t *arg1 = (uiNode_t *) 0 ;
  LUA_EVENT result;
  
  SWIG_check_num_args("uiNode_t::lua_onActivate",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("uiNode_t::lua_onActivate",1,"uiNode_t *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_uiNode_t,0))){
    SWIG_fail_ptr("uiNode_on_activate_get",1,SWIGTYPE_p_uiNode_t);
  }
  
  result =  ((arg1)->lua_onActivate);
  {
    LUA_EVENT * resultptr = new LUA_EVENT((const LUA_EVENT &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_LUA_EVENT,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_uiNode_on_mouseenter_set(lua_State* L) {
  int SWIG_arg = 0;
  uiNode_t *arg1 = (uiNode_t *) 0 ;
  LUA_EVENT arg2 ;
  
  SWIG_check_num_args("uiNode_t::lua_onMouseEnter",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("uiNode_t::lua_onMouseEnter",1,"uiNode_t *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_uiNode_t,0))){
    SWIG_fail_ptr("uiNode_on_mouseenter_set",1,SWIGTYPE_p_uiNode_t);
  }
  
  {
    arg2 = (LUA_EVENT)luaL_ref (L, LUA_REGISTRYINDEX);
  }
  if (arg1) (arg1)->lua_onMouseEnter = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_uiNode_on_mouseenter_get(lua_State* L) {
  int SWIG_arg = 0;
  uiNode_t *arg1 = (uiNode_t *) 0 ;
  LUA_EVENT result;
  
  SWIG_check_num_args("uiNode_t::lua_onMouseEnter",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("uiNode_t::lua_onMouseEnter",1,"uiNode_t *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_uiNode_t,0))){
    SWIG_fail_ptr("uiNode_on_mouseenter_get",1,SWIGTYPE_p_uiNode_t);
  }
  
  result =  ((arg1)->lua_onMouseEnter);
  {
    LUA_EVENT * resultptr = new LUA_EVENT((const LUA_EVENT &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_LUA_EVENT,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_uiNode_on_mouseleave_set(lua_State* L) {
  int SWIG_arg = 0;
  uiNode_t *arg1 = (uiNode_t *) 0 ;
  LUA_EVENT arg2 ;
  
  SWIG_check_num_args("uiNode_t::lua_onMouseLeave",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("uiNode_t::lua_onMouseLeave",1,"uiNode_t *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_uiNode_t,0))){
    SWIG_fail_ptr("uiNode_on_mouseleave_set",1,SWIGTYPE_p_uiNode_t);
  }
  
  {
    arg2 = (LUA_EVENT)luaL_ref (L, LUA_REGISTRYINDEX);
  }
  if (arg1) (arg1)->lua_onMouseLeave = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_uiNode_on_mouseleave_get(lua_State* L) {
  int SWIG_arg = 0;
  uiNode_t *arg1 = (uiNode_t *) 0 ;
  LUA_EVENT result;
  
  SWIG_check_num_args("uiNode_t::lua_onMouseLeave",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("uiNode_t::lua_onMouseLeave",1,"uiNode_t *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_uiNode_t,0))){
    SWIG_fail_ptr("uiNode_on_mouseleave_get",1,SWIGTYPE_p_uiNode_t);
  }
  
  result =  ((arg1)->lua_onMouseLeave);
  {
    LUA_EVENT * resultptr = new LUA_EVENT((const LUA_EVENT &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_LUA_EVENT,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_uiNode_on_change_set(lua_State* L) {
  int SWIG_arg = 0;
  uiNode_t *arg1 = (uiNode_t *) 0 ;
  LUA_EVENT arg2 ;
  
  SWIG_check_num_args("uiNode_t::lua_onChange",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("uiNode_t::lua_onChange",1,"uiNode_t *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_uiNode_t,0))){
    SWIG_fail_ptr("uiNode_on_change_set",1,SWIGTYPE_p_uiNode_t);
  }
  
  {
    arg2 = (LUA_EVENT)luaL_ref (L, LUA_REGISTRYINDEX);
  }
  if (arg1) (arg1)->lua_onChange = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_uiNode_on_change_get(lua_State* L) {
  int SWIG_arg = 0;
  uiNode_t *arg1 = (uiNode_t *) 0 ;
  LUA_EVENT result;
  
  SWIG_check_num_args("uiNode_t::lua_onChange",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("uiNode_t::lua_onChange",1,"uiNode_t *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_uiNode_t,0))){
    SWIG_fail_ptr("uiNode_on_change_get",1,SWIGTYPE_p_uiNode_t);
  }
  
  result =  ((arg1)->lua_onChange);
  {
    LUA_EVENT * resultptr = new LUA_EVENT((const LUA_EVENT &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_LUA_EVENT,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_uiNode_on_visiblewhen_set(lua_State* L) {
  int SWIG_arg = 0;
  uiNode_t *arg1 = (uiNode_t *) 0 ;
  LUA_EVENT arg2 ;
  
  SWIG_check_num_args("uiNode_t::lua_onVisibleWhen",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("uiNode_t::lua_onVisibleWhen",1,"uiNode_t *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_uiNode_t,0))){
    SWIG_fail_ptr("uiNode_on_visiblewhen_set",1,SWIGTYPE_p_uiNode_t);
  }
  
  {
    arg2 = (LUA_EVENT)luaL_ref (L, LUA_REGISTRYINDEX);
  }
  if (arg1) (arg1)->lua_onVisibleWhen = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_uiNode_on_visiblewhen_get(lua_State* L) {
  int SWIG_arg = 0;
  uiNode_t *arg1 = (uiNode_t *) 0 ;
  LUA_EVENT result;
  
  SWIG_check_num_args("uiNode_t::lua_onVisibleWhen",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("uiNode_t::lua_onVisibleWhen",1,"uiNode_t *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_uiNode_t,0))){
    SWIG_fail_ptr("uiNode_on_visiblewhen_get",1,SWIGTYPE_p_uiNode_t);
  }
  
  result =  ((arg1)->lua_onVisibleWhen);
  {
    LUA_EVENT * resultptr = new LUA_EVENT((const LUA_EVENT &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_LUA_EVENT,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_uiNode_is_window(lua_State* L) {
  int SWIG_arg = 0;
  uiNode_t *arg1 = (uiNode_t *) 0 ;
  bool result;
  
  SWIG_check_num_args("uiNode_t::is_window",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("uiNode_t::is_window",1,"uiNode_t *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_uiNode_t,0))){
    SWIG_fail_ptr("uiNode_is_window",1,SWIGTYPE_p_uiNode_t);
  }
  
  result = (bool)uiNode_t_is_window(arg1);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_uiNode_is_disabled(lua_State* L) {
  int SWIG_arg = 0;
  uiNode_t *arg1 = (uiNode_t *) 0 ;
  bool result;
  
  SWIG_check_num_args("uiNode_t::is_disabled",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("uiNode_t::is_disabled",1,"uiNode_t *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_uiNode_t,0))){
    SWIG_fail_ptr("uiNode_is_disabled",1,SWIGTYPE_p_uiNode_t);
  }
  
  result = (bool)uiNode_t_is_disabled(arg1);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_uiNode_is_invisible(lua_State* L) {
  int SWIG_arg = 0;
  uiNode_t *arg1 = (uiNode_t *) 0 ;
  bool result;
  
  SWIG_check_num_args("uiNode_t::is_invisible",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("uiNode_t::is_invisible",1,"uiNode_t *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_uiNode_t,0))){
    SWIG_fail_ptr("uiNode_is_invisible",1,SWIGTYPE_p_uiNode_t);
  }
  
  result = (bool)uiNode_t_is_invisible(arg1);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_uiNode_is_ghost(lua_State* L) {
  int SWIG_arg = 0;
  uiNode_t *arg1 = (uiNode_t *) 0 ;
  bool result;
  
  SWIG_check_num_args("uiNode_t::is_ghost",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("uiNode_t::is_ghost",1,"uiNode_t *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_uiNode_t,0))){
    SWIG_fail_ptr("uiNode_is_ghost",1,SWIGTYPE_p_uiNode_t);
  }
  
  result = (bool)uiNode_t_is_ghost(arg1);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_uiNode_is_flashing(lua_State* L) {
  int SWIG_arg = 0;
  uiNode_t *arg1 = (uiNode_t *) 0 ;
  bool result;
  
  SWIG_check_num_args("uiNode_t::is_flashing",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("uiNode_t::is_flashing",1,"uiNode_t *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_uiNode_t,0))){
    SWIG_fail_ptr("uiNode_is_flashing",1,SWIGTYPE_p_uiNode_t);
  }
  
  result = (bool)uiNode_t_is_flashing(arg1);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_uiNode_is_function(lua_State* L) {
  int SWIG_arg = 0;
  uiNode_t *arg1 = (uiNode_t *) 0 ;
  bool result;
  
  SWIG_check_num_args("uiNode_t::is_function",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("uiNode_t::is_function",1,"uiNode_t *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_uiNode_t,0))){
    SWIG_fail_ptr("uiNode_is_function",1,SWIGTYPE_p_uiNode_t);
  }
  
  result = (bool)uiNode_t_is_function(arg1);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_uiNode_is_virtual(lua_State* L) {
  int SWIG_arg = 0;
  uiNode_t *arg1 = (uiNode_t *) 0 ;
  bool result;
  
  SWIG_check_num_args("uiNode_t::is_virtual",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("uiNode_t::is_virtual",1,"uiNode_t *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_uiNode_t,0))){
    SWIG_fail_ptr("uiNode_is_virtual",1,SWIGTYPE_p_uiNode_t);
  }
  
  result = (bool)uiNode_t_is_virtual(arg1);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_uiNode_is_abstract(lua_State* L) {
  int SWIG_arg = 0;
  uiNode_t *arg1 = (uiNode_t *) 0 ;
  bool result;
  
  SWIG_check_num_args("uiNode_t::is_abstract",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("uiNode_t::is_abstract",1,"uiNode_t *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_uiNode_t,0))){
    SWIG_fail_ptr("uiNode_is_abstract",1,SWIGTYPE_p_uiNode_t);
  }
  
  result = (bool)uiNode_t_is_abstract(arg1);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_uiNode_left(lua_State* L) {
  int SWIG_arg = 0;
  uiNode_t *arg1 = (uiNode_t *) 0 ;
  float result;
  
  SWIG_check_num_args("uiNode_t::left",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("uiNode_t::left",1,"uiNode_t *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_uiNode_t,0))){
    SWIG_fail_ptr("uiNode_left",1,SWIGTYPE_p_uiNode_t);
  }
  
  result = (float)uiNode_t_left(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_uiNode_top(lua_State* L) {
  int SWIG_arg = 0;
  uiNode_t *arg1 = (uiNode_t *) 0 ;
  float result;
  
  SWIG_check_num_args("uiNode_t::top",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("uiNode_t::top",1,"uiNode_t *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_uiNode_t,0))){
    SWIG_fail_ptr("uiNode_top",1,SWIGTYPE_p_uiNode_t);
  }
  
  result = (float)uiNode_t_top(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_uiNode_width(lua_State* L) {
  int SWIG_arg = 0;
  uiNode_t *arg1 = (uiNode_t *) 0 ;
  float result;
  
  SWIG_check_num_args("uiNode_t::width",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("uiNode_t::width",1,"uiNode_t *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_uiNode_t,0))){
    SWIG_fail_ptr("uiNode_width",1,SWIGTYPE_p_uiNode_t);
  }
  
  result = (float)uiNode_t_width(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_uiNode_height(lua_State* L) {
  int SWIG_arg = 0;
  uiNode_t *arg1 = (uiNode_t *) 0 ;
  float result;
  
  SWIG_check_num_args("uiNode_t::height",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("uiNode_t::height",1,"uiNode_t *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_uiNode_t,0))){
    SWIG_fail_ptr("uiNode_height",1,SWIGTYPE_p_uiNode_t);
  }
  
  result = (float)uiNode_t_height(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_uiNode_bordersize(lua_State* L) {
  int SWIG_arg = 0;
  uiNode_t *arg1 = (uiNode_t *) 0 ;
  int result;
  
  SWIG_check_num_args("uiNode_t::bordersize",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("uiNode_t::bordersize",1,"uiNode_t *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_uiNode_t,0))){
    SWIG_fail_ptr("uiNode_bordersize",1,SWIGTYPE_p_uiNode_t);
  }
  
  result = (int)uiNode_t_bordersize(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_uiNode_name(lua_State* L) {
  int SWIG_arg = 0;
  uiNode_t *arg1 = (uiNode_t *) 0 ;
  char *result = 0 ;
  
  SWIG_check_num_args("uiNode_t::name",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("uiNode_t::name",1,"uiNode_t *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_uiNode_t,0))){
    SWIG_fail_ptr("uiNode_name",1,SWIGTYPE_p_uiNode_t);
  }
  
  result = (char *)uiNode_t_name(arg1);
  lua_pushstring(L,(const char *)result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_uiNode_type(lua_State* L) {
  int SWIG_arg = 0;
  uiNode_t *arg1 = (uiNode_t *) 0 ;
  char *result = 0 ;
  
  SWIG_check_num_args("uiNode_t::type",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("uiNode_t::type",1,"uiNode_t *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_uiNode_t,0))){
    SWIG_fail_ptr("uiNode_type",1,SWIGTYPE_p_uiNode_t);
  }
  
  result = (char *)uiNode_t_type(arg1);
  lua_pushstring(L,(const char *)result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_uiNode_text(lua_State* L) {
  int SWIG_arg = 0;
  uiNode_t *arg1 = (uiNode_t *) 0 ;
  char *result = 0 ;
  
  SWIG_check_num_args("uiNode_t::text",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("uiNode_t::text",1,"uiNode_t *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_uiNode_t,0))){
    SWIG_fail_ptr("uiNode_text",1,SWIGTYPE_p_uiNode_t);
  }
  
  result = (char *)uiNode_t_text(arg1);
  lua_pushstring(L,(const char *)result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_uiNode_font(lua_State* L) {
  int SWIG_arg = 0;
  uiNode_t *arg1 = (uiNode_t *) 0 ;
  char *result = 0 ;
  
  SWIG_check_num_args("uiNode_t::font",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("uiNode_t::font",1,"uiNode_t *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_uiNode_t,0))){
    SWIG_fail_ptr("uiNode_font",1,SWIGTYPE_p_uiNode_t);
  }
  
  result = (char *)uiNode_t_font(arg1);
  lua_pushstring(L,(const char *)result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_uiNode_image(lua_State* L) {
  int SWIG_arg = 0;
  uiNode_t *arg1 = (uiNode_t *) 0 ;
  char *result = 0 ;
  
  SWIG_check_num_args("uiNode_t::image",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("uiNode_t::image",1,"uiNode_t *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_uiNode_t,0))){
    SWIG_fail_ptr("uiNode_image",1,SWIGTYPE_p_uiNode_t);
  }
  
  result = (char *)uiNode_t_image(arg1);
  lua_pushstring(L,(const char *)result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_uiNode_contentalign(lua_State* L) {
  int SWIG_arg = 0;
  uiNode_t *arg1 = (uiNode_t *) 0 ;
  int result;
  
  SWIG_check_num_args("uiNode_t::contentalign",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("uiNode_t::contentalign",1,"uiNode_t *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_uiNode_t,0))){
    SWIG_fail_ptr("uiNode_contentalign",1,SWIGTYPE_p_uiNode_t);
  }
  
  result = (int)uiNode_t_contentalign(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_uiNode_layoutalign(lua_State* L) {
  int SWIG_arg = 0;
  uiNode_t *arg1 = (uiNode_t *) 0 ;
  int result;
  
  SWIG_check_num_args("uiNode_t::layoutalign",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("uiNode_t::layoutalign",1,"uiNode_t *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_uiNode_t,0))){
    SWIG_fail_ptr("uiNode_layoutalign",1,SWIGTYPE_p_uiNode_t);
  }
  
  result = (int)uiNode_t_layoutalign(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_uiNode_flashspeed(lua_State* L) {
  int SWIG_arg = 0;
  uiNode_t *arg1 = (uiNode_t *) 0 ;
  float result;
  
  SWIG_check_num_args("uiNode_t::flashspeed",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("uiNode_t::flashspeed",1,"uiNode_t *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_uiNode_t,0))){
    SWIG_fail_ptr("uiNode_flashspeed",1,SWIGTYPE_p_uiNode_t);
  }
  
  result = (float)uiNode_t_flashspeed(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_uiNode_padding(lua_State* L) {
  int SWIG_arg = 0;
  uiNode_t *arg1 = (uiNode_t *) 0 ;
  int result;
  
  SWIG_check_num_args("uiNode_t::padding",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("uiNode_t::padding",1,"uiNode_t *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_uiNode_t,0))){
    SWIG_fail_ptr("uiNode_padding",1,SWIGTYPE_p_uiNode_t);
  }
  
  result = (int)uiNode_t_padding(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_uiNode_first(lua_State* L) {
  int SWIG_arg = 0;
  uiNode_t *arg1 = (uiNode_t *) 0 ;
  uiNode_t *result = 0 ;
  
  SWIG_check_num_args("uiNode_t::first",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("uiNode_t::first",1,"uiNode_t *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_uiNode_t,0))){
    SWIG_fail_ptr("uiNode_first",1,SWIGTYPE_p_uiNode_t);
  }
  
  result = (uiNode_t *)uiNode_t_first(arg1);
  {
    if (result) {
      swig_type_info* info=(swig_type_info*)result->behaviour->lua_SWIG_typeinfo;
      SWIG_NewPointerObj(L, result, info, 0); SWIG_arg++;
    }
    else {
      SWIG_NewPointerObj(L, nullptr, nullptr, 0); SWIG_arg++;
    }
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_uiNode_last(lua_State* L) {
  int SWIG_arg = 0;
  uiNode_t *arg1 = (uiNode_t *) 0 ;
  uiNode_t *result = 0 ;
  
  SWIG_check_num_args("uiNode_t::last",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("uiNode_t::last",1,"uiNode_t *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_uiNode_t,0))){
    SWIG_fail_ptr("uiNode_last",1,SWIGTYPE_p_uiNode_t);
  }
  
  result = (uiNode_t *)uiNode_t_last(arg1);
  {
    if (result) {
      swig_type_info* info=(swig_type_info*)result->behaviour->lua_SWIG_typeinfo;
      SWIG_NewPointerObj(L, result, info, 0); SWIG_arg++;
    }
    else {
      SWIG_NewPointerObj(L, nullptr, nullptr, 0); SWIG_arg++;
    }
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_uiNode_next(lua_State* L) {
  int SWIG_arg = 0;
  uiNode_t *arg1 = (uiNode_t *) 0 ;
  uiNode_t *result = 0 ;
  
  SWIG_check_num_args("uiNode_t::next",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("uiNode_t::next",1,"uiNode_t *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_uiNode_t,0))){
    SWIG_fail_ptr("uiNode_next",1,SWIGTYPE_p_uiNode_t);
  }
  
  result = (uiNode_t *)uiNode_t_next(arg1);
  {
    if (result) {
      swig_type_info* info=(swig_type_info*)result->behaviour->lua_SWIG_typeinfo;
      SWIG_NewPointerObj(L, result, info, 0); SWIG_arg++;
    }
    else {
      SWIG_NewPointerObj(L, nullptr, nullptr, 0); SWIG_arg++;
    }
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_uiNode_parent(lua_State* L) {
  int SWIG_arg = 0;
  uiNode_t *arg1 = (uiNode_t *) 0 ;
  uiNode_t *result = 0 ;
  
  SWIG_check_num_args("uiNode_t::parent",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("uiNode_t::parent",1,"uiNode_t *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_uiNode_t,0))){
    SWIG_fail_ptr("uiNode_parent",1,SWIGTYPE_p_uiNode_t);
  }
  
  result = (uiNode_t *)uiNode_t_parent(arg1);
  {
    if (result) {
      swig_type_info* info=(swig_type_info*)result->behaviour->lua_SWIG_typeinfo;
      SWIG_NewPointerObj(L, result, info, 0); SWIG_arg++;
    }
    else {
      SWIG_NewPointerObj(L, nullptr, nullptr, 0); SWIG_arg++;
    }
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_uiNode_root(lua_State* L) {
  int SWIG_arg = 0;
  uiNode_t *arg1 = (uiNode_t *) 0 ;
  uiNode_t *result = 0 ;
  
  SWIG_check_num_args("uiNode_t::root",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("uiNode_t::root",1,"uiNode_t *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_uiNode_t,0))){
    SWIG_fail_ptr("uiNode_root",1,SWIGTYPE_p_uiNode_t);
  }
  
  result = (uiNode_t *)uiNode_t_root(arg1);
  {
    if (result) {
      swig_type_info* info=(swig_type_info*)result->behaviour->lua_SWIG_typeinfo;
      SWIG_NewPointerObj(L, result, info, 0); SWIG_arg++;
    }
    else {
      SWIG_NewPointerObj(L, nullptr, nullptr, 0); SWIG_arg++;
    }
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_uiNode_child(lua_State* L) {
  int SWIG_arg = 0;
  uiNode_t *arg1 = (uiNode_t *) 0 ;
  char *arg2 = (char *) 0 ;
  uiNode_t *result = 0 ;
  
  SWIG_check_num_args("uiNode_t::child",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("uiNode_t::child",1,"uiNode_t *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("uiNode_t::child",2,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_uiNode_t,0))){
    SWIG_fail_ptr("uiNode_child",1,SWIGTYPE_p_uiNode_t);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  result = (uiNode_t *)uiNode_t_child(arg1,(char const *)arg2);
  {
    if (result) {
      swig_type_info* info=(swig_type_info*)result->behaviour->lua_SWIG_typeinfo;
      SWIG_NewPointerObj(L, result, info, 0); SWIG_arg++;
    }
    else {
      SWIG_NewPointerObj(L, nullptr, nullptr, 0); SWIG_arg++;
    }
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_uiNode_find(lua_State* L) {
  int SWIG_arg = 0;
  uiNode_t *arg1 = (uiNode_t *) 0 ;
  char *arg2 = (char *) 0 ;
  uiNode_t *result = 0 ;
  
  SWIG_check_num_args("uiNode_t::find",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("uiNode_t::find",1,"uiNode_t *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("uiNode_t::find",2,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_uiNode_t,0))){
    SWIG_fail_ptr("uiNode_find",1,SWIGTYPE_p_uiNode_t);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  result = (uiNode_t *)uiNode_t_find(arg1,(char const *)arg2);
  {
    if (result) {
      swig_type_info* info=(swig_type_info*)result->behaviour->lua_SWIG_typeinfo;
      SWIG_NewPointerObj(L, result, info, 0); SWIG_arg++;
    }
    else {
      SWIG_NewPointerObj(L, nullptr, nullptr, 0); SWIG_arg++;
    }
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_uiNode_append_node(lua_State* L) {
  int SWIG_arg = 0;
  uiNode_t *arg1 = (uiNode_t *) 0 ;
  uiNode_t *arg2 = (uiNode_t *) 0 ;
  
  SWIG_check_num_args("uiNode_t::append_node",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("uiNode_t::append_node",1,"uiNode_t *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("uiNode_t::append_node",2,"uiNode_t *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_uiNode_t,0))){
    SWIG_fail_ptr("uiNode_append_node",1,SWIGTYPE_p_uiNode_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_uiNode_t,0))){
    SWIG_fail_ptr("uiNode_append_node",2,SWIGTYPE_p_uiNode_t);
  }
  
  uiNode_t_append_node(arg1,arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_uiNode_insert_node(lua_State* L) {
  int SWIG_arg = 0;
  uiNode_t *arg1 = (uiNode_t *) 0 ;
  uiNode_t *arg2 = (uiNode_t *) 0 ;
  uiNode_t *arg3 = (uiNode_t *) 0 ;
  
  SWIG_check_num_args("uiNode_t::insert_node",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("uiNode_t::insert_node",1,"uiNode_t *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("uiNode_t::insert_node",2,"uiNode_t *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("uiNode_t::insert_node",3,"uiNode_t *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_uiNode_t,0))){
    SWIG_fail_ptr("uiNode_insert_node",1,SWIGTYPE_p_uiNode_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_uiNode_t,0))){
    SWIG_fail_ptr("uiNode_insert_node",2,SWIGTYPE_p_uiNode_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_uiNode_t,0))){
    SWIG_fail_ptr("uiNode_insert_node",3,SWIGTYPE_p_uiNode_t);
  }
  
  uiNode_t_insert_node(arg1,arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_uiNode_delete_node(lua_State* L) {
  int SWIG_arg = 0;
  uiNode_t *arg1 = (uiNode_t *) 0 ;
  
  SWIG_check_num_args("uiNode_t::delete_node",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("uiNode_t::delete_node",1,"uiNode_t *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_uiNode_t,0))){
    SWIG_fail_ptr("uiNode_delete_node",1,SWIGTYPE_p_uiNode_t);
  }
  
  uiNode_t_delete_node(arg1);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_uiNode_remove_children(lua_State* L) {
  int SWIG_arg = 0;
  uiNode_t *arg1 = (uiNode_t *) 0 ;
  
  SWIG_check_num_args("uiNode_t::remove_children",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("uiNode_t::remove_children",1,"uiNode_t *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_uiNode_t,0))){
    SWIG_fail_ptr("uiNode_remove_children",1,SWIGTYPE_p_uiNode_t);
  }
  
  uiNode_t_remove_children(arg1);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_uiNode_set_left(lua_State* L) {
  int SWIG_arg = 0;
  uiNode_t *arg1 = (uiNode_t *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("uiNode_t::set_left",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("uiNode_t::set_left",1,"uiNode_t *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("uiNode_t::set_left",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_uiNode_t,0))){
    SWIG_fail_ptr("uiNode_set_left",1,SWIGTYPE_p_uiNode_t);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  uiNode_t_set_left(arg1,arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_uiNode_set_top(lua_State* L) {
  int SWIG_arg = 0;
  uiNode_t *arg1 = (uiNode_t *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("uiNode_t::set_top",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("uiNode_t::set_top",1,"uiNode_t *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("uiNode_t::set_top",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_uiNode_t,0))){
    SWIG_fail_ptr("uiNode_set_top",1,SWIGTYPE_p_uiNode_t);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  uiNode_t_set_top(arg1,arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_uiNode_set_width(lua_State* L) {
  int SWIG_arg = 0;
  uiNode_t *arg1 = (uiNode_t *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("uiNode_t::set_width",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("uiNode_t::set_width",1,"uiNode_t *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("uiNode_t::set_width",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_uiNode_t,0))){
    SWIG_fail_ptr("uiNode_set_width",1,SWIGTYPE_p_uiNode_t);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  uiNode_t_set_width(arg1,arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_uiNode_set_height(lua_State* L) {
  int SWIG_arg = 0;
  uiNode_t *arg1 = (uiNode_t *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("uiNode_t::set_height",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("uiNode_t::set_height",1,"uiNode_t *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("uiNode_t::set_height",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_uiNode_t,0))){
    SWIG_fail_ptr("uiNode_set_height",1,SWIGTYPE_p_uiNode_t);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  uiNode_t_set_height(arg1,arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_uiNode_set_box(lua_State* L) {
  int SWIG_arg = 0;
  uiNode_t *arg1 = (uiNode_t *) 0 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  
  SWIG_check_num_args("uiNode_t::set_box",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("uiNode_t::set_box",1,"uiNode_t *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("uiNode_t::set_box",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("uiNode_t::set_box",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("uiNode_t::set_box",4,"float");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("uiNode_t::set_box",5,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_uiNode_t,0))){
    SWIG_fail_ptr("uiNode_set_box",1,SWIGTYPE_p_uiNode_t);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3);
  arg4 = (float)lua_tonumber(L, 4);
  arg5 = (float)lua_tonumber(L, 5);
  uiNode_t_set_box(arg1,arg2,arg3,arg4,arg5);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_uiNode_set_flashing(lua_State* L) {
  int SWIG_arg = 0;
  uiNode_t *arg1 = (uiNode_t *) 0 ;
  bool arg2 ;
  
  SWIG_check_num_args("uiNode_t::set_flashing",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("uiNode_t::set_flashing",1,"uiNode_t *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("uiNode_t::set_flashing",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_uiNode_t,0))){
    SWIG_fail_ptr("uiNode_set_flashing",1,SWIGTYPE_p_uiNode_t);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  uiNode_t_set_flashing(arg1,arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_uiNode_set_flashspeed(lua_State* L) {
  int SWIG_arg = 0;
  uiNode_t *arg1 = (uiNode_t *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("uiNode_t::set_flashspeed",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("uiNode_t::set_flashspeed",1,"uiNode_t *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("uiNode_t::set_flashspeed",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_uiNode_t,0))){
    SWIG_fail_ptr("uiNode_set_flashspeed",1,SWIGTYPE_p_uiNode_t);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  uiNode_t_set_flashspeed(arg1,arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_uiNode_set_invisible(lua_State* L) {
  int SWIG_arg = 0;
  uiNode_t *arg1 = (uiNode_t *) 0 ;
  bool arg2 ;
  
  SWIG_check_num_args("uiNode_t::set_invisible",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("uiNode_t::set_invisible",1,"uiNode_t *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("uiNode_t::set_invisible",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_uiNode_t,0))){
    SWIG_fail_ptr("uiNode_set_invisible",1,SWIGTYPE_p_uiNode_t);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  uiNode_t_set_invisible(arg1,arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_uiNode_set_ghost(lua_State* L) {
  int SWIG_arg = 0;
  uiNode_t *arg1 = (uiNode_t *) 0 ;
  bool arg2 ;
  
  SWIG_check_num_args("uiNode_t::set_ghost",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("uiNode_t::set_ghost",1,"uiNode_t *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("uiNode_t::set_ghost",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_uiNode_t,0))){
    SWIG_fail_ptr("uiNode_set_ghost",1,SWIGTYPE_p_uiNode_t);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  uiNode_t_set_ghost(arg1,arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_uiNode_set_pos(lua_State* L) {
  int SWIG_arg = 0;
  uiNode_t *arg1 = (uiNode_t *) 0 ;
  float arg2 ;
  float arg3 ;
  
  SWIG_check_num_args("uiNode_t::set_pos",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("uiNode_t::set_pos",1,"uiNode_t *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("uiNode_t::set_pos",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("uiNode_t::set_pos",3,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_uiNode_t,0))){
    SWIG_fail_ptr("uiNode_set_pos",1,SWIGTYPE_p_uiNode_t);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3);
  uiNode_t_set_pos(arg1,arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_uiNode_set_size(lua_State* L) {
  int SWIG_arg = 0;
  uiNode_t *arg1 = (uiNode_t *) 0 ;
  float arg2 ;
  float arg3 ;
  
  SWIG_check_num_args("uiNode_t::set_size",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("uiNode_t::set_size",1,"uiNode_t *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("uiNode_t::set_size",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("uiNode_t::set_size",3,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_uiNode_t,0))){
    SWIG_fail_ptr("uiNode_set_size",1,SWIGTYPE_p_uiNode_t);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3);
  uiNode_t_set_size(arg1,arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_uiNode_set_color(lua_State* L) {
  int SWIG_arg = 0;
  uiNode_t *arg1 = (uiNode_t *) 0 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  
  SWIG_check_num_args("uiNode_t::set_color",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("uiNode_t::set_color",1,"uiNode_t *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("uiNode_t::set_color",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("uiNode_t::set_color",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("uiNode_t::set_color",4,"float");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("uiNode_t::set_color",5,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_uiNode_t,0))){
    SWIG_fail_ptr("uiNode_set_color",1,SWIGTYPE_p_uiNode_t);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3);
  arg4 = (float)lua_tonumber(L, 4);
  arg5 = (float)lua_tonumber(L, 5);
  uiNode_t_set_color(arg1,arg2,arg3,arg4,arg5);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_uiNode_set_disabledcolor(lua_State* L) {
  int SWIG_arg = 0;
  uiNode_t *arg1 = (uiNode_t *) 0 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  
  SWIG_check_num_args("uiNode_t::set_disabledcolor",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("uiNode_t::set_disabledcolor",1,"uiNode_t *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("uiNode_t::set_disabledcolor",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("uiNode_t::set_disabledcolor",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("uiNode_t::set_disabledcolor",4,"float");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("uiNode_t::set_disabledcolor",5,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_uiNode_t,0))){
    SWIG_fail_ptr("uiNode_set_disabledcolor",1,SWIGTYPE_p_uiNode_t);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3);
  arg4 = (float)lua_tonumber(L, 4);
  arg5 = (float)lua_tonumber(L, 5);
  uiNode_t_set_disabledcolor(arg1,arg2,arg3,arg4,arg5);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_uiNode_set_flashcolor(lua_State* L) {
  int SWIG_arg = 0;
  uiNode_t *arg1 = (uiNode_t *) 0 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  
  SWIG_check_num_args("uiNode_t::set_flashcolor",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("uiNode_t::set_flashcolor",1,"uiNode_t *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("uiNode_t::set_flashcolor",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("uiNode_t::set_flashcolor",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("uiNode_t::set_flashcolor",4,"float");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("uiNode_t::set_flashcolor",5,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_uiNode_t,0))){
    SWIG_fail_ptr("uiNode_set_flashcolor",1,SWIGTYPE_p_uiNode_t);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3);
  arg4 = (float)lua_tonumber(L, 4);
  arg5 = (float)lua_tonumber(L, 5);
  uiNode_t_set_flashcolor(arg1,arg2,arg3,arg4,arg5);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_uiNode_set_selectcolor(lua_State* L) {
  int SWIG_arg = 0;
  uiNode_t *arg1 = (uiNode_t *) 0 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  
  SWIG_check_num_args("uiNode_t::set_selectcolor",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("uiNode_t::set_selectcolor",1,"uiNode_t *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("uiNode_t::set_selectcolor",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("uiNode_t::set_selectcolor",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("uiNode_t::set_selectcolor",4,"float");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("uiNode_t::set_selectcolor",5,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_uiNode_t,0))){
    SWIG_fail_ptr("uiNode_set_selectcolor",1,SWIGTYPE_p_uiNode_t);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3);
  arg4 = (float)lua_tonumber(L, 4);
  arg5 = (float)lua_tonumber(L, 5);
  uiNode_t_set_selectcolor(arg1,arg2,arg3,arg4,arg5);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_uiNode_set_backgroundcolor(lua_State* L) {
  int SWIG_arg = 0;
  uiNode_t *arg1 = (uiNode_t *) 0 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  
  SWIG_check_num_args("uiNode_t::set_backgroundcolor",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("uiNode_t::set_backgroundcolor",1,"uiNode_t *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("uiNode_t::set_backgroundcolor",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("uiNode_t::set_backgroundcolor",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("uiNode_t::set_backgroundcolor",4,"float");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("uiNode_t::set_backgroundcolor",5,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_uiNode_t,0))){
    SWIG_fail_ptr("uiNode_set_backgroundcolor",1,SWIGTYPE_p_uiNode_t);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3);
  arg4 = (float)lua_tonumber(L, 4);
  arg5 = (float)lua_tonumber(L, 5);
  uiNode_t_set_backgroundcolor(arg1,arg2,arg3,arg4,arg5);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_uiNode_set_bordersize(lua_State* L) {
  int SWIG_arg = 0;
  uiNode_t *arg1 = (uiNode_t *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("uiNode_t::set_bordersize",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("uiNode_t::set_bordersize",1,"uiNode_t *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("uiNode_t::set_bordersize",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_uiNode_t,0))){
    SWIG_fail_ptr("uiNode_set_bordersize",1,SWIGTYPE_p_uiNode_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  uiNode_t_set_bordersize(arg1,arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_uiNode_set_bordercolor(lua_State* L) {
  int SWIG_arg = 0;
  uiNode_t *arg1 = (uiNode_t *) 0 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  
  SWIG_check_num_args("uiNode_t::set_bordercolor",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("uiNode_t::set_bordercolor",1,"uiNode_t *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("uiNode_t::set_bordercolor",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("uiNode_t::set_bordercolor",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("uiNode_t::set_bordercolor",4,"float");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("uiNode_t::set_bordercolor",5,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_uiNode_t,0))){
    SWIG_fail_ptr("uiNode_set_bordercolor",1,SWIGTYPE_p_uiNode_t);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3);
  arg4 = (float)lua_tonumber(L, 4);
  arg5 = (float)lua_tonumber(L, 5);
  uiNode_t_set_bordercolor(arg1,arg2,arg3,arg4,arg5);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_uiNode_set_text(lua_State* L) {
  int SWIG_arg = 0;
  uiNode_t *arg1 = (uiNode_t *) 0 ;
  char *arg2 = (char *) 0 ;
  
  SWIG_check_num_args("uiNode_t::set_text",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("uiNode_t::set_text",1,"uiNode_t *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("uiNode_t::set_text",2,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_uiNode_t,0))){
    SWIG_fail_ptr("uiNode_set_text",1,SWIGTYPE_p_uiNode_t);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  uiNode_t_set_text(arg1,(char const *)arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_uiNode_set_font(lua_State* L) {
  int SWIG_arg = 0;
  uiNode_t *arg1 = (uiNode_t *) 0 ;
  char *arg2 = (char *) 0 ;
  
  SWIG_check_num_args("uiNode_t::set_font",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("uiNode_t::set_font",1,"uiNode_t *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("uiNode_t::set_font",2,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_uiNode_t,0))){
    SWIG_fail_ptr("uiNode_set_font",1,SWIGTYPE_p_uiNode_t);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  uiNode_t_set_font(arg1,(char const *)arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_uiNode_set_image(lua_State* L) {
  int SWIG_arg = 0;
  uiNode_t *arg1 = (uiNode_t *) 0 ;
  char *arg2 = (char *) 0 ;
  
  SWIG_check_num_args("uiNode_t::set_image",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("uiNode_t::set_image",1,"uiNode_t *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("uiNode_t::set_image",2,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_uiNode_t,0))){
    SWIG_fail_ptr("uiNode_set_image",1,SWIGTYPE_p_uiNode_t);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  uiNode_t_set_image(arg1,(char const *)arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_uiNode_set_contentalign(lua_State* L) {
  int SWIG_arg = 0;
  uiNode_t *arg1 = (uiNode_t *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("uiNode_t::set_contentalign",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("uiNode_t::set_contentalign",1,"uiNode_t *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("uiNode_t::set_contentalign",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_uiNode_t,0))){
    SWIG_fail_ptr("uiNode_set_contentalign",1,SWIGTYPE_p_uiNode_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  uiNode_t_set_contentalign(arg1,arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_uiNode_set_layoutalign(lua_State* L) {
  int SWIG_arg = 0;
  uiNode_t *arg1 = (uiNode_t *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("uiNode_t::set_layoutalign",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("uiNode_t::set_layoutalign",1,"uiNode_t *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("uiNode_t::set_layoutalign",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_uiNode_t,0))){
    SWIG_fail_ptr("uiNode_set_layoutalign",1,SWIGTYPE_p_uiNode_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  uiNode_t_set_layoutalign(arg1,arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_uiNode_set_tooltip(lua_State* L) {
  int SWIG_arg = 0;
  uiNode_t *arg1 = (uiNode_t *) 0 ;
  char *arg2 = (char *) 0 ;
  
  SWIG_check_num_args("uiNode_t::set_tooltip",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("uiNode_t::set_tooltip",1,"uiNode_t *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("uiNode_t::set_tooltip",2,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_uiNode_t,0))){
    SWIG_fail_ptr("uiNode_set_tooltip",1,SWIGTYPE_p_uiNode_t);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  uiNode_t_set_tooltip(arg1,(char const *)arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_uiNode_set_disabled(lua_State* L) {
  int SWIG_arg = 0;
  uiNode_t *arg1 = (uiNode_t *) 0 ;
  bool arg2 ;
  
  SWIG_check_num_args("uiNode_t::set_disabled",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("uiNode_t::set_disabled",1,"uiNode_t *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("uiNode_t::set_disabled",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_uiNode_t,0))){
    SWIG_fail_ptr("uiNode_set_disabled",1,SWIGTYPE_p_uiNode_t);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  uiNode_t_set_disabled(arg1,arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_uiNode_set_borderthickness(lua_State* L) {
  int SWIG_arg = 0;
  uiNode_t *arg1 = (uiNode_t *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("uiNode_t::set_borderthickness",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("uiNode_t::set_borderthickness",1,"uiNode_t *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("uiNode_t::set_borderthickness",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_uiNode_t,0))){
    SWIG_fail_ptr("uiNode_set_borderthickness",1,SWIGTYPE_p_uiNode_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  uiNode_t_set_borderthickness(arg1,arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_uiNode_set_padding(lua_State* L) {
  int SWIG_arg = 0;
  uiNode_t *arg1 = (uiNode_t *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("uiNode_t::set_padding",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("uiNode_t::set_padding",1,"uiNode_t *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("uiNode_t::set_padding",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_uiNode_t,0))){
    SWIG_fail_ptr("uiNode_set_padding",1,SWIGTYPE_p_uiNode_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  uiNode_t_set_padding(arg1,arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_uiNode___setitem(lua_State* L) {
  int SWIG_arg = 0;
  uiNode_t *arg1 = (uiNode_t *) 0 ;
  char *arg2 = (char *) 0 ;
  LUA_METHOD arg3 ;
  
  SWIG_check_num_args("uiNode_t::__setitem",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("uiNode_t::__setitem",1,"uiNode_t *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("uiNode_t::__setitem",2,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_uiNode_t,0))){
    SWIG_fail_ptr("uiNode___setitem",1,SWIGTYPE_p_uiNode_t);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  {
    arg3 = (LUA_METHOD)luaL_ref (L, LUA_REGISTRYINDEX);
  }
  uiNode_t___setitem(arg1,(char const *)arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_uiNode___getitem(lua_State* L) {
  int SWIG_arg = 0;
  uiNode_t *arg1 = (uiNode_t *) 0 ;
  char *arg2 = (char *) 0 ;
  LUA_METHOD result;
  
  SWIG_check_num_args("uiNode_t::__getitem",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("uiNode_t::__getitem",1,"uiNode_t *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("uiNode_t::__getitem",2,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_uiNode_t,0))){
    SWIG_fail_ptr("uiNode___getitem",1,SWIGTYPE_p_uiNode_t);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  result = uiNode_t___getitem(arg1,(char const *)arg2);
  {
    lua_rawgeti(L, LUA_REGISTRYINDEX, result); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_uiNode_add_classmethod(lua_State* L) {
  int SWIG_arg = 0;
  uiNode_t *arg1 = (uiNode_t *) 0 ;
  char *arg2 = (char *) 0 ;
  LUA_METHOD arg3 ;
  
  SWIG_check_num_args("uiNode_t::add_classmethod",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("uiNode_t::add_classmethod",1,"uiNode_t *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("uiNode_t::add_classmethod",2,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_uiNode_t,0))){
    SWIG_fail_ptr("uiNode_add_classmethod",1,SWIGTYPE_p_uiNode_t);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  {
    arg3 = (LUA_METHOD)luaL_ref (L, LUA_REGISTRYINDEX);
  }
  uiNode_t_add_classmethod(arg1,(char const *)arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_uiNode_add_nodemethod(lua_State* L) {
  int SWIG_arg = 0;
  uiNode_t *arg1 = (uiNode_t *) 0 ;
  char *arg2 = (char *) 0 ;
  LUA_METHOD arg3 ;
  
  SWIG_check_num_args("uiNode_t::add_nodemethod",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("uiNode_t::add_nodemethod",1,"uiNode_t *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("uiNode_t::add_nodemethod",2,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_uiNode_t,0))){
    SWIG_fail_ptr("uiNode_add_nodemethod",1,SWIGTYPE_p_uiNode_t);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  {
    arg3 = (LUA_METHOD)luaL_ref (L, LUA_REGISTRYINDEX);
  }
  uiNode_t_add_nodemethod(arg1,(char const *)arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_uiNode(lua_State* L) {
  int SWIG_arg = 0;
  uiNode_t *result = 0 ;
  
  SWIG_check_num_args("uiNode_t::uiNode_t",0,0)
  result = (uiNode_t *)new uiNode_t();
  {
    if (result) {
      swig_type_info* info=(swig_type_info*)result->behaviour->lua_SWIG_typeinfo;
      SWIG_NewPointerObj(L, result, info, 0); SWIG_arg++;
    }
    else {
      SWIG_NewPointerObj(L, nullptr, nullptr, 0); SWIG_arg++;
    }
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_uiNode(void *obj) {
uiNode_t *arg1 = (uiNode_t *) obj;
delete arg1;
}
static int _proxy__wrap_new_uiNode(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_uiNode);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_uiNode_attributes[] = {
    { "on_click", _wrap_uiNode_on_click_get, _wrap_uiNode_on_click_set },
    { "on_rightclick", _wrap_uiNode_on_rightclick_get, _wrap_uiNode_on_rightclick_set },
    { "on_middleclick", _wrap_uiNode_on_middleclick_get, _wrap_uiNode_on_middleclick_set },
    { "on_wheelup", _wrap_uiNode_on_wheelup_get, _wrap_uiNode_on_wheelup_set },
    { "on_wheeldown", _wrap_uiNode_on_wheeldown_get, _wrap_uiNode_on_wheeldown_set },
    { "on_wheel", _wrap_uiNode_on_wheel_get, _wrap_uiNode_on_wheel_set },
    { "on_focusgained", _wrap_uiNode_on_focusgained_get, _wrap_uiNode_on_focusgained_set },
    { "on_focuslost", _wrap_uiNode_on_focuslost_get, _wrap_uiNode_on_focuslost_set },
    { "on_keypressed", _wrap_uiNode_on_keypressed_get, _wrap_uiNode_on_keypressed_set },
    { "on_keyreleased", _wrap_uiNode_on_keyreleased_get, _wrap_uiNode_on_keyreleased_set },
    { "on_loaded", _wrap_uiNode_on_loaded_get, _wrap_uiNode_on_loaded_set },
    { "on_activate", _wrap_uiNode_on_activate_get, _wrap_uiNode_on_activate_set },
    { "on_mouseenter", _wrap_uiNode_on_mouseenter_get, _wrap_uiNode_on_mouseenter_set },
    { "on_mouseleave", _wrap_uiNode_on_mouseleave_get, _wrap_uiNode_on_mouseleave_set },
    { "on_change", _wrap_uiNode_on_change_get, _wrap_uiNode_on_change_set },
    { "on_visiblewhen", _wrap_uiNode_on_visiblewhen_get, _wrap_uiNode_on_visiblewhen_set },
    {0,0,0}
};
static swig_lua_method swig_uiNode_methods[]= {
    { "is_window", _wrap_uiNode_is_window},
    { "is_disabled", _wrap_uiNode_is_disabled},
    { "is_invisible", _wrap_uiNode_is_invisible},
    { "is_ghost", _wrap_uiNode_is_ghost},
    { "is_flashing", _wrap_uiNode_is_flashing},
    { "is_function", _wrap_uiNode_is_function},
    { "is_virtual", _wrap_uiNode_is_virtual},
    { "is_abstract", _wrap_uiNode_is_abstract},
    { "left", _wrap_uiNode_left},
    { "top", _wrap_uiNode_top},
    { "width", _wrap_uiNode_width},
    { "height", _wrap_uiNode_height},
    { "bordersize", _wrap_uiNode_bordersize},
    { "name", _wrap_uiNode_name},
    { "type", _wrap_uiNode_type},
    { "text", _wrap_uiNode_text},
    { "font", _wrap_uiNode_font},
    { "image", _wrap_uiNode_image},
    { "contentalign", _wrap_uiNode_contentalign},
    { "layoutalign", _wrap_uiNode_layoutalign},
    { "flashspeed", _wrap_uiNode_flashspeed},
    { "padding", _wrap_uiNode_padding},
    { "first", _wrap_uiNode_first},
    { "last", _wrap_uiNode_last},
    { "next", _wrap_uiNode_next},
    { "parent", _wrap_uiNode_parent},
    { "root", _wrap_uiNode_root},
    { "child", _wrap_uiNode_child},
    { "find", _wrap_uiNode_find},
    { "append_node", _wrap_uiNode_append_node},
    { "insert_node", _wrap_uiNode_insert_node},
    { "delete_node", _wrap_uiNode_delete_node},
    { "remove_children", _wrap_uiNode_remove_children},
    { "set_left", _wrap_uiNode_set_left},
    { "set_top", _wrap_uiNode_set_top},
    { "set_width", _wrap_uiNode_set_width},
    { "set_height", _wrap_uiNode_set_height},
    { "set_box", _wrap_uiNode_set_box},
    { "set_flashing", _wrap_uiNode_set_flashing},
    { "set_flashspeed", _wrap_uiNode_set_flashspeed},
    { "set_invisible", _wrap_uiNode_set_invisible},
    { "set_ghost", _wrap_uiNode_set_ghost},
    { "set_pos", _wrap_uiNode_set_pos},
    { "set_size", _wrap_uiNode_set_size},
    { "set_color", _wrap_uiNode_set_color},
    { "set_disabledcolor", _wrap_uiNode_set_disabledcolor},
    { "set_flashcolor", _wrap_uiNode_set_flashcolor},
    { "set_selectcolor", _wrap_uiNode_set_selectcolor},
    { "set_backgroundcolor", _wrap_uiNode_set_backgroundcolor},
    { "set_bordersize", _wrap_uiNode_set_bordersize},
    { "set_bordercolor", _wrap_uiNode_set_bordercolor},
    { "set_text", _wrap_uiNode_set_text},
    { "set_font", _wrap_uiNode_set_font},
    { "set_image", _wrap_uiNode_set_image},
    { "set_contentalign", _wrap_uiNode_set_contentalign},
    { "set_layoutalign", _wrap_uiNode_set_layoutalign},
    { "set_tooltip", _wrap_uiNode_set_tooltip},
    { "set_disabled", _wrap_uiNode_set_disabled},
    { "set_borderthickness", _wrap_uiNode_set_borderthickness},
    { "set_padding", _wrap_uiNode_set_padding},
    { "__setitem", _wrap_uiNode___setitem},
    { "__getitem", _wrap_uiNode___getitem},
    { "add_classmethod", _wrap_uiNode_add_classmethod},
    { "add_nodemethod", _wrap_uiNode_add_nodemethod},
    {0,0}
};
static swig_lua_method swig_uiNode_meta[] = {
    { "__setitem", _wrap_uiNode___setitem},
    { "__getitem", _wrap_uiNode___getitem},
    {0,0}
};

static swig_lua_attribute swig_uiNode_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_uiNode_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_uiNode_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_uiNode_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_uiNode_Sf_SwigStatic = {
    "uiNode",
    swig_uiNode_Sf_SwigStatic_methods,
    swig_uiNode_Sf_SwigStatic_attributes,
    swig_uiNode_Sf_SwigStatic_constants,
    swig_uiNode_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_uiNode_bases[] = {0};
static const char *swig_uiNode_base_names[] = {0};
static swig_lua_class _wrap_class_uiNode = { "uiNode", "uiNode", &SWIGTYPE_p_uiNode_t,_proxy__wrap_new_uiNode, swig_delete_uiNode, swig_uiNode_methods, swig_uiNode_attributes, &swig_uiNode_Sf_SwigStatic, swig_uiNode_meta, swig_uiNode_bases, swig_uiNode_base_names };

static int _wrap_uiAbstractOptionNode_dataid(lua_State* L) {
  int SWIG_arg = 0;
  uiAbstractOptionNode_t *arg1 = (uiAbstractOptionNode_t *) 0 ;
  int result;
  
  SWIG_check_num_args("uiAbstractOptionNode_t::dataid",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("uiAbstractOptionNode_t::dataid",1,"uiAbstractOptionNode_t *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_uiAbstractOptionNode_t,0))){
    SWIG_fail_ptr("uiAbstractOptionNode_dataid",1,SWIGTYPE_p_uiAbstractOptionNode_t);
  }
  
  result = (int)uiAbstractOptionNode_t_dataid(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_uiAbstractOptionNode_count(lua_State* L) {
  int SWIG_arg = 0;
  uiAbstractOptionNode_t *arg1 = (uiAbstractOptionNode_t *) 0 ;
  int result;
  
  SWIG_check_num_args("uiAbstractOptionNode_t::count",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("uiAbstractOptionNode_t::count",1,"uiAbstractOptionNode_t *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_uiAbstractOptionNode_t,0))){
    SWIG_fail_ptr("uiAbstractOptionNode_count",1,SWIGTYPE_p_uiAbstractOptionNode_t);
  }
  
  result = (int)uiAbstractOptionNode_t_count(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_uiAbstractOptionNode_cvar(lua_State* L) {
  int SWIG_arg = 0;
  uiAbstractOptionNode_t *arg1 = (uiAbstractOptionNode_t *) 0 ;
  char *result = 0 ;
  
  SWIG_check_num_args("uiAbstractOptionNode_t::cvar",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("uiAbstractOptionNode_t::cvar",1,"uiAbstractOptionNode_t *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_uiAbstractOptionNode_t,0))){
    SWIG_fail_ptr("uiAbstractOptionNode_cvar",1,SWIGTYPE_p_uiAbstractOptionNode_t);
  }
  
  result = (char *)uiAbstractOptionNode_t_cvar(arg1);
  lua_pushstring(L,(const char *)result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_uiAbstractOptionNode_current(lua_State* L) {
  int SWIG_arg = 0;
  uiAbstractOptionNode_t *arg1 = (uiAbstractOptionNode_t *) 0 ;
  int result;
  
  SWIG_check_num_args("uiAbstractOptionNode_t::current",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("uiAbstractOptionNode_t::current",1,"uiAbstractOptionNode_t *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_uiAbstractOptionNode_t,0))){
    SWIG_fail_ptr("uiAbstractOptionNode_current",1,SWIGTYPE_p_uiAbstractOptionNode_t);
  }
  
  result = (int)uiAbstractOptionNode_t_current(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_uiAbstractOptionNode_viewsize(lua_State* L) {
  int SWIG_arg = 0;
  uiAbstractOptionNode_t *arg1 = (uiAbstractOptionNode_t *) 0 ;
  int result;
  
  SWIG_check_num_args("uiAbstractOptionNode_t::viewsize",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("uiAbstractOptionNode_t::viewsize",1,"uiAbstractOptionNode_t *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_uiAbstractOptionNode_t,0))){
    SWIG_fail_ptr("uiAbstractOptionNode_viewsize",1,SWIGTYPE_p_uiAbstractOptionNode_t);
  }
  
  result = (int)uiAbstractOptionNode_t_viewsize(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_uiAbstractOptionNode_fullsize(lua_State* L) {
  int SWIG_arg = 0;
  uiAbstractOptionNode_t *arg1 = (uiAbstractOptionNode_t *) 0 ;
  int result;
  
  SWIG_check_num_args("uiAbstractOptionNode_t::fullsize",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("uiAbstractOptionNode_t::fullsize",1,"uiAbstractOptionNode_t *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_uiAbstractOptionNode_t,0))){
    SWIG_fail_ptr("uiAbstractOptionNode_fullsize",1,SWIGTYPE_p_uiAbstractOptionNode_t);
  }
  
  result = (int)uiAbstractOptionNode_t_fullsize(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_uiAbstractOptionNode_set_dataid(lua_State* L) {
  int SWIG_arg = 0;
  uiAbstractOptionNode_t *arg1 = (uiAbstractOptionNode_t *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("uiAbstractOptionNode_t::set_dataid",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("uiAbstractOptionNode_t::set_dataid",1,"uiAbstractOptionNode_t *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("uiAbstractOptionNode_t::set_dataid",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_uiAbstractOptionNode_t,0))){
    SWIG_fail_ptr("uiAbstractOptionNode_set_dataid",1,SWIGTYPE_p_uiAbstractOptionNode_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  uiAbstractOptionNode_t_set_dataid(arg1,arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_uiAbstractOptionNode_set_cvar(lua_State* L) {
  int SWIG_arg = 0;
  uiAbstractOptionNode_t *arg1 = (uiAbstractOptionNode_t *) 0 ;
  char *arg2 = (char *) 0 ;
  
  SWIG_check_num_args("uiAbstractOptionNode_t::set_cvar",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("uiAbstractOptionNode_t::set_cvar",1,"uiAbstractOptionNode_t *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("uiAbstractOptionNode_t::set_cvar",2,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_uiAbstractOptionNode_t,0))){
    SWIG_fail_ptr("uiAbstractOptionNode_set_cvar",1,SWIGTYPE_p_uiAbstractOptionNode_t);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  uiAbstractOptionNode_t_set_cvar(arg1,(char const *)arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_uiAbstractOptionNode_set_background(lua_State* L) {
  int SWIG_arg = 0;
  uiAbstractOptionNode_t *arg1 = (uiAbstractOptionNode_t *) 0 ;
  char *arg2 = (char *) 0 ;
  
  SWIG_check_num_args("uiAbstractOptionNode_t::set_background",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("uiAbstractOptionNode_t::set_background",1,"uiAbstractOptionNode_t *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("uiAbstractOptionNode_t::set_background",2,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_uiAbstractOptionNode_t,0))){
    SWIG_fail_ptr("uiAbstractOptionNode_set_background",1,SWIGTYPE_p_uiAbstractOptionNode_t);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  uiAbstractOptionNode_t_set_background(arg1,(char const *)arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_uiAbstractOptionNode_set_current(lua_State* L) {
  int SWIG_arg = 0;
  uiAbstractOptionNode_t *arg1 = (uiAbstractOptionNode_t *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("uiAbstractOptionNode_t::set_current",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("uiAbstractOptionNode_t::set_current",1,"uiAbstractOptionNode_t *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("uiAbstractOptionNode_t::set_current",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_uiAbstractOptionNode_t,0))){
    SWIG_fail_ptr("uiAbstractOptionNode_set_current",1,SWIGTYPE_p_uiAbstractOptionNode_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  uiAbstractOptionNode_t_set_current(arg1,arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_uiAbstractOptionNode_set_viewsize(lua_State* L) {
  int SWIG_arg = 0;
  uiAbstractOptionNode_t *arg1 = (uiAbstractOptionNode_t *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("uiAbstractOptionNode_t::set_viewsize",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("uiAbstractOptionNode_t::set_viewsize",1,"uiAbstractOptionNode_t *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("uiAbstractOptionNode_t::set_viewsize",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_uiAbstractOptionNode_t,0))){
    SWIG_fail_ptr("uiAbstractOptionNode_set_viewsize",1,SWIGTYPE_p_uiAbstractOptionNode_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  uiAbstractOptionNode_t_set_viewsize(arg1,arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_uiAbstractOptionNode_set_fullsize(lua_State* L) {
  int SWIG_arg = 0;
  uiAbstractOptionNode_t *arg1 = (uiAbstractOptionNode_t *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("uiAbstractOptionNode_t::set_fullsize",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("uiAbstractOptionNode_t::set_fullsize",1,"uiAbstractOptionNode_t *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("uiAbstractOptionNode_t::set_fullsize",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_uiAbstractOptionNode_t,0))){
    SWIG_fail_ptr("uiAbstractOptionNode_set_fullsize",1,SWIGTYPE_p_uiAbstractOptionNode_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  uiAbstractOptionNode_t_set_fullsize(arg1,arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_uiAbstractOptionNode_on_viewchange_set(lua_State* L) {
  int SWIG_arg = 0;
  uiAbstractOptionNode_t *arg1 = (uiAbstractOptionNode_t *) 0 ;
  LUA_EVENT arg2 ;
  
  SWIG_check_num_args("uiAbstractOptionNode_t::lua_onViewChange",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("uiAbstractOptionNode_t::lua_onViewChange",1,"uiAbstractOptionNode_t *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_uiAbstractOptionNode_t,0))){
    SWIG_fail_ptr("uiAbstractOptionNode_on_viewchange_set",1,SWIGTYPE_p_uiAbstractOptionNode_t);
  }
  
  {
    arg2 = (LUA_EVENT)luaL_ref (L, LUA_REGISTRYINDEX);
  }
  uiAbstractOptionNode_t_lua_onViewChange_set(arg1,arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_uiAbstractOptionNode_on_viewchange_get(lua_State* L) {
  int SWIG_arg = 0;
  uiAbstractOptionNode_t *arg1 = (uiAbstractOptionNode_t *) 0 ;
  LUA_EVENT result;
  
  SWIG_check_num_args("uiAbstractOptionNode_t::lua_onViewChange",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("uiAbstractOptionNode_t::lua_onViewChange",1,"uiAbstractOptionNode_t *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_uiAbstractOptionNode_t,0))){
    SWIG_fail_ptr("uiAbstractOptionNode_on_viewchange_get",1,SWIGTYPE_p_uiAbstractOptionNode_t);
  }
  
  result = uiAbstractOptionNode_t_lua_onViewChange_get(arg1);
  {
    LUA_EVENT * resultptr = new LUA_EVENT((const LUA_EVENT &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_LUA_EVENT,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_uiAbstractOptionNode(lua_State* L) {
  int SWIG_arg = 0;
  uiAbstractOptionNode_t *result = 0 ;
  
  SWIG_check_num_args("uiAbstractOptionNode_t::uiAbstractOptionNode_t",0,0)
  result = (uiAbstractOptionNode_t *)new uiAbstractOptionNode_t();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_uiAbstractOptionNode_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_uiAbstractOptionNode(void *obj) {
uiAbstractOptionNode_t *arg1 = (uiAbstractOptionNode_t *) obj;
delete arg1;
}
static int _proxy__wrap_new_uiAbstractOptionNode(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_uiAbstractOptionNode);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_uiAbstractOptionNode_attributes[] = {
    { "on_viewchange", _wrap_uiAbstractOptionNode_on_viewchange_get, _wrap_uiAbstractOptionNode_on_viewchange_set },
    {0,0,0}
};
static swig_lua_method swig_uiAbstractOptionNode_methods[]= {
    { "dataid", _wrap_uiAbstractOptionNode_dataid},
    { "count", _wrap_uiAbstractOptionNode_count},
    { "cvar", _wrap_uiAbstractOptionNode_cvar},
    { "current", _wrap_uiAbstractOptionNode_current},
    { "viewsize", _wrap_uiAbstractOptionNode_viewsize},
    { "fullsize", _wrap_uiAbstractOptionNode_fullsize},
    { "set_dataid", _wrap_uiAbstractOptionNode_set_dataid},
    { "set_cvar", _wrap_uiAbstractOptionNode_set_cvar},
    { "set_background", _wrap_uiAbstractOptionNode_set_background},
    { "set_current", _wrap_uiAbstractOptionNode_set_current},
    { "set_viewsize", _wrap_uiAbstractOptionNode_set_viewsize},
    { "set_fullsize", _wrap_uiAbstractOptionNode_set_fullsize},
    {0,0}
};
static swig_lua_method swig_uiAbstractOptionNode_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_uiAbstractOptionNode_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_uiAbstractOptionNode_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_uiAbstractOptionNode_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_uiAbstractOptionNode_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_uiAbstractOptionNode_Sf_SwigStatic = {
    "uiAbstractOptionNode",
    swig_uiAbstractOptionNode_Sf_SwigStatic_methods,
    swig_uiAbstractOptionNode_Sf_SwigStatic_attributes,
    swig_uiAbstractOptionNode_Sf_SwigStatic_constants,
    swig_uiAbstractOptionNode_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_uiAbstractOptionNode_bases[] = {0,0};
static const char *swig_uiAbstractOptionNode_base_names[] = {"uiNode_t *",0};
static swig_lua_class _wrap_class_uiAbstractOptionNode = { "uiAbstractOptionNode", "uiAbstractOptionNode", &SWIGTYPE_p_uiAbstractOptionNode_t,_proxy__wrap_new_uiAbstractOptionNode, swig_delete_uiAbstractOptionNode, swig_uiAbstractOptionNode_methods, swig_uiAbstractOptionNode_attributes, &swig_uiAbstractOptionNode_Sf_SwigStatic, swig_uiAbstractOptionNode_meta, swig_uiAbstractOptionNode_bases, swig_uiAbstractOptionNode_base_names };

static int _wrap_uiAbstractScrollableNode_viewpos(lua_State* L) {
  int SWIG_arg = 0;
  uiAbstractScrollableNode_t *arg1 = (uiAbstractScrollableNode_t *) 0 ;
  int result;
  
  SWIG_check_num_args("uiAbstractScrollableNode_t::viewpos",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("uiAbstractScrollableNode_t::viewpos",1,"uiAbstractScrollableNode_t *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_uiAbstractScrollableNode_t,0))){
    SWIG_fail_ptr("uiAbstractScrollableNode_viewpos",1,SWIGTYPE_p_uiAbstractScrollableNode_t);
  }
  
  result = (int)uiAbstractScrollableNode_t_viewpos(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_uiAbstractScrollableNode_viewsize(lua_State* L) {
  int SWIG_arg = 0;
  uiAbstractScrollableNode_t *arg1 = (uiAbstractScrollableNode_t *) 0 ;
  int result;
  
  SWIG_check_num_args("uiAbstractScrollableNode_t::viewsize",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("uiAbstractScrollableNode_t::viewsize",1,"uiAbstractScrollableNode_t *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_uiAbstractScrollableNode_t,0))){
    SWIG_fail_ptr("uiAbstractScrollableNode_viewsize",1,SWIGTYPE_p_uiAbstractScrollableNode_t);
  }
  
  result = (int)uiAbstractScrollableNode_t_viewsize(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_uiAbstractScrollableNode_fullsize(lua_State* L) {
  int SWIG_arg = 0;
  uiAbstractScrollableNode_t *arg1 = (uiAbstractScrollableNode_t *) 0 ;
  int result;
  
  SWIG_check_num_args("uiAbstractScrollableNode_t::fullsize",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("uiAbstractScrollableNode_t::fullsize",1,"uiAbstractScrollableNode_t *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_uiAbstractScrollableNode_t,0))){
    SWIG_fail_ptr("uiAbstractScrollableNode_fullsize",1,SWIGTYPE_p_uiAbstractScrollableNode_t);
  }
  
  result = (int)uiAbstractScrollableNode_t_fullsize(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_uiAbstractScrollableNode_pageup(lua_State* L) {
  int SWIG_arg = 0;
  uiAbstractScrollableNode_t *arg1 = (uiAbstractScrollableNode_t *) 0 ;
  
  SWIG_check_num_args("uiAbstractScrollableNode_t::pageup",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("uiAbstractScrollableNode_t::pageup",1,"uiAbstractScrollableNode_t *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_uiAbstractScrollableNode_t,0))){
    SWIG_fail_ptr("uiAbstractScrollableNode_pageup",1,SWIGTYPE_p_uiAbstractScrollableNode_t);
  }
  
  uiAbstractScrollableNode_t_pageup(arg1);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_uiAbstractScrollableNode_pagedown(lua_State* L) {
  int SWIG_arg = 0;
  uiAbstractScrollableNode_t *arg1 = (uiAbstractScrollableNode_t *) 0 ;
  
  SWIG_check_num_args("uiAbstractScrollableNode_t::pagedown",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("uiAbstractScrollableNode_t::pagedown",1,"uiAbstractScrollableNode_t *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_uiAbstractScrollableNode_t,0))){
    SWIG_fail_ptr("uiAbstractScrollableNode_pagedown",1,SWIGTYPE_p_uiAbstractScrollableNode_t);
  }
  
  uiAbstractScrollableNode_t_pagedown(arg1);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_uiAbstractScrollableNode_moveup(lua_State* L) {
  int SWIG_arg = 0;
  uiAbstractScrollableNode_t *arg1 = (uiAbstractScrollableNode_t *) 0 ;
  
  SWIG_check_num_args("uiAbstractScrollableNode_t::moveup",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("uiAbstractScrollableNode_t::moveup",1,"uiAbstractScrollableNode_t *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_uiAbstractScrollableNode_t,0))){
    SWIG_fail_ptr("uiAbstractScrollableNode_moveup",1,SWIGTYPE_p_uiAbstractScrollableNode_t);
  }
  
  uiAbstractScrollableNode_t_moveup(arg1);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_uiAbstractScrollableNode_movedown(lua_State* L) {
  int SWIG_arg = 0;
  uiAbstractScrollableNode_t *arg1 = (uiAbstractScrollableNode_t *) 0 ;
  
  SWIG_check_num_args("uiAbstractScrollableNode_t::movedown",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("uiAbstractScrollableNode_t::movedown",1,"uiAbstractScrollableNode_t *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_uiAbstractScrollableNode_t,0))){
    SWIG_fail_ptr("uiAbstractScrollableNode_movedown",1,SWIGTYPE_p_uiAbstractScrollableNode_t);
  }
  
  uiAbstractScrollableNode_t_movedown(arg1);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_uiAbstractScrollableNode_movehome(lua_State* L) {
  int SWIG_arg = 0;
  uiAbstractScrollableNode_t *arg1 = (uiAbstractScrollableNode_t *) 0 ;
  
  SWIG_check_num_args("uiAbstractScrollableNode_t::movehome",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("uiAbstractScrollableNode_t::movehome",1,"uiAbstractScrollableNode_t *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_uiAbstractScrollableNode_t,0))){
    SWIG_fail_ptr("uiAbstractScrollableNode_movehome",1,SWIGTYPE_p_uiAbstractScrollableNode_t);
  }
  
  uiAbstractScrollableNode_t_movehome(arg1);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_uiAbstractScrollableNode_moveend(lua_State* L) {
  int SWIG_arg = 0;
  uiAbstractScrollableNode_t *arg1 = (uiAbstractScrollableNode_t *) 0 ;
  
  SWIG_check_num_args("uiAbstractScrollableNode_t::moveend",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("uiAbstractScrollableNode_t::moveend",1,"uiAbstractScrollableNode_t *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_uiAbstractScrollableNode_t,0))){
    SWIG_fail_ptr("uiAbstractScrollableNode_moveend",1,SWIGTYPE_p_uiAbstractScrollableNode_t);
  }
  
  uiAbstractScrollableNode_t_moveend(arg1);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_uiAbstractScrollableNode_set_viewpos(lua_State* L) {
  int SWIG_arg = 0;
  uiAbstractScrollableNode_t *arg1 = (uiAbstractScrollableNode_t *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("uiAbstractScrollableNode_t::set_viewpos",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("uiAbstractScrollableNode_t::set_viewpos",1,"uiAbstractScrollableNode_t *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("uiAbstractScrollableNode_t::set_viewpos",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_uiAbstractScrollableNode_t,0))){
    SWIG_fail_ptr("uiAbstractScrollableNode_set_viewpos",1,SWIGTYPE_p_uiAbstractScrollableNode_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  uiAbstractScrollableNode_t_set_viewpos(arg1,arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_uiAbstractScrollableNode_set_viewsize(lua_State* L) {
  int SWIG_arg = 0;
  uiAbstractScrollableNode_t *arg1 = (uiAbstractScrollableNode_t *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("uiAbstractScrollableNode_t::set_viewsize",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("uiAbstractScrollableNode_t::set_viewsize",1,"uiAbstractScrollableNode_t *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("uiAbstractScrollableNode_t::set_viewsize",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_uiAbstractScrollableNode_t,0))){
    SWIG_fail_ptr("uiAbstractScrollableNode_set_viewsize",1,SWIGTYPE_p_uiAbstractScrollableNode_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  uiAbstractScrollableNode_t_set_viewsize(arg1,arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_uiAbstractScrollableNode_set_fullsize(lua_State* L) {
  int SWIG_arg = 0;
  uiAbstractScrollableNode_t *arg1 = (uiAbstractScrollableNode_t *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("uiAbstractScrollableNode_t::set_fullsize",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("uiAbstractScrollableNode_t::set_fullsize",1,"uiAbstractScrollableNode_t *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("uiAbstractScrollableNode_t::set_fullsize",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_uiAbstractScrollableNode_t,0))){
    SWIG_fail_ptr("uiAbstractScrollableNode_set_fullsize",1,SWIGTYPE_p_uiAbstractScrollableNode_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  uiAbstractScrollableNode_t_set_fullsize(arg1,arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_uiAbstractScrollableNode_on_viewchange_set(lua_State* L) {
  int SWIG_arg = 0;
  uiAbstractScrollableNode_t *arg1 = (uiAbstractScrollableNode_t *) 0 ;
  LUA_EVENT arg2 ;
  
  SWIG_check_num_args("uiAbstractScrollableNode_t::lua_onViewChange",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("uiAbstractScrollableNode_t::lua_onViewChange",1,"uiAbstractScrollableNode_t *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_uiAbstractScrollableNode_t,0))){
    SWIG_fail_ptr("uiAbstractScrollableNode_on_viewchange_set",1,SWIGTYPE_p_uiAbstractScrollableNode_t);
  }
  
  {
    arg2 = (LUA_EVENT)luaL_ref (L, LUA_REGISTRYINDEX);
  }
  uiAbstractScrollableNode_t_lua_onViewChange_set(arg1,arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_uiAbstractScrollableNode_on_viewchange_get(lua_State* L) {
  int SWIG_arg = 0;
  uiAbstractScrollableNode_t *arg1 = (uiAbstractScrollableNode_t *) 0 ;
  LUA_EVENT result;
  
  SWIG_check_num_args("uiAbstractScrollableNode_t::lua_onViewChange",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("uiAbstractScrollableNode_t::lua_onViewChange",1,"uiAbstractScrollableNode_t *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_uiAbstractScrollableNode_t,0))){
    SWIG_fail_ptr("uiAbstractScrollableNode_on_viewchange_get",1,SWIGTYPE_p_uiAbstractScrollableNode_t);
  }
  
  result = uiAbstractScrollableNode_t_lua_onViewChange_get(arg1);
  {
    LUA_EVENT * resultptr = new LUA_EVENT((const LUA_EVENT &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_LUA_EVENT,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_uiAbstractScrollableNode(lua_State* L) {
  int SWIG_arg = 0;
  uiAbstractScrollableNode_t *result = 0 ;
  
  SWIG_check_num_args("uiAbstractScrollableNode_t::uiAbstractScrollableNode_t",0,0)
  result = (uiAbstractScrollableNode_t *)new uiAbstractScrollableNode_t();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_uiAbstractScrollableNode_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_uiAbstractScrollableNode(void *obj) {
uiAbstractScrollableNode_t *arg1 = (uiAbstractScrollableNode_t *) obj;
delete arg1;
}
static int _proxy__wrap_new_uiAbstractScrollableNode(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_uiAbstractScrollableNode);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_uiAbstractScrollableNode_attributes[] = {
    { "on_viewchange", _wrap_uiAbstractScrollableNode_on_viewchange_get, _wrap_uiAbstractScrollableNode_on_viewchange_set },
    {0,0,0}
};
static swig_lua_method swig_uiAbstractScrollableNode_methods[]= {
    { "viewpos", _wrap_uiAbstractScrollableNode_viewpos},
    { "viewsize", _wrap_uiAbstractScrollableNode_viewsize},
    { "fullsize", _wrap_uiAbstractScrollableNode_fullsize},
    { "pageup", _wrap_uiAbstractScrollableNode_pageup},
    { "pagedown", _wrap_uiAbstractScrollableNode_pagedown},
    { "moveup", _wrap_uiAbstractScrollableNode_moveup},
    { "movedown", _wrap_uiAbstractScrollableNode_movedown},
    { "movehome", _wrap_uiAbstractScrollableNode_movehome},
    { "moveend", _wrap_uiAbstractScrollableNode_moveend},
    { "set_viewpos", _wrap_uiAbstractScrollableNode_set_viewpos},
    { "set_viewsize", _wrap_uiAbstractScrollableNode_set_viewsize},
    { "set_fullsize", _wrap_uiAbstractScrollableNode_set_fullsize},
    {0,0}
};
static swig_lua_method swig_uiAbstractScrollableNode_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_uiAbstractScrollableNode_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_uiAbstractScrollableNode_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_uiAbstractScrollableNode_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_uiAbstractScrollableNode_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_uiAbstractScrollableNode_Sf_SwigStatic = {
    "uiAbstractScrollableNode",
    swig_uiAbstractScrollableNode_Sf_SwigStatic_methods,
    swig_uiAbstractScrollableNode_Sf_SwigStatic_attributes,
    swig_uiAbstractScrollableNode_Sf_SwigStatic_constants,
    swig_uiAbstractScrollableNode_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_uiAbstractScrollableNode_bases[] = {0,0};
static const char *swig_uiAbstractScrollableNode_base_names[] = {"uiNode_t *",0};
static swig_lua_class _wrap_class_uiAbstractScrollableNode = { "uiAbstractScrollableNode", "uiAbstractScrollableNode", &SWIGTYPE_p_uiAbstractScrollableNode_t,_proxy__wrap_new_uiAbstractScrollableNode, swig_delete_uiAbstractScrollableNode, swig_uiAbstractScrollableNode_methods, swig_uiAbstractScrollableNode_attributes, &swig_uiAbstractScrollableNode_Sf_SwigStatic, swig_uiAbstractScrollableNode_meta, swig_uiAbstractScrollableNode_bases, swig_uiAbstractScrollableNode_base_names };

static int _wrap_uiAbstractScrollbarNode_is_autoshowscroll(lua_State* L) {
  int SWIG_arg = 0;
  uiAbstractScrollbarNode_t *arg1 = (uiAbstractScrollbarNode_t *) 0 ;
  bool result;
  
  SWIG_check_num_args("uiAbstractScrollbarNode_t::is_autoshowscroll",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("uiAbstractScrollbarNode_t::is_autoshowscroll",1,"uiAbstractScrollbarNode_t *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_uiAbstractScrollbarNode_t,0))){
    SWIG_fail_ptr("uiAbstractScrollbarNode_is_autoshowscroll",1,SWIGTYPE_p_uiAbstractScrollbarNode_t);
  }
  
  result = (bool)uiAbstractScrollbarNode_t_is_autoshowscroll(arg1);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_uiAbstractScrollbarNode_current(lua_State* L) {
  int SWIG_arg = 0;
  uiAbstractScrollbarNode_t *arg1 = (uiAbstractScrollbarNode_t *) 0 ;
  int result;
  
  SWIG_check_num_args("uiAbstractScrollbarNode_t::current",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("uiAbstractScrollbarNode_t::current",1,"uiAbstractScrollbarNode_t *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_uiAbstractScrollbarNode_t,0))){
    SWIG_fail_ptr("uiAbstractScrollbarNode_current",1,SWIGTYPE_p_uiAbstractScrollbarNode_t);
  }
  
  result = (int)uiAbstractScrollbarNode_t_current(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_uiAbstractScrollbarNode_viewsize(lua_State* L) {
  int SWIG_arg = 0;
  uiAbstractScrollbarNode_t *arg1 = (uiAbstractScrollbarNode_t *) 0 ;
  int result;
  
  SWIG_check_num_args("uiAbstractScrollbarNode_t::viewsize",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("uiAbstractScrollbarNode_t::viewsize",1,"uiAbstractScrollbarNode_t *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_uiAbstractScrollbarNode_t,0))){
    SWIG_fail_ptr("uiAbstractScrollbarNode_viewsize",1,SWIGTYPE_p_uiAbstractScrollbarNode_t);
  }
  
  result = (int)uiAbstractScrollbarNode_t_viewsize(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_uiAbstractScrollbarNode_fullsize(lua_State* L) {
  int SWIG_arg = 0;
  uiAbstractScrollbarNode_t *arg1 = (uiAbstractScrollbarNode_t *) 0 ;
  int result;
  
  SWIG_check_num_args("uiAbstractScrollbarNode_t::fullsize",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("uiAbstractScrollbarNode_t::fullsize",1,"uiAbstractScrollbarNode_t *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_uiAbstractScrollbarNode_t,0))){
    SWIG_fail_ptr("uiAbstractScrollbarNode_fullsize",1,SWIGTYPE_p_uiAbstractScrollbarNode_t);
  }
  
  result = (int)uiAbstractScrollbarNode_t_fullsize(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_uiAbstractScrollbarNode_set_autoshowscroll(lua_State* L) {
  int SWIG_arg = 0;
  uiAbstractScrollbarNode_t *arg1 = (uiAbstractScrollbarNode_t *) 0 ;
  bool arg2 ;
  
  SWIG_check_num_args("uiAbstractScrollbarNode_t::set_autoshowscroll",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("uiAbstractScrollbarNode_t::set_autoshowscroll",1,"uiAbstractScrollbarNode_t *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("uiAbstractScrollbarNode_t::set_autoshowscroll",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_uiAbstractScrollbarNode_t,0))){
    SWIG_fail_ptr("uiAbstractScrollbarNode_set_autoshowscroll",1,SWIGTYPE_p_uiAbstractScrollbarNode_t);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  uiAbstractScrollbarNode_t_set_autoshowscroll(arg1,arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_uiAbstractScrollbarNode_set_current(lua_State* L) {
  int SWIG_arg = 0;
  uiAbstractScrollbarNode_t *arg1 = (uiAbstractScrollbarNode_t *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("uiAbstractScrollbarNode_t::set_current",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("uiAbstractScrollbarNode_t::set_current",1,"uiAbstractScrollbarNode_t *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("uiAbstractScrollbarNode_t::set_current",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_uiAbstractScrollbarNode_t,0))){
    SWIG_fail_ptr("uiAbstractScrollbarNode_set_current",1,SWIGTYPE_p_uiAbstractScrollbarNode_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  uiAbstractScrollbarNode_t_set_current(arg1,arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_uiAbstractScrollbarNode_set_viewsize(lua_State* L) {
  int SWIG_arg = 0;
  uiAbstractScrollbarNode_t *arg1 = (uiAbstractScrollbarNode_t *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("uiAbstractScrollbarNode_t::set_viewsize",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("uiAbstractScrollbarNode_t::set_viewsize",1,"uiAbstractScrollbarNode_t *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("uiAbstractScrollbarNode_t::set_viewsize",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_uiAbstractScrollbarNode_t,0))){
    SWIG_fail_ptr("uiAbstractScrollbarNode_set_viewsize",1,SWIGTYPE_p_uiAbstractScrollbarNode_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  uiAbstractScrollbarNode_t_set_viewsize(arg1,arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_uiAbstractScrollbarNode_set_fullsize(lua_State* L) {
  int SWIG_arg = 0;
  uiAbstractScrollbarNode_t *arg1 = (uiAbstractScrollbarNode_t *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("uiAbstractScrollbarNode_t::set_fullsize",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("uiAbstractScrollbarNode_t::set_fullsize",1,"uiAbstractScrollbarNode_t *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("uiAbstractScrollbarNode_t::set_fullsize",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_uiAbstractScrollbarNode_t,0))){
    SWIG_fail_ptr("uiAbstractScrollbarNode_set_fullsize",1,SWIGTYPE_p_uiAbstractScrollbarNode_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  uiAbstractScrollbarNode_t_set_fullsize(arg1,arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_uiAbstractScrollbarNode(lua_State* L) {
  int SWIG_arg = 0;
  uiAbstractScrollbarNode_t *result = 0 ;
  
  SWIG_check_num_args("uiAbstractScrollbarNode_t::uiAbstractScrollbarNode_t",0,0)
  result = (uiAbstractScrollbarNode_t *)new uiAbstractScrollbarNode_t();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_uiAbstractScrollbarNode_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_uiAbstractScrollbarNode(void *obj) {
uiAbstractScrollbarNode_t *arg1 = (uiAbstractScrollbarNode_t *) obj;
delete arg1;
}
static int _proxy__wrap_new_uiAbstractScrollbarNode(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_uiAbstractScrollbarNode);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_uiAbstractScrollbarNode_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_uiAbstractScrollbarNode_methods[]= {
    { "is_autoshowscroll", _wrap_uiAbstractScrollbarNode_is_autoshowscroll},
    { "current", _wrap_uiAbstractScrollbarNode_current},
    { "viewsize", _wrap_uiAbstractScrollbarNode_viewsize},
    { "fullsize", _wrap_uiAbstractScrollbarNode_fullsize},
    { "set_autoshowscroll", _wrap_uiAbstractScrollbarNode_set_autoshowscroll},
    { "set_current", _wrap_uiAbstractScrollbarNode_set_current},
    { "set_viewsize", _wrap_uiAbstractScrollbarNode_set_viewsize},
    { "set_fullsize", _wrap_uiAbstractScrollbarNode_set_fullsize},
    {0,0}
};
static swig_lua_method swig_uiAbstractScrollbarNode_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_uiAbstractScrollbarNode_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_uiAbstractScrollbarNode_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_uiAbstractScrollbarNode_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_uiAbstractScrollbarNode_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_uiAbstractScrollbarNode_Sf_SwigStatic = {
    "uiAbstractScrollbarNode",
    swig_uiAbstractScrollbarNode_Sf_SwigStatic_methods,
    swig_uiAbstractScrollbarNode_Sf_SwigStatic_attributes,
    swig_uiAbstractScrollbarNode_Sf_SwigStatic_constants,
    swig_uiAbstractScrollbarNode_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_uiAbstractScrollbarNode_bases[] = {0,0};
static const char *swig_uiAbstractScrollbarNode_base_names[] = {"uiNode_t *",0};
static swig_lua_class _wrap_class_uiAbstractScrollbarNode = { "uiAbstractScrollbarNode", "uiAbstractScrollbarNode", &SWIGTYPE_p_uiAbstractScrollbarNode_t,_proxy__wrap_new_uiAbstractScrollbarNode, swig_delete_uiAbstractScrollbarNode, swig_uiAbstractScrollbarNode_methods, swig_uiAbstractScrollbarNode_attributes, &swig_uiAbstractScrollbarNode_Sf_SwigStatic, swig_uiAbstractScrollbarNode_meta, swig_uiAbstractScrollbarNode_bases, swig_uiAbstractScrollbarNode_base_names };

static int _wrap_uiAbstractValueNode_min(lua_State* L) {
  int SWIG_arg = 0;
  uiAbstractValueNode_t *arg1 = (uiAbstractValueNode_t *) 0 ;
  float result;
  
  SWIG_check_num_args("uiAbstractValueNode_t::min",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("uiAbstractValueNode_t::min",1,"uiAbstractValueNode_t *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_uiAbstractValueNode_t,0))){
    SWIG_fail_ptr("uiAbstractValueNode_min",1,SWIGTYPE_p_uiAbstractValueNode_t);
  }
  
  result = (float)uiAbstractValueNode_t_min(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_uiAbstractValueNode_max(lua_State* L) {
  int SWIG_arg = 0;
  uiAbstractValueNode_t *arg1 = (uiAbstractValueNode_t *) 0 ;
  float result;
  
  SWIG_check_num_args("uiAbstractValueNode_t::max",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("uiAbstractValueNode_t::max",1,"uiAbstractValueNode_t *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_uiAbstractValueNode_t,0))){
    SWIG_fail_ptr("uiAbstractValueNode_max",1,SWIGTYPE_p_uiAbstractValueNode_t);
  }
  
  result = (float)uiAbstractValueNode_t_max(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_uiAbstractValueNode_value(lua_State* L) {
  int SWIG_arg = 0;
  uiAbstractValueNode_t *arg1 = (uiAbstractValueNode_t *) 0 ;
  float result;
  
  SWIG_check_num_args("uiAbstractValueNode_t::value",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("uiAbstractValueNode_t::value",1,"uiAbstractValueNode_t *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_uiAbstractValueNode_t,0))){
    SWIG_fail_ptr("uiAbstractValueNode_value",1,SWIGTYPE_p_uiAbstractValueNode_t);
  }
  
  result = (float)uiAbstractValueNode_t_value(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_uiAbstractValueNode_delta(lua_State* L) {
  int SWIG_arg = 0;
  uiAbstractValueNode_t *arg1 = (uiAbstractValueNode_t *) 0 ;
  float result;
  
  SWIG_check_num_args("uiAbstractValueNode_t::delta",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("uiAbstractValueNode_t::delta",1,"uiAbstractValueNode_t *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_uiAbstractValueNode_t,0))){
    SWIG_fail_ptr("uiAbstractValueNode_delta",1,SWIGTYPE_p_uiAbstractValueNode_t);
  }
  
  result = (float)uiAbstractValueNode_t_delta(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_uiAbstractValueNode_lastdiff(lua_State* L) {
  int SWIG_arg = 0;
  uiAbstractValueNode_t *arg1 = (uiAbstractValueNode_t *) 0 ;
  float result;
  
  SWIG_check_num_args("uiAbstractValueNode_t::lastdiff",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("uiAbstractValueNode_t::lastdiff",1,"uiAbstractValueNode_t *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_uiAbstractValueNode_t,0))){
    SWIG_fail_ptr("uiAbstractValueNode_lastdiff",1,SWIGTYPE_p_uiAbstractValueNode_t);
  }
  
  result = (float)uiAbstractValueNode_t_lastdiff(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_uiAbstractValueNode_shiftmultiplier(lua_State* L) {
  int SWIG_arg = 0;
  uiAbstractValueNode_t *arg1 = (uiAbstractValueNode_t *) 0 ;
  float result;
  
  SWIG_check_num_args("uiAbstractValueNode_t::shiftmultiplier",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("uiAbstractValueNode_t::shiftmultiplier",1,"uiAbstractValueNode_t *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_uiAbstractValueNode_t,0))){
    SWIG_fail_ptr("uiAbstractValueNode_shiftmultiplier",1,SWIGTYPE_p_uiAbstractValueNode_t);
  }
  
  result = (float)uiAbstractValueNode_t_shiftmultiplier(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_uiAbstractValueNode_inc_value(lua_State* L) {
  int SWIG_arg = 0;
  uiAbstractValueNode_t *arg1 = (uiAbstractValueNode_t *) 0 ;
  
  SWIG_check_num_args("uiAbstractValueNode_t::inc_value",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("uiAbstractValueNode_t::inc_value",1,"uiAbstractValueNode_t *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_uiAbstractValueNode_t,0))){
    SWIG_fail_ptr("uiAbstractValueNode_inc_value",1,SWIGTYPE_p_uiAbstractValueNode_t);
  }
  
  uiAbstractValueNode_t_inc_value(arg1);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_uiAbstractValueNode_dec_value(lua_State* L) {
  int SWIG_arg = 0;
  uiAbstractValueNode_t *arg1 = (uiAbstractValueNode_t *) 0 ;
  
  SWIG_check_num_args("uiAbstractValueNode_t::dec_value",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("uiAbstractValueNode_t::dec_value",1,"uiAbstractValueNode_t *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_uiAbstractValueNode_t,0))){
    SWIG_fail_ptr("uiAbstractValueNode_dec_value",1,SWIGTYPE_p_uiAbstractValueNode_t);
  }
  
  uiAbstractValueNode_t_dec_value(arg1);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_uiAbstractValueNode_set_range__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  uiAbstractValueNode_t *arg1 = (uiAbstractValueNode_t *) 0 ;
  float arg2 ;
  float arg3 ;
  
  SWIG_check_num_args("uiAbstractValueNode_t::set_range",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("uiAbstractValueNode_t::set_range",1,"uiAbstractValueNode_t *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("uiAbstractValueNode_t::set_range",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("uiAbstractValueNode_t::set_range",3,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_uiAbstractValueNode_t,0))){
    SWIG_fail_ptr("uiAbstractValueNode_set_range",1,SWIGTYPE_p_uiAbstractValueNode_t);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3);
  uiAbstractValueNode_t_set_range__SWIG_0(arg1,arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_uiAbstractValueNode_set_range__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  uiAbstractValueNode_t *arg1 = (uiAbstractValueNode_t *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  
  SWIG_check_num_args("uiAbstractValueNode_t::set_range",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("uiAbstractValueNode_t::set_range",1,"uiAbstractValueNode_t *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("uiAbstractValueNode_t::set_range",2,"char const *");
  if(!SWIG_lua_isnilstring(L,3)) SWIG_fail_arg("uiAbstractValueNode_t::set_range",3,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_uiAbstractValueNode_t,0))){
    SWIG_fail_ptr("uiAbstractValueNode_set_range",1,SWIGTYPE_p_uiAbstractValueNode_t);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  arg3 = (char *)lua_tostring(L, 3);
  uiAbstractValueNode_t_set_range__SWIG_1(arg1,(char const *)arg2,(char const *)arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_uiAbstractValueNode_set_range(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_uiAbstractValueNode_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_uiAbstractValueNode_set_range__SWIG_0(L);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_uiAbstractValueNode_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = SWIG_lua_isnilstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = SWIG_lua_isnilstring(L,argv[2]);
        }
        if (_v) {
          return _wrap_uiAbstractValueNode_set_range__SWIG_1(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'uiAbstractValueNode_set_range'\n"
    "  Possible C/C++ prototypes are:\n"
    "    uiAbstractValueNode_t::set_range(float,float)\n"
    "    uiAbstractValueNode_t::set_range(char const *,char const *)\n");
  lua_error(L);return 0;
}


static int _wrap_uiAbstractValueNode_set_min__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  uiAbstractValueNode_t *arg1 = (uiAbstractValueNode_t *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("uiAbstractValueNode_t::set_min",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("uiAbstractValueNode_t::set_min",1,"uiAbstractValueNode_t *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("uiAbstractValueNode_t::set_min",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_uiAbstractValueNode_t,0))){
    SWIG_fail_ptr("uiAbstractValueNode_set_min",1,SWIGTYPE_p_uiAbstractValueNode_t);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  uiAbstractValueNode_t_set_min__SWIG_0(arg1,arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_uiAbstractValueNode_set_max__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  uiAbstractValueNode_t *arg1 = (uiAbstractValueNode_t *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("uiAbstractValueNode_t::set_max",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("uiAbstractValueNode_t::set_max",1,"uiAbstractValueNode_t *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("uiAbstractValueNode_t::set_max",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_uiAbstractValueNode_t,0))){
    SWIG_fail_ptr("uiAbstractValueNode_set_max",1,SWIGTYPE_p_uiAbstractValueNode_t);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  uiAbstractValueNode_t_set_max__SWIG_0(arg1,arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_uiAbstractValueNode_set_value__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  uiAbstractValueNode_t *arg1 = (uiAbstractValueNode_t *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("uiAbstractValueNode_t::set_value",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("uiAbstractValueNode_t::set_value",1,"uiAbstractValueNode_t *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("uiAbstractValueNode_t::set_value",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_uiAbstractValueNode_t,0))){
    SWIG_fail_ptr("uiAbstractValueNode_set_value",1,SWIGTYPE_p_uiAbstractValueNode_t);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  uiAbstractValueNode_t_set_value__SWIG_0(arg1,arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_uiAbstractValueNode_set_min__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  uiAbstractValueNode_t *arg1 = (uiAbstractValueNode_t *) 0 ;
  char *arg2 = (char *) 0 ;
  
  SWIG_check_num_args("uiAbstractValueNode_t::set_min",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("uiAbstractValueNode_t::set_min",1,"uiAbstractValueNode_t *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("uiAbstractValueNode_t::set_min",2,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_uiAbstractValueNode_t,0))){
    SWIG_fail_ptr("uiAbstractValueNode_set_min",1,SWIGTYPE_p_uiAbstractValueNode_t);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  uiAbstractValueNode_t_set_min__SWIG_1(arg1,(char const *)arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_uiAbstractValueNode_set_min(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_uiAbstractValueNode_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_uiAbstractValueNode_set_min__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_uiAbstractValueNode_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = SWIG_lua_isnilstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_uiAbstractValueNode_set_min__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'uiAbstractValueNode_set_min'\n"
    "  Possible C/C++ prototypes are:\n"
    "    uiAbstractValueNode_t::set_min(float)\n"
    "    uiAbstractValueNode_t::set_min(char const *)\n");
  lua_error(L);return 0;
}


static int _wrap_uiAbstractValueNode_set_max__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  uiAbstractValueNode_t *arg1 = (uiAbstractValueNode_t *) 0 ;
  char *arg2 = (char *) 0 ;
  
  SWIG_check_num_args("uiAbstractValueNode_t::set_max",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("uiAbstractValueNode_t::set_max",1,"uiAbstractValueNode_t *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("uiAbstractValueNode_t::set_max",2,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_uiAbstractValueNode_t,0))){
    SWIG_fail_ptr("uiAbstractValueNode_set_max",1,SWIGTYPE_p_uiAbstractValueNode_t);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  uiAbstractValueNode_t_set_max__SWIG_1(arg1,(char const *)arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_uiAbstractValueNode_set_max(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_uiAbstractValueNode_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_uiAbstractValueNode_set_max__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_uiAbstractValueNode_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = SWIG_lua_isnilstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_uiAbstractValueNode_set_max__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'uiAbstractValueNode_set_max'\n"
    "  Possible C/C++ prototypes are:\n"
    "    uiAbstractValueNode_t::set_max(float)\n"
    "    uiAbstractValueNode_t::set_max(char const *)\n");
  lua_error(L);return 0;
}


static int _wrap_uiAbstractValueNode_set_value__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  uiAbstractValueNode_t *arg1 = (uiAbstractValueNode_t *) 0 ;
  char *arg2 = (char *) 0 ;
  
  SWIG_check_num_args("uiAbstractValueNode_t::set_value",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("uiAbstractValueNode_t::set_value",1,"uiAbstractValueNode_t *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("uiAbstractValueNode_t::set_value",2,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_uiAbstractValueNode_t,0))){
    SWIG_fail_ptr("uiAbstractValueNode_set_value",1,SWIGTYPE_p_uiAbstractValueNode_t);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  uiAbstractValueNode_t_set_value__SWIG_1(arg1,(char const *)arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_uiAbstractValueNode_set_value(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_uiAbstractValueNode_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_uiAbstractValueNode_set_value__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_uiAbstractValueNode_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = SWIG_lua_isnilstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_uiAbstractValueNode_set_value__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'uiAbstractValueNode_set_value'\n"
    "  Possible C/C++ prototypes are:\n"
    "    uiAbstractValueNode_t::set_value(float)\n"
    "    uiAbstractValueNode_t::set_value(char const *)\n");
  lua_error(L);return 0;
}


static int _wrap_uiAbstractValueNode_set_delta(lua_State* L) {
  int SWIG_arg = 0;
  uiAbstractValueNode_t *arg1 = (uiAbstractValueNode_t *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("uiAbstractValueNode_t::set_delta",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("uiAbstractValueNode_t::set_delta",1,"uiAbstractValueNode_t *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("uiAbstractValueNode_t::set_delta",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_uiAbstractValueNode_t,0))){
    SWIG_fail_ptr("uiAbstractValueNode_set_delta",1,SWIGTYPE_p_uiAbstractValueNode_t);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  uiAbstractValueNode_t_set_delta(arg1,arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_uiAbstractValueNode_set_shiftmultiplier(lua_State* L) {
  int SWIG_arg = 0;
  uiAbstractValueNode_t *arg1 = (uiAbstractValueNode_t *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("uiAbstractValueNode_t::set_shiftmultiplier",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("uiAbstractValueNode_t::set_shiftmultiplier",1,"uiAbstractValueNode_t *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("uiAbstractValueNode_t::set_shiftmultiplier",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_uiAbstractValueNode_t,0))){
    SWIG_fail_ptr("uiAbstractValueNode_set_shiftmultiplier",1,SWIGTYPE_p_uiAbstractValueNode_t);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  uiAbstractValueNode_t_set_shiftmultiplier(arg1,arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_uiAbstractValueNode(lua_State* L) {
  int SWIG_arg = 0;
  uiAbstractValueNode_t *result = 0 ;
  
  SWIG_check_num_args("uiAbstractValueNode_t::uiAbstractValueNode_t",0,0)
  result = (uiAbstractValueNode_t *)new uiAbstractValueNode_t();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_uiAbstractValueNode_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_uiAbstractValueNode(void *obj) {
uiAbstractValueNode_t *arg1 = (uiAbstractValueNode_t *) obj;
delete arg1;
}
static int _proxy__wrap_new_uiAbstractValueNode(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_uiAbstractValueNode);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_uiAbstractValueNode_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_uiAbstractValueNode_methods[]= {
    { "min", _wrap_uiAbstractValueNode_min},
    { "max", _wrap_uiAbstractValueNode_max},
    { "value", _wrap_uiAbstractValueNode_value},
    { "delta", _wrap_uiAbstractValueNode_delta},
    { "lastdiff", _wrap_uiAbstractValueNode_lastdiff},
    { "shiftmultiplier", _wrap_uiAbstractValueNode_shiftmultiplier},
    { "inc_value", _wrap_uiAbstractValueNode_inc_value},
    { "dec_value", _wrap_uiAbstractValueNode_dec_value},
    { "set_range", _wrap_uiAbstractValueNode_set_range},
    { "set_min", _wrap_uiAbstractValueNode_set_min},
    { "set_max", _wrap_uiAbstractValueNode_set_max},
    { "set_value", _wrap_uiAbstractValueNode_set_value},
    { "set_delta", _wrap_uiAbstractValueNode_set_delta},
    { "set_shiftmultiplier", _wrap_uiAbstractValueNode_set_shiftmultiplier},
    {0,0}
};
static swig_lua_method swig_uiAbstractValueNode_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_uiAbstractValueNode_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_uiAbstractValueNode_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_uiAbstractValueNode_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_uiAbstractValueNode_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_uiAbstractValueNode_Sf_SwigStatic = {
    "uiAbstractValueNode",
    swig_uiAbstractValueNode_Sf_SwigStatic_methods,
    swig_uiAbstractValueNode_Sf_SwigStatic_attributes,
    swig_uiAbstractValueNode_Sf_SwigStatic_constants,
    swig_uiAbstractValueNode_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_uiAbstractValueNode_bases[] = {0,0};
static const char *swig_uiAbstractValueNode_base_names[] = {"uiNode_t *",0};
static swig_lua_class _wrap_class_uiAbstractValueNode = { "uiAbstractValueNode", "uiAbstractValueNode", &SWIGTYPE_p_uiAbstractValueNode_t,_proxy__wrap_new_uiAbstractValueNode, swig_delete_uiAbstractValueNode, swig_uiAbstractValueNode_methods, swig_uiAbstractValueNode_attributes, &swig_uiAbstractValueNode_Sf_SwigStatic, swig_uiAbstractValueNode_meta, swig_uiAbstractValueNode_bases, swig_uiAbstractValueNode_base_names };

static int _wrap_uiBar_is_readonly(lua_State* L) {
  int SWIG_arg = 0;
  uiBarNode_t *arg1 = (uiBarNode_t *) 0 ;
  bool result;
  
  SWIG_check_num_args("uiBarNode_t::is_readonly",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("uiBarNode_t::is_readonly",1,"uiBarNode_t *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_uiBarNode_t,0))){
    SWIG_fail_ptr("uiBar_is_readonly",1,SWIGTYPE_p_uiBarNode_t);
  }
  
  result = (bool)uiBarNode_t_is_readonly(arg1);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_uiBar_is_nohover(lua_State* L) {
  int SWIG_arg = 0;
  uiBarNode_t *arg1 = (uiBarNode_t *) 0 ;
  bool result;
  
  SWIG_check_num_args("uiBarNode_t::is_nohover",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("uiBarNode_t::is_nohover",1,"uiBarNode_t *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_uiBarNode_t,0))){
    SWIG_fail_ptr("uiBar_is_nohover",1,SWIGTYPE_p_uiBarNode_t);
  }
  
  result = (bool)uiBarNode_t_is_nohover(arg1);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_uiBar_direction(lua_State* L) {
  int SWIG_arg = 0;
  uiBarNode_t *arg1 = (uiBarNode_t *) 0 ;
  int result;
  
  SWIG_check_num_args("uiBarNode_t::direction",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("uiBarNode_t::direction",1,"uiBarNode_t *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_uiBarNode_t,0))){
    SWIG_fail_ptr("uiBar_direction",1,SWIGTYPE_p_uiBarNode_t);
  }
  
  result = (int)uiBarNode_t_direction(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_uiBar_set_direction(lua_State* L) {
  int SWIG_arg = 0;
  uiBarNode_t *arg1 = (uiBarNode_t *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("uiBarNode_t::set_direction",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("uiBarNode_t::set_direction",1,"uiBarNode_t *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("uiBarNode_t::set_direction",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_uiBarNode_t,0))){
    SWIG_fail_ptr("uiBar_set_direction",1,SWIGTYPE_p_uiBarNode_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  uiBarNode_t_set_direction(arg1,arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_uiBar_set_readonly(lua_State* L) {
  int SWIG_arg = 0;
  uiBarNode_t *arg1 = (uiBarNode_t *) 0 ;
  bool arg2 ;
  
  SWIG_check_num_args("uiBarNode_t::set_readonly",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("uiBarNode_t::set_readonly",1,"uiBarNode_t *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("uiBarNode_t::set_readonly",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_uiBarNode_t,0))){
    SWIG_fail_ptr("uiBar_set_readonly",1,SWIGTYPE_p_uiBarNode_t);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  uiBarNode_t_set_readonly(arg1,arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_uiBar_set_nohover(lua_State* L) {
  int SWIG_arg = 0;
  uiBarNode_t *arg1 = (uiBarNode_t *) 0 ;
  bool arg2 ;
  
  SWIG_check_num_args("uiBarNode_t::set_nohover",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("uiBarNode_t::set_nohover",1,"uiBarNode_t *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("uiBarNode_t::set_nohover",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_uiBarNode_t,0))){
    SWIG_fail_ptr("uiBar_set_nohover",1,SWIGTYPE_p_uiBarNode_t);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  uiBarNode_t_set_nohover(arg1,arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_uiBar(lua_State* L) {
  int SWIG_arg = 0;
  uiBarNode_t *result = 0 ;
  
  SWIG_check_num_args("uiBarNode_t::uiBarNode_t",0,0)
  result = (uiBarNode_t *)new uiBarNode_t();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_uiBarNode_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_uiBar(void *obj) {
uiBarNode_t *arg1 = (uiBarNode_t *) obj;
delete arg1;
}
static int _proxy__wrap_new_uiBar(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_uiBar);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_uiBar_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_uiBar_methods[]= {
    { "is_readonly", _wrap_uiBar_is_readonly},
    { "is_nohover", _wrap_uiBar_is_nohover},
    { "direction", _wrap_uiBar_direction},
    { "set_direction", _wrap_uiBar_set_direction},
    { "set_readonly", _wrap_uiBar_set_readonly},
    { "set_nohover", _wrap_uiBar_set_nohover},
    {0,0}
};
static swig_lua_method swig_uiBar_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_uiBar_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_uiBar_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_uiBar_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_uiBar_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_uiBar_Sf_SwigStatic = {
    "uiBar",
    swig_uiBar_Sf_SwigStatic_methods,
    swig_uiBar_Sf_SwigStatic_attributes,
    swig_uiBar_Sf_SwigStatic_constants,
    swig_uiBar_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_uiBar_bases[] = {0,0};
static const char *swig_uiBar_base_names[] = {"uiAbstractValueNode_t *",0};
static swig_lua_class _wrap_class_uiBar = { "uiBar", "uiBar", &SWIGTYPE_p_uiBarNode_t,_proxy__wrap_new_uiBar, swig_delete_uiBar, swig_uiBar_methods, swig_uiBar_attributes, &swig_uiBar_Sf_SwigStatic, swig_uiBar_meta, swig_uiBar_bases, swig_uiBar_base_names };

static int _wrap_uiAbstractBase_baseid(lua_State* L) {
  int SWIG_arg = 0;
  uiAbstractBaseNode_t *arg1 = (uiAbstractBaseNode_t *) 0 ;
  int result;
  
  SWIG_check_num_args("uiAbstractBaseNode_t::baseid",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("uiAbstractBaseNode_t::baseid",1,"uiAbstractBaseNode_t *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_uiAbstractBaseNode_t,0))){
    SWIG_fail_ptr("uiAbstractBase_baseid",1,SWIGTYPE_p_uiAbstractBaseNode_t);
  }
  
  result = (int)uiAbstractBaseNode_t_baseid(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_uiAbstractBase_set_baseid(lua_State* L) {
  int SWIG_arg = 0;
  uiAbstractBaseNode_t *arg1 = (uiAbstractBaseNode_t *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("uiAbstractBaseNode_t::set_baseid",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("uiAbstractBaseNode_t::set_baseid",1,"uiAbstractBaseNode_t *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("uiAbstractBaseNode_t::set_baseid",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_uiAbstractBaseNode_t,0))){
    SWIG_fail_ptr("uiAbstractBase_set_baseid",1,SWIGTYPE_p_uiAbstractBaseNode_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  uiAbstractBaseNode_t_set_baseid(arg1,arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_uiAbstractBase(lua_State* L) {
  int SWIG_arg = 0;
  uiAbstractBaseNode_t *result = 0 ;
  
  SWIG_check_num_args("uiAbstractBaseNode_t::uiAbstractBaseNode_t",0,0)
  result = (uiAbstractBaseNode_t *)new uiAbstractBaseNode_t();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_uiAbstractBaseNode_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_uiAbstractBase(void *obj) {
uiAbstractBaseNode_t *arg1 = (uiAbstractBaseNode_t *) obj;
delete arg1;
}
static int _proxy__wrap_new_uiAbstractBase(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_uiAbstractBase);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_uiAbstractBase_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_uiAbstractBase_methods[]= {
    { "baseid", _wrap_uiAbstractBase_baseid},
    { "set_baseid", _wrap_uiAbstractBase_set_baseid},
    {0,0}
};
static swig_lua_method swig_uiAbstractBase_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_uiAbstractBase_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_uiAbstractBase_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_uiAbstractBase_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_uiAbstractBase_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_uiAbstractBase_Sf_SwigStatic = {
    "uiAbstractBase",
    swig_uiAbstractBase_Sf_SwigStatic_methods,
    swig_uiAbstractBase_Sf_SwigStatic_attributes,
    swig_uiAbstractBase_Sf_SwigStatic_constants,
    swig_uiAbstractBase_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_uiAbstractBase_bases[] = {0,0};
static const char *swig_uiAbstractBase_base_names[] = {"uiNode_t *",0};
static swig_lua_class _wrap_class_uiAbstractBase = { "uiAbstractBase", "uiAbstractBase", &SWIGTYPE_p_uiAbstractBaseNode_t,_proxy__wrap_new_uiAbstractBase, swig_delete_uiAbstractBase, swig_uiAbstractBase_methods, swig_uiAbstractBase_attributes, &swig_uiAbstractBase_Sf_SwigStatic, swig_uiAbstractBase_meta, swig_uiAbstractBase_bases, swig_uiAbstractBase_base_names };

static int _wrap_new_uiBaseMap(lua_State* L) {
  int SWIG_arg = 0;
  uiBaseMapNode_t *result = 0 ;
  
  SWIG_check_num_args("uiBaseMapNode_t::uiBaseMapNode_t",0,0)
  result = (uiBaseMapNode_t *)new uiBaseMapNode_t();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_uiBaseMapNode_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_uiBaseMap(void *obj) {
uiBaseMapNode_t *arg1 = (uiBaseMapNode_t *) obj;
delete arg1;
}
static int _proxy__wrap_new_uiBaseMap(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_uiBaseMap);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_uiBaseMap_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_uiBaseMap_methods[]= {
    {0,0}
};
static swig_lua_method swig_uiBaseMap_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_uiBaseMap_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_uiBaseMap_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_uiBaseMap_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_uiBaseMap_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_uiBaseMap_SwigStatic = {
    "uiBaseMap",
    swig_uiBaseMap_SwigStatic_methods,
    swig_uiBaseMap_SwigStatic_attributes,
    swig_uiBaseMap_SwigStatic_constants,
    swig_uiBaseMap_SwigStatic_classes,
    0
};
static swig_lua_class *swig_uiBaseMap_bases[] = {0,0};
static const char *swig_uiBaseMap_base_names[] = {"uiAbstractBaseNode_t *",0};
static swig_lua_class _wrap_class_uiBaseMap = { "uiBaseMap", "uiBaseMap", &SWIGTYPE_p_uiBaseMapNode_t,_proxy__wrap_new_uiBaseMap, swig_delete_uiBaseMap, swig_uiBaseMap_methods, swig_uiBaseMap_attributes, &swig_uiBaseMap_SwigStatic, swig_uiBaseMap_meta, swig_uiBaseMap_bases, swig_uiBaseMap_base_names };

static int _wrap_new_uiBaseLayout(lua_State* L) {
  int SWIG_arg = 0;
  uiBaseLayoutNode_t *result = 0 ;
  
  SWIG_check_num_args("uiBaseLayoutNode_t::uiBaseLayoutNode_t",0,0)
  result = (uiBaseLayoutNode_t *)new uiBaseLayoutNode_t();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_uiBaseLayoutNode_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_uiBaseLayout(void *obj) {
uiBaseLayoutNode_t *arg1 = (uiBaseLayoutNode_t *) obj;
delete arg1;
}
static int _proxy__wrap_new_uiBaseLayout(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_uiBaseLayout);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_uiBaseLayout_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_uiBaseLayout_methods[]= {
    {0,0}
};
static swig_lua_method swig_uiBaseLayout_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_uiBaseLayout_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_uiBaseLayout_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_uiBaseLayout_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_uiBaseLayout_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_uiBaseLayout_Sf_SwigStatic = {
    "uiBaseLayout",
    swig_uiBaseLayout_Sf_SwigStatic_methods,
    swig_uiBaseLayout_Sf_SwigStatic_attributes,
    swig_uiBaseLayout_Sf_SwigStatic_constants,
    swig_uiBaseLayout_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_uiBaseLayout_bases[] = {0,0};
static const char *swig_uiBaseLayout_base_names[] = {"uiAbstractBaseNode_t *",0};
static swig_lua_class _wrap_class_uiBaseLayout = { "uiBaseLayout", "uiBaseLayout", &SWIGTYPE_p_uiBaseLayoutNode_t,_proxy__wrap_new_uiBaseLayout, swig_delete_uiBaseLayout, swig_uiBaseLayout_methods, swig_uiBaseLayout_attributes, &swig_uiBaseLayout_Sf_SwigStatic, swig_uiBaseLayout_meta, swig_uiBaseLayout_bases, swig_uiBaseLayout_base_names };

static int _wrap_uiButton_flipicon(lua_State* L) {
  int SWIG_arg = 0;
  uiButtonNode_t *arg1 = (uiButtonNode_t *) 0 ;
  bool result;
  
  SWIG_check_num_args("uiButtonNode_t::flipicon",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("uiButtonNode_t::flipicon",1,"uiButtonNode_t *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_uiButtonNode_t,0))){
    SWIG_fail_ptr("uiButton_flipicon",1,SWIGTYPE_p_uiButtonNode_t);
  }
  
  result = (bool)uiButtonNode_t_flipicon(arg1);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_uiButton_set_flipicon(lua_State* L) {
  int SWIG_arg = 0;
  uiButtonNode_t *arg1 = (uiButtonNode_t *) 0 ;
  bool arg2 ;
  
  SWIG_check_num_args("uiButtonNode_t::set_flipicon",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("uiButtonNode_t::set_flipicon",1,"uiButtonNode_t *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("uiButtonNode_t::set_flipicon",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_uiButtonNode_t,0))){
    SWIG_fail_ptr("uiButton_set_flipicon",1,SWIGTYPE_p_uiButtonNode_t);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  uiButtonNode_t_set_flipicon(arg1,arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_uiButton_set_background(lua_State* L) {
  int SWIG_arg = 0;
  uiButtonNode_t *arg1 = (uiButtonNode_t *) 0 ;
  char *arg2 = (char *) 0 ;
  
  SWIG_check_num_args("uiButtonNode_t::set_background",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("uiButtonNode_t::set_background",1,"uiButtonNode_t *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("uiButtonNode_t::set_background",2,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_uiButtonNode_t,0))){
    SWIG_fail_ptr("uiButton_set_background",1,SWIGTYPE_p_uiButtonNode_t);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  uiButtonNode_t_set_background(arg1,(char const *)arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_uiButton_set_icon(lua_State* L) {
  int SWIG_arg = 0;
  uiButtonNode_t *arg1 = (uiButtonNode_t *) 0 ;
  char *arg2 = (char *) 0 ;
  
  SWIG_check_num_args("uiButtonNode_t::set_icon",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("uiButtonNode_t::set_icon",1,"uiButtonNode_t *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("uiButtonNode_t::set_icon",2,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_uiButtonNode_t,0))){
    SWIG_fail_ptr("uiButton_set_icon",1,SWIGTYPE_p_uiButtonNode_t);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  uiButtonNode_t_set_icon(arg1,(char const *)arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_uiButton(lua_State* L) {
  int SWIG_arg = 0;
  uiButtonNode_t *result = 0 ;
  
  SWIG_check_num_args("uiButtonNode_t::uiButtonNode_t",0,0)
  result = (uiButtonNode_t *)new uiButtonNode_t();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_uiButtonNode_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_uiButton(void *obj) {
uiButtonNode_t *arg1 = (uiButtonNode_t *) obj;
delete arg1;
}
static int _proxy__wrap_new_uiButton(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_uiButton);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_uiButton_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_uiButton_methods[]= {
    { "flipicon", _wrap_uiButton_flipicon},
    { "set_flipicon", _wrap_uiButton_set_flipicon},
    { "set_background", _wrap_uiButton_set_background},
    { "set_icon", _wrap_uiButton_set_icon},
    {0,0}
};
static swig_lua_method swig_uiButton_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_uiButton_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_uiButton_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_uiButton_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_uiButton_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_uiButton_Sf_SwigStatic = {
    "uiButton",
    swig_uiButton_Sf_SwigStatic_methods,
    swig_uiButton_Sf_SwigStatic_attributes,
    swig_uiButton_Sf_SwigStatic_constants,
    swig_uiButton_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_uiButton_bases[] = {0,0};
static const char *swig_uiButton_base_names[] = {"uiNode_t *",0};
static swig_lua_class _wrap_class_uiButton = { "uiButton", "uiButton", &SWIGTYPE_p_uiButtonNode_t,_proxy__wrap_new_uiButton, swig_delete_uiButton, swig_uiButton_methods, swig_uiButton_attributes, &swig_uiButton_Sf_SwigStatic, swig_uiButton_meta, swig_uiButton_bases, swig_uiButton_base_names };

static int _wrap_uiCheckBox_as_boolean(lua_State* L) {
  int SWIG_arg = 0;
  uiCheckBoxNode_t *arg1 = (uiCheckBoxNode_t *) 0 ;
  bool result;
  
  SWIG_check_num_args("uiCheckBoxNode_t::as_boolean",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("uiCheckBoxNode_t::as_boolean",1,"uiCheckBoxNode_t *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_uiCheckBoxNode_t,0))){
    SWIG_fail_ptr("uiCheckBox_as_boolean",1,SWIGTYPE_p_uiCheckBoxNode_t);
  }
  
  result = (bool)uiCheckBoxNode_t_as_boolean(arg1);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_uiCheckBox_as_integer(lua_State* L) {
  int SWIG_arg = 0;
  uiCheckBoxNode_t *arg1 = (uiCheckBoxNode_t *) 0 ;
  int result;
  
  SWIG_check_num_args("uiCheckBoxNode_t::as_integer",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("uiCheckBoxNode_t::as_integer",1,"uiCheckBoxNode_t *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_uiCheckBoxNode_t,0))){
    SWIG_fail_ptr("uiCheckBox_as_integer",1,SWIGTYPE_p_uiCheckBoxNode_t);
  }
  
  result = (int)uiCheckBoxNode_t_as_integer(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_uiCheckBox_set_background(lua_State* L) {
  int SWIG_arg = 0;
  uiCheckBoxNode_t *arg1 = (uiCheckBoxNode_t *) 0 ;
  char *arg2 = (char *) 0 ;
  
  SWIG_check_num_args("uiCheckBoxNode_t::set_background",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("uiCheckBoxNode_t::set_background",1,"uiCheckBoxNode_t *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("uiCheckBoxNode_t::set_background",2,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_uiCheckBoxNode_t,0))){
    SWIG_fail_ptr("uiCheckBox_set_background",1,SWIGTYPE_p_uiCheckBoxNode_t);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  uiCheckBoxNode_t_set_background(arg1,(char const *)arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_uiCheckBox_set_iconchecked(lua_State* L) {
  int SWIG_arg = 0;
  uiCheckBoxNode_t *arg1 = (uiCheckBoxNode_t *) 0 ;
  char *arg2 = (char *) 0 ;
  
  SWIG_check_num_args("uiCheckBoxNode_t::set_iconchecked",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("uiCheckBoxNode_t::set_iconchecked",1,"uiCheckBoxNode_t *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("uiCheckBoxNode_t::set_iconchecked",2,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_uiCheckBoxNode_t,0))){
    SWIG_fail_ptr("uiCheckBox_set_iconchecked",1,SWIGTYPE_p_uiCheckBoxNode_t);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  uiCheckBoxNode_t_set_iconchecked(arg1,(char const *)arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_uiCheckBox_set_iconunchecked(lua_State* L) {
  int SWIG_arg = 0;
  uiCheckBoxNode_t *arg1 = (uiCheckBoxNode_t *) 0 ;
  char *arg2 = (char *) 0 ;
  
  SWIG_check_num_args("uiCheckBoxNode_t::set_iconunchecked",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("uiCheckBoxNode_t::set_iconunchecked",1,"uiCheckBoxNode_t *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("uiCheckBoxNode_t::set_iconunchecked",2,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_uiCheckBoxNode_t,0))){
    SWIG_fail_ptr("uiCheckBox_set_iconunchecked",1,SWIGTYPE_p_uiCheckBoxNode_t);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  uiCheckBoxNode_t_set_iconunchecked(arg1,(char const *)arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_uiCheckBox_set_iconunknown(lua_State* L) {
  int SWIG_arg = 0;
  uiCheckBoxNode_t *arg1 = (uiCheckBoxNode_t *) 0 ;
  char *arg2 = (char *) 0 ;
  
  SWIG_check_num_args("uiCheckBoxNode_t::set_iconunknown",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("uiCheckBoxNode_t::set_iconunknown",1,"uiCheckBoxNode_t *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("uiCheckBoxNode_t::set_iconunknown",2,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_uiCheckBoxNode_t,0))){
    SWIG_fail_ptr("uiCheckBox_set_iconunknown",1,SWIGTYPE_p_uiCheckBoxNode_t);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  uiCheckBoxNode_t_set_iconunknown(arg1,(char const *)arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_uiCheckBox_toggle(lua_State* L) {
  int SWIG_arg = 0;
  uiCheckBoxNode_t *arg1 = (uiCheckBoxNode_t *) 0 ;
  
  SWIG_check_num_args("uiCheckBoxNode_t::toggle",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("uiCheckBoxNode_t::toggle",1,"uiCheckBoxNode_t *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_uiCheckBoxNode_t,0))){
    SWIG_fail_ptr("uiCheckBox_toggle",1,SWIGTYPE_p_uiCheckBoxNode_t);
  }
  
  uiCheckBoxNode_t_toggle(arg1);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_uiCheckBox(lua_State* L) {
  int SWIG_arg = 0;
  uiCheckBoxNode_t *result = 0 ;
  
  SWIG_check_num_args("uiCheckBoxNode_t::uiCheckBoxNode_t",0,0)
  result = (uiCheckBoxNode_t *)new uiCheckBoxNode_t();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_uiCheckBoxNode_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_uiCheckBox(void *obj) {
uiCheckBoxNode_t *arg1 = (uiCheckBoxNode_t *) obj;
delete arg1;
}
static int _proxy__wrap_new_uiCheckBox(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_uiCheckBox);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_uiCheckBox_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_uiCheckBox_methods[]= {
    { "as_boolean", _wrap_uiCheckBox_as_boolean},
    { "as_integer", _wrap_uiCheckBox_as_integer},
    { "set_background", _wrap_uiCheckBox_set_background},
    { "set_iconchecked", _wrap_uiCheckBox_set_iconchecked},
    { "set_iconunchecked", _wrap_uiCheckBox_set_iconunchecked},
    { "set_iconunknown", _wrap_uiCheckBox_set_iconunknown},
    { "toggle", _wrap_uiCheckBox_toggle},
    {0,0}
};
static swig_lua_method swig_uiCheckBox_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_uiCheckBox_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_uiCheckBox_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_uiCheckBox_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_uiCheckBox_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_uiCheckBox_Sf_SwigStatic = {
    "uiCheckBox",
    swig_uiCheckBox_Sf_SwigStatic_methods,
    swig_uiCheckBox_Sf_SwigStatic_attributes,
    swig_uiCheckBox_Sf_SwigStatic_constants,
    swig_uiCheckBox_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_uiCheckBox_bases[] = {0,0};
static const char *swig_uiCheckBox_base_names[] = {"uiAbstractValueNode_t *",0};
static swig_lua_class _wrap_class_uiCheckBox = { "uiCheckBox", "uiCheckBox", &SWIGTYPE_p_uiCheckBoxNode_t,_proxy__wrap_new_uiCheckBox, swig_delete_uiCheckBox, swig_uiCheckBox_methods, swig_uiCheckBox_attributes, &swig_uiCheckBox_Sf_SwigStatic, swig_uiCheckBox_meta, swig_uiCheckBox_bases, swig_uiCheckBox_base_names };

static int _wrap_new_uiConFunc(lua_State* L) {
  int SWIG_arg = 0;
  uiConFuncNode_t *result = 0 ;
  
  SWIG_check_num_args("uiConFuncNode_t::uiConFuncNode_t",0,0)
  result = (uiConFuncNode_t *)new uiConFuncNode_t();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_uiConFuncNode_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_uiConFunc(void *obj) {
uiConFuncNode_t *arg1 = (uiConFuncNode_t *) obj;
delete arg1;
}
static int _proxy__wrap_new_uiConFunc(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_uiConFunc);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_uiConFunc_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_uiConFunc_methods[]= {
    {0,0}
};
static swig_lua_method swig_uiConFunc_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_uiConFunc_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_uiConFunc_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_uiConFunc_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_uiConFunc_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_uiConFunc_Sf_SwigStatic = {
    "uiConFunc",
    swig_uiConFunc_Sf_SwigStatic_methods,
    swig_uiConFunc_Sf_SwigStatic_attributes,
    swig_uiConFunc_Sf_SwigStatic_constants,
    swig_uiConFunc_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_uiConFunc_bases[] = {0,0};
static const char *swig_uiConFunc_base_names[] = {"uiNode_t *",0};
static swig_lua_class _wrap_class_uiConFunc = { "uiConFunc", "uiConFunc", &SWIGTYPE_p_uiConFuncNode_t,_proxy__wrap_new_uiConFunc, swig_delete_uiConFunc, swig_uiConFunc_methods, swig_uiConFunc_attributes, &swig_uiConFunc_Sf_SwigStatic, swig_uiConFunc_meta, swig_uiConFunc_bases, swig_uiConFunc_base_names };

static int _wrap_uiContainer_selectedid(lua_State* L) {
  int SWIG_arg = 0;
  uiContainerNode_t *arg1 = (uiContainerNode_t *) 0 ;
  int result;
  
  SWIG_check_num_args("uiContainerNode_t::selectedid",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("uiContainerNode_t::selectedid",1,"uiContainerNode_t *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_uiContainerNode_t,0))){
    SWIG_fail_ptr("uiContainer_selectedid",1,SWIGTYPE_p_uiContainerNode_t);
  }
  
  result = (int)uiContainerNode_t_selectedid(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_uiContainer_on_select_set(lua_State* L) {
  int SWIG_arg = 0;
  uiContainerNode_t *arg1 = (uiContainerNode_t *) 0 ;
  LUA_EVENT arg2 ;
  
  SWIG_check_num_args("uiContainerNode_t::lua_onSelect",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("uiContainerNode_t::lua_onSelect",1,"uiContainerNode_t *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_uiContainerNode_t,0))){
    SWIG_fail_ptr("uiContainer_on_select_set",1,SWIGTYPE_p_uiContainerNode_t);
  }
  
  {
    arg2 = (LUA_EVENT)luaL_ref (L, LUA_REGISTRYINDEX);
  }
  uiContainerNode_t_lua_onSelect_set(arg1,arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_uiContainer_on_select_get(lua_State* L) {
  int SWIG_arg = 0;
  uiContainerNode_t *arg1 = (uiContainerNode_t *) 0 ;
  LUA_EVENT result;
  
  SWIG_check_num_args("uiContainerNode_t::lua_onSelect",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("uiContainerNode_t::lua_onSelect",1,"uiContainerNode_t *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_uiContainerNode_t,0))){
    SWIG_fail_ptr("uiContainer_on_select_get",1,SWIGTYPE_p_uiContainerNode_t);
  }
  
  result = uiContainerNode_t_lua_onSelect_get(arg1);
  {
    LUA_EVENT * resultptr = new LUA_EVENT((const LUA_EVENT &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_LUA_EVENT,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_uiContainer(lua_State* L) {
  int SWIG_arg = 0;
  uiContainerNode_t *result = 0 ;
  
  SWIG_check_num_args("uiContainerNode_t::uiContainerNode_t",0,0)
  result = (uiContainerNode_t *)new uiContainerNode_t();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_uiContainerNode_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_uiContainer(void *obj) {
uiContainerNode_t *arg1 = (uiContainerNode_t *) obj;
delete arg1;
}
static int _proxy__wrap_new_uiContainer(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_uiContainer);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_uiContainer_attributes[] = {
    { "on_select", _wrap_uiContainer_on_select_get, _wrap_uiContainer_on_select_set },
    {0,0,0}
};
static swig_lua_method swig_uiContainer_methods[]= {
    { "selectedid", _wrap_uiContainer_selectedid},
    {0,0}
};
static swig_lua_method swig_uiContainer_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_uiContainer_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_uiContainer_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_uiContainer_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_uiContainer_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_uiContainer_Sf_SwigStatic = {
    "uiContainer",
    swig_uiContainer_Sf_SwigStatic_methods,
    swig_uiContainer_Sf_SwigStatic_attributes,
    swig_uiContainer_Sf_SwigStatic_constants,
    swig_uiContainer_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_uiContainer_bases[] = {0,0};
static const char *swig_uiContainer_base_names[] = {"uiNode_t *",0};
static swig_lua_class _wrap_class_uiContainer = { "uiContainer", "uiContainer", &SWIGTYPE_p_uiContainerNode_t,_proxy__wrap_new_uiContainer, swig_delete_uiContainer, swig_uiContainer_methods, swig_uiContainer_attributes, &swig_uiContainer_Sf_SwigStatic, swig_uiContainer_meta, swig_uiContainer_bases, swig_uiContainer_base_names };

static int _wrap_uiBaseInventory_filtertype(lua_State* L) {
  int SWIG_arg = 0;
  uiBaseInventoryNode_t *arg1 = (uiBaseInventoryNode_t *) 0 ;
  int result;
  
  SWIG_check_num_args("uiBaseInventoryNode_t::filtertype",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("uiBaseInventoryNode_t::filtertype",1,"uiBaseInventoryNode_t *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_uiBaseInventoryNode_t,0))){
    SWIG_fail_ptr("uiBaseInventory_filtertype",1,SWIGTYPE_p_uiBaseInventoryNode_t);
  }
  
  result = (int)uiBaseInventoryNode_t_filtertype(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_uiBaseInventory_columns(lua_State* L) {
  int SWIG_arg = 0;
  uiBaseInventoryNode_t *arg1 = (uiBaseInventoryNode_t *) 0 ;
  int result;
  
  SWIG_check_num_args("uiBaseInventoryNode_t::columns",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("uiBaseInventoryNode_t::columns",1,"uiBaseInventoryNode_t *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_uiBaseInventoryNode_t,0))){
    SWIG_fail_ptr("uiBaseInventory_columns",1,SWIGTYPE_p_uiBaseInventoryNode_t);
  }
  
  result = (int)uiBaseInventoryNode_t_columns(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_uiBaseInventory_is_displayweapon(lua_State* L) {
  int SWIG_arg = 0;
  uiBaseInventoryNode_t *arg1 = (uiBaseInventoryNode_t *) 0 ;
  bool result;
  
  SWIG_check_num_args("uiBaseInventoryNode_t::is_displayweapon",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("uiBaseInventoryNode_t::is_displayweapon",1,"uiBaseInventoryNode_t *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_uiBaseInventoryNode_t,0))){
    SWIG_fail_ptr("uiBaseInventory_is_displayweapon",1,SWIGTYPE_p_uiBaseInventoryNode_t);
  }
  
  result = (bool)uiBaseInventoryNode_t_is_displayweapon(arg1);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_uiBaseInventory_is_displayweaponammo(lua_State* L) {
  int SWIG_arg = 0;
  uiBaseInventoryNode_t *arg1 = (uiBaseInventoryNode_t *) 0 ;
  bool result;
  
  SWIG_check_num_args("uiBaseInventoryNode_t::is_displayweaponammo",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("uiBaseInventoryNode_t::is_displayweaponammo",1,"uiBaseInventoryNode_t *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_uiBaseInventoryNode_t,0))){
    SWIG_fail_ptr("uiBaseInventory_is_displayweaponammo",1,SWIGTYPE_p_uiBaseInventoryNode_t);
  }
  
  result = (bool)uiBaseInventoryNode_t_is_displayweaponammo(arg1);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_uiBaseInventory_is_displayammo(lua_State* L) {
  int SWIG_arg = 0;
  uiBaseInventoryNode_t *arg1 = (uiBaseInventoryNode_t *) 0 ;
  bool result;
  
  SWIG_check_num_args("uiBaseInventoryNode_t::is_displayammo",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("uiBaseInventoryNode_t::is_displayammo",1,"uiBaseInventoryNode_t *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_uiBaseInventoryNode_t,0))){
    SWIG_fail_ptr("uiBaseInventory_is_displayammo",1,SWIGTYPE_p_uiBaseInventoryNode_t);
  }
  
  result = (bool)uiBaseInventoryNode_t_is_displayammo(arg1);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_uiBaseInventory_is_displayimplant(lua_State* L) {
  int SWIG_arg = 0;
  uiBaseInventoryNode_t *arg1 = (uiBaseInventoryNode_t *) 0 ;
  bool result;
  
  SWIG_check_num_args("uiBaseInventoryNode_t::is_displayimplant",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("uiBaseInventoryNode_t::is_displayimplant",1,"uiBaseInventoryNode_t *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_uiBaseInventoryNode_t,0))){
    SWIG_fail_ptr("uiBaseInventory_is_displayimplant",1,SWIGTYPE_p_uiBaseInventoryNode_t);
  }
  
  result = (bool)uiBaseInventoryNode_t_is_displayimplant(arg1);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_uiBaseInventory_is_displayunavailable(lua_State* L) {
  int SWIG_arg = 0;
  uiBaseInventoryNode_t *arg1 = (uiBaseInventoryNode_t *) 0 ;
  bool result;
  
  SWIG_check_num_args("uiBaseInventoryNode_t::is_displayunavailable",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("uiBaseInventoryNode_t::is_displayunavailable",1,"uiBaseInventoryNode_t *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_uiBaseInventoryNode_t,0))){
    SWIG_fail_ptr("uiBaseInventory_is_displayunavailable",1,SWIGTYPE_p_uiBaseInventoryNode_t);
  }
  
  result = (bool)uiBaseInventoryNode_t_is_displayunavailable(arg1);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_uiBaseInventory_is_displayunavailableammo(lua_State* L) {
  int SWIG_arg = 0;
  uiBaseInventoryNode_t *arg1 = (uiBaseInventoryNode_t *) 0 ;
  bool result;
  
  SWIG_check_num_args("uiBaseInventoryNode_t::is_displayunavailableammo",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("uiBaseInventoryNode_t::is_displayunavailableammo",1,"uiBaseInventoryNode_t *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_uiBaseInventoryNode_t,0))){
    SWIG_fail_ptr("uiBaseInventory_is_displayunavailableammo",1,SWIGTYPE_p_uiBaseInventoryNode_t);
  }
  
  result = (bool)uiBaseInventoryNode_t_is_displayunavailableammo(arg1);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_uiBaseInventory_is_displayavailableontop(lua_State* L) {
  int SWIG_arg = 0;
  uiBaseInventoryNode_t *arg1 = (uiBaseInventoryNode_t *) 0 ;
  bool result;
  
  SWIG_check_num_args("uiBaseInventoryNode_t::is_displayavailableontop",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("uiBaseInventoryNode_t::is_displayavailableontop",1,"uiBaseInventoryNode_t *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_uiBaseInventoryNode_t,0))){
    SWIG_fail_ptr("uiBaseInventory_is_displayavailableontop",1,SWIGTYPE_p_uiBaseInventoryNode_t);
  }
  
  result = (bool)uiBaseInventoryNode_t_is_displayavailableontop(arg1);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_uiBaseInventory_set_displayweapon(lua_State* L) {
  int SWIG_arg = 0;
  uiBaseInventoryNode_t *arg1 = (uiBaseInventoryNode_t *) 0 ;
  bool arg2 ;
  
  SWIG_check_num_args("uiBaseInventoryNode_t::set_displayweapon",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("uiBaseInventoryNode_t::set_displayweapon",1,"uiBaseInventoryNode_t *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("uiBaseInventoryNode_t::set_displayweapon",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_uiBaseInventoryNode_t,0))){
    SWIG_fail_ptr("uiBaseInventory_set_displayweapon",1,SWIGTYPE_p_uiBaseInventoryNode_t);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  uiBaseInventoryNode_t_set_displayweapon(arg1,arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_uiBaseInventory_set_displayweaponammo(lua_State* L) {
  int SWIG_arg = 0;
  uiBaseInventoryNode_t *arg1 = (uiBaseInventoryNode_t *) 0 ;
  bool arg2 ;
  
  SWIG_check_num_args("uiBaseInventoryNode_t::set_displayweaponammo",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("uiBaseInventoryNode_t::set_displayweaponammo",1,"uiBaseInventoryNode_t *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("uiBaseInventoryNode_t::set_displayweaponammo",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_uiBaseInventoryNode_t,0))){
    SWIG_fail_ptr("uiBaseInventory_set_displayweaponammo",1,SWIGTYPE_p_uiBaseInventoryNode_t);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  uiBaseInventoryNode_t_set_displayweaponammo(arg1,arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_uiBaseInventory_set_displayammo(lua_State* L) {
  int SWIG_arg = 0;
  uiBaseInventoryNode_t *arg1 = (uiBaseInventoryNode_t *) 0 ;
  bool arg2 ;
  
  SWIG_check_num_args("uiBaseInventoryNode_t::set_displayammo",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("uiBaseInventoryNode_t::set_displayammo",1,"uiBaseInventoryNode_t *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("uiBaseInventoryNode_t::set_displayammo",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_uiBaseInventoryNode_t,0))){
    SWIG_fail_ptr("uiBaseInventory_set_displayammo",1,SWIGTYPE_p_uiBaseInventoryNode_t);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  uiBaseInventoryNode_t_set_displayammo(arg1,arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_uiBaseInventory_set_displayimplant(lua_State* L) {
  int SWIG_arg = 0;
  uiBaseInventoryNode_t *arg1 = (uiBaseInventoryNode_t *) 0 ;
  bool arg2 ;
  
  SWIG_check_num_args("uiBaseInventoryNode_t::set_displayimplant",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("uiBaseInventoryNode_t::set_displayimplant",1,"uiBaseInventoryNode_t *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("uiBaseInventoryNode_t::set_displayimplant",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_uiBaseInventoryNode_t,0))){
    SWIG_fail_ptr("uiBaseInventory_set_displayimplant",1,SWIGTYPE_p_uiBaseInventoryNode_t);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  uiBaseInventoryNode_t_set_displayimplant(arg1,arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_uiBaseInventory_set_displayunavailable(lua_State* L) {
  int SWIG_arg = 0;
  uiBaseInventoryNode_t *arg1 = (uiBaseInventoryNode_t *) 0 ;
  bool arg2 ;
  
  SWIG_check_num_args("uiBaseInventoryNode_t::set_displayunavailable",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("uiBaseInventoryNode_t::set_displayunavailable",1,"uiBaseInventoryNode_t *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("uiBaseInventoryNode_t::set_displayunavailable",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_uiBaseInventoryNode_t,0))){
    SWIG_fail_ptr("uiBaseInventory_set_displayunavailable",1,SWIGTYPE_p_uiBaseInventoryNode_t);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  uiBaseInventoryNode_t_set_displayunavailable(arg1,arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_uiBaseInventory_set_displayunavailableammo(lua_State* L) {
  int SWIG_arg = 0;
  uiBaseInventoryNode_t *arg1 = (uiBaseInventoryNode_t *) 0 ;
  bool arg2 ;
  
  SWIG_check_num_args("uiBaseInventoryNode_t::set_displayunavailableammo",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("uiBaseInventoryNode_t::set_displayunavailableammo",1,"uiBaseInventoryNode_t *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("uiBaseInventoryNode_t::set_displayunavailableammo",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_uiBaseInventoryNode_t,0))){
    SWIG_fail_ptr("uiBaseInventory_set_displayunavailableammo",1,SWIGTYPE_p_uiBaseInventoryNode_t);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  uiBaseInventoryNode_t_set_displayunavailableammo(arg1,arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_uiBaseInventory_set_displayavailableontop(lua_State* L) {
  int SWIG_arg = 0;
  uiBaseInventoryNode_t *arg1 = (uiBaseInventoryNode_t *) 0 ;
  bool arg2 ;
  
  SWIG_check_num_args("uiBaseInventoryNode_t::set_displayavailableontop",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("uiBaseInventoryNode_t::set_displayavailableontop",1,"uiBaseInventoryNode_t *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("uiBaseInventoryNode_t::set_displayavailableontop",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_uiBaseInventoryNode_t,0))){
    SWIG_fail_ptr("uiBaseInventory_set_displayavailableontop",1,SWIGTYPE_p_uiBaseInventoryNode_t);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  uiBaseInventoryNode_t_set_displayavailableontop(arg1,arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_uiBaseInventory_viewpos(lua_State* L) {
  int SWIG_arg = 0;
  uiBaseInventoryNode_t *arg1 = (uiBaseInventoryNode_t *) 0 ;
  int result;
  
  SWIG_check_num_args("uiBaseInventoryNode_t::viewpos",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("uiBaseInventoryNode_t::viewpos",1,"uiBaseInventoryNode_t *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_uiBaseInventoryNode_t,0))){
    SWIG_fail_ptr("uiBaseInventory_viewpos",1,SWIGTYPE_p_uiBaseInventoryNode_t);
  }
  
  result = (int)uiBaseInventoryNode_t_viewpos(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_uiBaseInventory_viewsize(lua_State* L) {
  int SWIG_arg = 0;
  uiBaseInventoryNode_t *arg1 = (uiBaseInventoryNode_t *) 0 ;
  int result;
  
  SWIG_check_num_args("uiBaseInventoryNode_t::viewsize",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("uiBaseInventoryNode_t::viewsize",1,"uiBaseInventoryNode_t *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_uiBaseInventoryNode_t,0))){
    SWIG_fail_ptr("uiBaseInventory_viewsize",1,SWIGTYPE_p_uiBaseInventoryNode_t);
  }
  
  result = (int)uiBaseInventoryNode_t_viewsize(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_uiBaseInventory_fullsize(lua_State* L) {
  int SWIG_arg = 0;
  uiBaseInventoryNode_t *arg1 = (uiBaseInventoryNode_t *) 0 ;
  int result;
  
  SWIG_check_num_args("uiBaseInventoryNode_t::fullsize",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("uiBaseInventoryNode_t::fullsize",1,"uiBaseInventoryNode_t *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_uiBaseInventoryNode_t,0))){
    SWIG_fail_ptr("uiBaseInventory_fullsize",1,SWIGTYPE_p_uiBaseInventoryNode_t);
  }
  
  result = (int)uiBaseInventoryNode_t_fullsize(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_uiBaseInventory_set_viewpos(lua_State* L) {
  int SWIG_arg = 0;
  uiBaseInventoryNode_t *arg1 = (uiBaseInventoryNode_t *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("uiBaseInventoryNode_t::set_viewpos",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("uiBaseInventoryNode_t::set_viewpos",1,"uiBaseInventoryNode_t *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("uiBaseInventoryNode_t::set_viewpos",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_uiBaseInventoryNode_t,0))){
    SWIG_fail_ptr("uiBaseInventory_set_viewpos",1,SWIGTYPE_p_uiBaseInventoryNode_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  uiBaseInventoryNode_t_set_viewpos(arg1,arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_uiBaseInventory_set_viewsize(lua_State* L) {
  int SWIG_arg = 0;
  uiBaseInventoryNode_t *arg1 = (uiBaseInventoryNode_t *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("uiBaseInventoryNode_t::set_viewsize",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("uiBaseInventoryNode_t::set_viewsize",1,"uiBaseInventoryNode_t *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("uiBaseInventoryNode_t::set_viewsize",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_uiBaseInventoryNode_t,0))){
    SWIG_fail_ptr("uiBaseInventory_set_viewsize",1,SWIGTYPE_p_uiBaseInventoryNode_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  uiBaseInventoryNode_t_set_viewsize(arg1,arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_uiBaseInventory_set_fullsize(lua_State* L) {
  int SWIG_arg = 0;
  uiBaseInventoryNode_t *arg1 = (uiBaseInventoryNode_t *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("uiBaseInventoryNode_t::set_fullsize",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("uiBaseInventoryNode_t::set_fullsize",1,"uiBaseInventoryNode_t *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("uiBaseInventoryNode_t::set_fullsize",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_uiBaseInventoryNode_t,0))){
    SWIG_fail_ptr("uiBaseInventory_set_fullsize",1,SWIGTYPE_p_uiBaseInventoryNode_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  uiBaseInventoryNode_t_set_fullsize(arg1,arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_uiBaseInventory_on_viewchange_set(lua_State* L) {
  int SWIG_arg = 0;
  uiBaseInventoryNode_t *arg1 = (uiBaseInventoryNode_t *) 0 ;
  LUA_EVENT arg2 ;
  
  SWIG_check_num_args("uiBaseInventoryNode_t::lua_onViewChange",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("uiBaseInventoryNode_t::lua_onViewChange",1,"uiBaseInventoryNode_t *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_uiBaseInventoryNode_t,0))){
    SWIG_fail_ptr("uiBaseInventory_on_viewchange_set",1,SWIGTYPE_p_uiBaseInventoryNode_t);
  }
  
  {
    arg2 = (LUA_EVENT)luaL_ref (L, LUA_REGISTRYINDEX);
  }
  uiBaseInventoryNode_t_lua_onViewChange_set(arg1,arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_uiBaseInventory_on_viewchange_get(lua_State* L) {
  int SWIG_arg = 0;
  uiBaseInventoryNode_t *arg1 = (uiBaseInventoryNode_t *) 0 ;
  LUA_EVENT result;
  
  SWIG_check_num_args("uiBaseInventoryNode_t::lua_onViewChange",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("uiBaseInventoryNode_t::lua_onViewChange",1,"uiBaseInventoryNode_t *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_uiBaseInventoryNode_t,0))){
    SWIG_fail_ptr("uiBaseInventory_on_viewchange_get",1,SWIGTYPE_p_uiBaseInventoryNode_t);
  }
  
  result = uiBaseInventoryNode_t_lua_onViewChange_get(arg1);
  {
    LUA_EVENT * resultptr = new LUA_EVENT((const LUA_EVENT &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_LUA_EVENT,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_uiBaseInventory(lua_State* L) {
  int SWIG_arg = 0;
  uiBaseInventoryNode_t *result = 0 ;
  
  SWIG_check_num_args("uiBaseInventoryNode_t::uiBaseInventoryNode_t",0,0)
  result = (uiBaseInventoryNode_t *)new uiBaseInventoryNode_t();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_uiBaseInventoryNode_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_uiBaseInventory(void *obj) {
uiBaseInventoryNode_t *arg1 = (uiBaseInventoryNode_t *) obj;
delete arg1;
}
static int _proxy__wrap_new_uiBaseInventory(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_uiBaseInventory);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_uiBaseInventory_attributes[] = {
    { "on_viewchange", _wrap_uiBaseInventory_on_viewchange_get, _wrap_uiBaseInventory_on_viewchange_set },
    {0,0,0}
};
static swig_lua_method swig_uiBaseInventory_methods[]= {
    { "filtertype", _wrap_uiBaseInventory_filtertype},
    { "columns", _wrap_uiBaseInventory_columns},
    { "is_displayweapon", _wrap_uiBaseInventory_is_displayweapon},
    { "is_displayweaponammo", _wrap_uiBaseInventory_is_displayweaponammo},
    { "is_displayammo", _wrap_uiBaseInventory_is_displayammo},
    { "is_displayimplant", _wrap_uiBaseInventory_is_displayimplant},
    { "is_displayunavailable", _wrap_uiBaseInventory_is_displayunavailable},
    { "is_displayunavailableammo", _wrap_uiBaseInventory_is_displayunavailableammo},
    { "is_displayavailableontop", _wrap_uiBaseInventory_is_displayavailableontop},
    { "set_displayweapon", _wrap_uiBaseInventory_set_displayweapon},
    { "set_displayweaponammo", _wrap_uiBaseInventory_set_displayweaponammo},
    { "set_displayammo", _wrap_uiBaseInventory_set_displayammo},
    { "set_displayimplant", _wrap_uiBaseInventory_set_displayimplant},
    { "set_displayunavailable", _wrap_uiBaseInventory_set_displayunavailable},
    { "set_displayunavailableammo", _wrap_uiBaseInventory_set_displayunavailableammo},
    { "set_displayavailableontop", _wrap_uiBaseInventory_set_displayavailableontop},
    { "viewpos", _wrap_uiBaseInventory_viewpos},
    { "viewsize", _wrap_uiBaseInventory_viewsize},
    { "fullsize", _wrap_uiBaseInventory_fullsize},
    { "set_viewpos", _wrap_uiBaseInventory_set_viewpos},
    { "set_viewsize", _wrap_uiBaseInventory_set_viewsize},
    { "set_fullsize", _wrap_uiBaseInventory_set_fullsize},
    {0,0}
};
static swig_lua_method swig_uiBaseInventory_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_uiBaseInventory_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_uiBaseInventory_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_uiBaseInventory_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_uiBaseInventory_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_uiBaseInventory_Sf_SwigStatic = {
    "uiBaseInventory",
    swig_uiBaseInventory_Sf_SwigStatic_methods,
    swig_uiBaseInventory_Sf_SwigStatic_attributes,
    swig_uiBaseInventory_Sf_SwigStatic_constants,
    swig_uiBaseInventory_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_uiBaseInventory_bases[] = {0,0};
static const char *swig_uiBaseInventory_base_names[] = {"uiContainerNode_t *",0};
static swig_lua_class _wrap_class_uiBaseInventory = { "uiBaseInventory", "uiBaseInventory", &SWIGTYPE_p_uiBaseInventoryNode_t,_proxy__wrap_new_uiBaseInventory, swig_delete_uiBaseInventory, swig_uiBaseInventory_methods, swig_uiBaseInventory_attributes, &swig_uiBaseInventory_Sf_SwigStatic, swig_uiBaseInventory_meta, swig_uiBaseInventory_bases, swig_uiBaseInventory_base_names };

static int _wrap_uiData_as_string(lua_State* L) {
  int SWIG_arg = 0;
  uiDataNode_t *arg1 = (uiDataNode_t *) 0 ;
  char *result = 0 ;
  
  SWIG_check_num_args("uiDataNode_t::as_string",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("uiDataNode_t::as_string",1,"uiDataNode_t *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_uiDataNode_t,0))){
    SWIG_fail_ptr("uiData_as_string",1,SWIGTYPE_p_uiDataNode_t);
  }
  
  result = (char *)uiDataNode_t_as_string(arg1);
  lua_pushstring(L,(const char *)result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_uiData_as_integer(lua_State* L) {
  int SWIG_arg = 0;
  uiDataNode_t *arg1 = (uiDataNode_t *) 0 ;
  int result;
  
  SWIG_check_num_args("uiDataNode_t::as_integer",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("uiDataNode_t::as_integer",1,"uiDataNode_t *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_uiDataNode_t,0))){
    SWIG_fail_ptr("uiData_as_integer",1,SWIGTYPE_p_uiDataNode_t);
  }
  
  result = (int)uiDataNode_t_as_integer(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_uiData_as_float(lua_State* L) {
  int SWIG_arg = 0;
  uiDataNode_t *arg1 = (uiDataNode_t *) 0 ;
  float result;
  
  SWIG_check_num_args("uiDataNode_t::as_float",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("uiDataNode_t::as_float",1,"uiDataNode_t *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_uiDataNode_t,0))){
    SWIG_fail_ptr("uiData_as_float",1,SWIGTYPE_p_uiDataNode_t);
  }
  
  result = (float)uiDataNode_t_as_float(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_uiData_set_value__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  uiDataNode_t *arg1 = (uiDataNode_t *) 0 ;
  char *arg2 = (char *) 0 ;
  
  SWIG_check_num_args("uiDataNode_t::set_value",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("uiDataNode_t::set_value",1,"uiDataNode_t *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("uiDataNode_t::set_value",2,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_uiDataNode_t,0))){
    SWIG_fail_ptr("uiData_set_value",1,SWIGTYPE_p_uiDataNode_t);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  uiDataNode_t_set_value__SWIG_0(arg1,(char const *)arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_uiData_set_value__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  uiDataNode_t *arg1 = (uiDataNode_t *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("uiDataNode_t::set_value",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("uiDataNode_t::set_value",1,"uiDataNode_t *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("uiDataNode_t::set_value",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_uiDataNode_t,0))){
    SWIG_fail_ptr("uiData_set_value",1,SWIGTYPE_p_uiDataNode_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  uiDataNode_t_set_value__SWIG_1(arg1,arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_uiData_set_value(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_uiDataNode_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_uiData_set_value__SWIG_1(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_uiDataNode_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = SWIG_lua_isnilstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_uiData_set_value__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'uiData_set_value'\n"
    "  Possible C/C++ prototypes are:\n"
    "    uiDataNode_t::set_value(char const *)\n"
    "    uiDataNode_t::set_value(int)\n");
  lua_error(L);return 0;
}


static int _wrap_uiData_set_valuef(lua_State* L) {
  int SWIG_arg = 0;
  uiDataNode_t *arg1 = (uiDataNode_t *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("uiDataNode_t::set_valuef",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("uiDataNode_t::set_valuef",1,"uiDataNode_t *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("uiDataNode_t::set_valuef",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_uiDataNode_t,0))){
    SWIG_fail_ptr("uiData_set_valuef",1,SWIGTYPE_p_uiDataNode_t);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  uiDataNode_t_set_valuef(arg1,arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_uiData(lua_State* L) {
  int SWIG_arg = 0;
  uiDataNode_t *result = 0 ;
  
  SWIG_check_num_args("uiDataNode_t::uiDataNode_t",0,0)
  result = (uiDataNode_t *)new uiDataNode_t();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_uiDataNode_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_uiData(void *obj) {
uiDataNode_t *arg1 = (uiDataNode_t *) obj;
delete arg1;
}
static int _proxy__wrap_new_uiData(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_uiData);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_uiData_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_uiData_methods[]= {
    { "as_string", _wrap_uiData_as_string},
    { "as_integer", _wrap_uiData_as_integer},
    { "as_float", _wrap_uiData_as_float},
    { "set_value", _wrap_uiData_set_value},
    { "set_valuef", _wrap_uiData_set_valuef},
    {0,0}
};
static swig_lua_method swig_uiData_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_uiData_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_uiData_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_uiData_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_uiData_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_uiData_Sf_SwigStatic = {
    "uiData",
    swig_uiData_Sf_SwigStatic_methods,
    swig_uiData_Sf_SwigStatic_attributes,
    swig_uiData_Sf_SwigStatic_constants,
    swig_uiData_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_uiData_bases[] = {0,0};
static const char *swig_uiData_base_names[] = {"uiNode_t *",0};
static swig_lua_class _wrap_class_uiData = { "uiData", "uiData", &SWIGTYPE_p_uiDataNode_t,_proxy__wrap_new_uiData, swig_delete_uiData, swig_uiData_methods, swig_uiData_attributes, &swig_uiData_Sf_SwigStatic, swig_uiData_meta, swig_uiData_bases, swig_uiData_base_names };

static int _wrap_uiGeoscape_zoomin(lua_State* L) {
  int SWIG_arg = 0;
  uiGeoscapeNode_t *arg1 = (uiGeoscapeNode_t *) 0 ;
  
  SWIG_check_num_args("uiGeoscapeNode_t::zoomin",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("uiGeoscapeNode_t::zoomin",1,"uiGeoscapeNode_t *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_uiGeoscapeNode_t,0))){
    SWIG_fail_ptr("uiGeoscape_zoomin",1,SWIGTYPE_p_uiGeoscapeNode_t);
  }
  
  uiGeoscapeNode_t_zoomin(arg1);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_uiGeoscape_zoomout(lua_State* L) {
  int SWIG_arg = 0;
  uiGeoscapeNode_t *arg1 = (uiGeoscapeNode_t *) 0 ;
  
  SWIG_check_num_args("uiGeoscapeNode_t::zoomout",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("uiGeoscapeNode_t::zoomout",1,"uiGeoscapeNode_t *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_uiGeoscapeNode_t,0))){
    SWIG_fail_ptr("uiGeoscape_zoomout",1,SWIGTYPE_p_uiGeoscapeNode_t);
  }
  
  uiGeoscapeNode_t_zoomout(arg1);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_uiGeoscape(lua_State* L) {
  int SWIG_arg = 0;
  uiGeoscapeNode_t *result = 0 ;
  
  SWIG_check_num_args("uiGeoscapeNode_t::uiGeoscapeNode_t",0,0)
  result = (uiGeoscapeNode_t *)new uiGeoscapeNode_t();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_uiGeoscapeNode_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_uiGeoscape(void *obj) {
uiGeoscapeNode_t *arg1 = (uiGeoscapeNode_t *) obj;
delete arg1;
}
static int _proxy__wrap_new_uiGeoscape(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_uiGeoscape);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_uiGeoscape_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_uiGeoscape_methods[]= {
    { "zoomin", _wrap_uiGeoscape_zoomin},
    { "zoomout", _wrap_uiGeoscape_zoomout},
    {0,0}
};
static swig_lua_method swig_uiGeoscape_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_uiGeoscape_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_uiGeoscape_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_uiGeoscape_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_uiGeoscape_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_uiGeoscape_Sf_SwigStatic = {
    "uiGeoscape",
    swig_uiGeoscape_Sf_SwigStatic_methods,
    swig_uiGeoscape_Sf_SwigStatic_attributes,
    swig_uiGeoscape_Sf_SwigStatic_constants,
    swig_uiGeoscape_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_uiGeoscape_bases[] = {0,0};
static const char *swig_uiGeoscape_base_names[] = {"uiNode_t *",0};
static swig_lua_class _wrap_class_uiGeoscape = { "uiGeoscape", "uiGeoscape", &SWIGTYPE_p_uiGeoscapeNode_t,_proxy__wrap_new_uiGeoscape, swig_delete_uiGeoscape, swig_uiGeoscape_methods, swig_uiGeoscape_attributes, &swig_uiGeoscape_Sf_SwigStatic, swig_uiGeoscape_meta, swig_uiGeoscape_bases, swig_uiGeoscape_base_names };

static int _wrap_uiImage_is_keepratio(lua_State* L) {
  int SWIG_arg = 0;
  uiImageNode_t *arg1 = (uiImageNode_t *) 0 ;
  bool result;
  
  SWIG_check_num_args("uiImageNode_t::is_keepratio",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("uiImageNode_t::is_keepratio",1,"uiImageNode_t *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_uiImageNode_t,0))){
    SWIG_fail_ptr("uiImage_is_keepratio",1,SWIGTYPE_p_uiImageNode_t);
  }
  
  result = (bool)uiImageNode_t_is_keepratio(arg1);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_uiImage_is_mousefx(lua_State* L) {
  int SWIG_arg = 0;
  uiImageNode_t *arg1 = (uiImageNode_t *) 0 ;
  bool result;
  
  SWIG_check_num_args("uiImageNode_t::is_mousefx",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("uiImageNode_t::is_mousefx",1,"uiImageNode_t *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_uiImageNode_t,0))){
    SWIG_fail_ptr("uiImage_is_mousefx",1,SWIGTYPE_p_uiImageNode_t);
  }
  
  result = (bool)uiImageNode_t_is_mousefx(arg1);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_uiImage_texh(lua_State* L) {
  int SWIG_arg = 0;
  uiImageNode_t *arg1 = (uiImageNode_t *) 0 ;
  vec2_struct_t *result = 0 ;
  
  SWIG_check_num_args("uiImageNode_t::texh",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("uiImageNode_t::texh",1,"uiImageNode_t *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_uiImageNode_t,0))){
    SWIG_fail_ptr("uiImage_texh",1,SWIGTYPE_p_uiImageNode_t);
  }
  
  result = (vec2_struct_t *)uiImageNode_t_texh(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_vec2_struct_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_uiImage_texl(lua_State* L) {
  int SWIG_arg = 0;
  uiImageNode_t *arg1 = (uiImageNode_t *) 0 ;
  vec2_struct_t *result = 0 ;
  
  SWIG_check_num_args("uiImageNode_t::texl",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("uiImageNode_t::texl",1,"uiImageNode_t *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_uiImageNode_t,0))){
    SWIG_fail_ptr("uiImage_texl",1,SWIGTYPE_p_uiImageNode_t);
  }
  
  result = (vec2_struct_t *)uiImageNode_t_texl(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_vec2_struct_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_uiImage_set_keepratio(lua_State* L) {
  int SWIG_arg = 0;
  uiImageNode_t *arg1 = (uiImageNode_t *) 0 ;
  bool arg2 ;
  
  SWIG_check_num_args("uiImageNode_t::set_keepratio",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("uiImageNode_t::set_keepratio",1,"uiImageNode_t *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("uiImageNode_t::set_keepratio",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_uiImageNode_t,0))){
    SWIG_fail_ptr("uiImage_set_keepratio",1,SWIGTYPE_p_uiImageNode_t);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  uiImageNode_t_set_keepratio(arg1,arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_uiImage_set_mousefx(lua_State* L) {
  int SWIG_arg = 0;
  uiImageNode_t *arg1 = (uiImageNode_t *) 0 ;
  bool arg2 ;
  
  SWIG_check_num_args("uiImageNode_t::set_mousefx",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("uiImageNode_t::set_mousefx",1,"uiImageNode_t *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("uiImageNode_t::set_mousefx",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_uiImageNode_t,0))){
    SWIG_fail_ptr("uiImage_set_mousefx",1,SWIGTYPE_p_uiImageNode_t);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  uiImageNode_t_set_mousefx(arg1,arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_uiImage_set_source(lua_State* L) {
  int SWIG_arg = 0;
  uiImageNode_t *arg1 = (uiImageNode_t *) 0 ;
  char *arg2 = (char *) 0 ;
  
  SWIG_check_num_args("uiImageNode_t::set_source",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("uiImageNode_t::set_source",1,"uiImageNode_t *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("uiImageNode_t::set_source",2,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_uiImageNode_t,0))){
    SWIG_fail_ptr("uiImage_set_source",1,SWIGTYPE_p_uiImageNode_t);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  uiImageNode_t_set_source(arg1,(char const *)arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_uiImage_set_texh(lua_State* L) {
  int SWIG_arg = 0;
  uiImageNode_t *arg1 = (uiImageNode_t *) 0 ;
  float arg2 ;
  float arg3 ;
  
  SWIG_check_num_args("uiImageNode_t::set_texh",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("uiImageNode_t::set_texh",1,"uiImageNode_t *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("uiImageNode_t::set_texh",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("uiImageNode_t::set_texh",3,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_uiImageNode_t,0))){
    SWIG_fail_ptr("uiImage_set_texh",1,SWIGTYPE_p_uiImageNode_t);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3);
  uiImageNode_t_set_texh(arg1,arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_uiImage_set_texl(lua_State* L) {
  int SWIG_arg = 0;
  uiImageNode_t *arg1 = (uiImageNode_t *) 0 ;
  float arg2 ;
  float arg3 ;
  
  SWIG_check_num_args("uiImageNode_t::set_texl",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("uiImageNode_t::set_texl",1,"uiImageNode_t *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("uiImageNode_t::set_texl",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("uiImageNode_t::set_texl",3,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_uiImageNode_t,0))){
    SWIG_fail_ptr("uiImage_set_texl",1,SWIGTYPE_p_uiImageNode_t);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3);
  uiImageNode_t_set_texl(arg1,arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_uiImage(lua_State* L) {
  int SWIG_arg = 0;
  uiImageNode_t *result = 0 ;
  
  SWIG_check_num_args("uiImageNode_t::uiImageNode_t",0,0)
  result = (uiImageNode_t *)new uiImageNode_t();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_uiImageNode_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_uiImage(void *obj) {
uiImageNode_t *arg1 = (uiImageNode_t *) obj;
delete arg1;
}
static int _proxy__wrap_new_uiImage(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_uiImage);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_uiImage_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_uiImage_methods[]= {
    { "is_keepratio", _wrap_uiImage_is_keepratio},
    { "is_mousefx", _wrap_uiImage_is_mousefx},
    { "texh", _wrap_uiImage_texh},
    { "texl", _wrap_uiImage_texl},
    { "set_keepratio", _wrap_uiImage_set_keepratio},
    { "set_mousefx", _wrap_uiImage_set_mousefx},
    { "set_source", _wrap_uiImage_set_source},
    { "set_texh", _wrap_uiImage_set_texh},
    { "set_texl", _wrap_uiImage_set_texl},
    {0,0}
};
static swig_lua_method swig_uiImage_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_uiImage_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_uiImage_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_uiImage_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_uiImage_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_uiImage_Sf_SwigStatic = {
    "uiImage",
    swig_uiImage_Sf_SwigStatic_methods,
    swig_uiImage_Sf_SwigStatic_attributes,
    swig_uiImage_Sf_SwigStatic_constants,
    swig_uiImage_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_uiImage_bases[] = {0,0};
static const char *swig_uiImage_base_names[] = {"uiNode_t *",0};
static swig_lua_class _wrap_class_uiImage = { "uiImage", "uiImage", &SWIGTYPE_p_uiImageNode_t,_proxy__wrap_new_uiImage, swig_delete_uiImage, swig_uiImage_methods, swig_uiImage_attributes, &swig_uiImage_Sf_SwigStatic, swig_uiImage_meta, swig_uiImage_bases, swig_uiImage_base_names };

static int _wrap_uiEkg_scrollspeed(lua_State* L) {
  int SWIG_arg = 0;
  uiEkgNode_t *arg1 = (uiEkgNode_t *) 0 ;
  float result;
  
  SWIG_check_num_args("uiEkgNode_t::scrollspeed",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("uiEkgNode_t::scrollspeed",1,"uiEkgNode_t *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_uiEkgNode_t,0))){
    SWIG_fail_ptr("uiEkg_scrollspeed",1,SWIGTYPE_p_uiEkgNode_t);
  }
  
  result = (float)uiEkgNode_t_scrollspeed(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_uiEkg_cvarscale(lua_State* L) {
  int SWIG_arg = 0;
  uiEkgNode_t *arg1 = (uiEkgNode_t *) 0 ;
  float result;
  
  SWIG_check_num_args("uiEkgNode_t::cvarscale",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("uiEkgNode_t::cvarscale",1,"uiEkgNode_t *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_uiEkgNode_t,0))){
    SWIG_fail_ptr("uiEkg_cvarscale",1,SWIGTYPE_p_uiEkgNode_t);
  }
  
  result = (float)uiEkgNode_t_cvarscale(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_uiEkg_set_scrollspeed(lua_State* L) {
  int SWIG_arg = 0;
  uiEkgNode_t *arg1 = (uiEkgNode_t *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("uiEkgNode_t::set_scrollspeed",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("uiEkgNode_t::set_scrollspeed",1,"uiEkgNode_t *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("uiEkgNode_t::set_scrollspeed",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_uiEkgNode_t,0))){
    SWIG_fail_ptr("uiEkg_set_scrollspeed",1,SWIGTYPE_p_uiEkgNode_t);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  uiEkgNode_t_set_scrollspeed(arg1,arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_uiEkg_set_cvarscale(lua_State* L) {
  int SWIG_arg = 0;
  uiEkgNode_t *arg1 = (uiEkgNode_t *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("uiEkgNode_t::set_cvarscale",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("uiEkgNode_t::set_cvarscale",1,"uiEkgNode_t *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("uiEkgNode_t::set_cvarscale",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_uiEkgNode_t,0))){
    SWIG_fail_ptr("uiEkg_set_cvarscale",1,SWIGTYPE_p_uiEkgNode_t);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  uiEkgNode_t_set_cvarscale(arg1,arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_uiEkg(lua_State* L) {
  int SWIG_arg = 0;
  uiEkgNode_t *result = 0 ;
  
  SWIG_check_num_args("uiEkgNode_t::uiEkgNode_t",0,0)
  result = (uiEkgNode_t *)new uiEkgNode_t();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_uiEkgNode_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_uiEkg(void *obj) {
uiEkgNode_t *arg1 = (uiEkgNode_t *) obj;
delete arg1;
}
static int _proxy__wrap_new_uiEkg(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_uiEkg);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_uiEkg_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_uiEkg_methods[]= {
    { "scrollspeed", _wrap_uiEkg_scrollspeed},
    { "cvarscale", _wrap_uiEkg_cvarscale},
    { "set_scrollspeed", _wrap_uiEkg_set_scrollspeed},
    { "set_cvarscale", _wrap_uiEkg_set_cvarscale},
    {0,0}
};
static swig_lua_method swig_uiEkg_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_uiEkg_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_uiEkg_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_uiEkg_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_uiEkg_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_uiEkg_Sf_SwigStatic = {
    "uiEkg",
    swig_uiEkg_Sf_SwigStatic_methods,
    swig_uiEkg_Sf_SwigStatic_attributes,
    swig_uiEkg_Sf_SwigStatic_constants,
    swig_uiEkg_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_uiEkg_bases[] = {0,0};
static const char *swig_uiEkg_base_names[] = {"uiImageNode_t *",0};
static swig_lua_class _wrap_class_uiEkg = { "uiEkg", "uiEkg", &SWIGTYPE_p_uiEkgNode_t,_proxy__wrap_new_uiEkg, swig_delete_uiEkg, swig_uiEkg_methods, swig_uiEkg_attributes, &swig_uiEkg_Sf_SwigStatic, swig_uiEkg_meta, swig_uiEkg_bases, swig_uiEkg_base_names };

static int _wrap_uiLineChart_is_showaxes(lua_State* L) {
  int SWIG_arg = 0;
  uiLineChartNode_t *arg1 = (uiLineChartNode_t *) 0 ;
  bool result;
  
  SWIG_check_num_args("uiLineChartNode_t::is_showaxes",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("uiLineChartNode_t::is_showaxes",1,"uiLineChartNode_t *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_uiLineChartNode_t,0))){
    SWIG_fail_ptr("uiLineChart_is_showaxes",1,SWIGTYPE_p_uiLineChartNode_t);
  }
  
  result = (bool)uiLineChartNode_t_is_showaxes(arg1);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_uiLineChart_dataid(lua_State* L) {
  int SWIG_arg = 0;
  uiLineChartNode_t *arg1 = (uiLineChartNode_t *) 0 ;
  int result;
  
  SWIG_check_num_args("uiLineChartNode_t::dataid",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("uiLineChartNode_t::dataid",1,"uiLineChartNode_t *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_uiLineChartNode_t,0))){
    SWIG_fail_ptr("uiLineChart_dataid",1,SWIGTYPE_p_uiLineChartNode_t);
  }
  
  result = (int)uiLineChartNode_t_dataid(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_uiLineChart_set_dataid(lua_State* L) {
  int SWIG_arg = 0;
  uiLineChartNode_t *arg1 = (uiLineChartNode_t *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("uiLineChartNode_t::set_dataid",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("uiLineChartNode_t::set_dataid",1,"uiLineChartNode_t *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("uiLineChartNode_t::set_dataid",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_uiLineChartNode_t,0))){
    SWIG_fail_ptr("uiLineChart_set_dataid",1,SWIGTYPE_p_uiLineChartNode_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  uiLineChartNode_t_set_dataid(arg1,arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_uiLineChart_set_showaxes(lua_State* L) {
  int SWIG_arg = 0;
  uiLineChartNode_t *arg1 = (uiLineChartNode_t *) 0 ;
  bool arg2 ;
  
  SWIG_check_num_args("uiLineChartNode_t::set_showaxes",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("uiLineChartNode_t::set_showaxes",1,"uiLineChartNode_t *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("uiLineChartNode_t::set_showaxes",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_uiLineChartNode_t,0))){
    SWIG_fail_ptr("uiLineChart_set_showaxes",1,SWIGTYPE_p_uiLineChartNode_t);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  uiLineChartNode_t_set_showaxes(arg1,arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_uiLineChart_set_axescolor(lua_State* L) {
  int SWIG_arg = 0;
  uiLineChartNode_t *arg1 = (uiLineChartNode_t *) 0 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  
  SWIG_check_num_args("uiLineChartNode_t::set_axescolor",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("uiLineChartNode_t::set_axescolor",1,"uiLineChartNode_t *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("uiLineChartNode_t::set_axescolor",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("uiLineChartNode_t::set_axescolor",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("uiLineChartNode_t::set_axescolor",4,"float");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("uiLineChartNode_t::set_axescolor",5,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_uiLineChartNode_t,0))){
    SWIG_fail_ptr("uiLineChart_set_axescolor",1,SWIGTYPE_p_uiLineChartNode_t);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3);
  arg4 = (float)lua_tonumber(L, 4);
  arg5 = (float)lua_tonumber(L, 5);
  uiLineChartNode_t_set_axescolor(arg1,arg2,arg3,arg4,arg5);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_uiLineChart(lua_State* L) {
  int SWIG_arg = 0;
  uiLineChartNode_t *result = 0 ;
  
  SWIG_check_num_args("uiLineChartNode_t::uiLineChartNode_t",0,0)
  result = (uiLineChartNode_t *)new uiLineChartNode_t();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_uiLineChartNode_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_uiLineChart(void *obj) {
uiLineChartNode_t *arg1 = (uiLineChartNode_t *) obj;
delete arg1;
}
static int _proxy__wrap_new_uiLineChart(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_uiLineChart);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_uiLineChart_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_uiLineChart_methods[]= {
    { "is_showaxes", _wrap_uiLineChart_is_showaxes},
    { "dataid", _wrap_uiLineChart_dataid},
    { "set_dataid", _wrap_uiLineChart_set_dataid},
    { "set_showaxes", _wrap_uiLineChart_set_showaxes},
    { "set_axescolor", _wrap_uiLineChart_set_axescolor},
    {0,0}
};
static swig_lua_method swig_uiLineChart_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_uiLineChart_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_uiLineChart_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_uiLineChart_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_uiLineChart_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_uiLineChart_Sf_SwigStatic = {
    "uiLineChart",
    swig_uiLineChart_Sf_SwigStatic_methods,
    swig_uiLineChart_Sf_SwigStatic_attributes,
    swig_uiLineChart_Sf_SwigStatic_constants,
    swig_uiLineChart_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_uiLineChart_bases[] = {0,0};
static const char *swig_uiLineChart_base_names[] = {"uiNode_t *",0};
static swig_lua_class _wrap_class_uiLineChart = { "uiLineChart", "uiLineChart", &SWIGTYPE_p_uiLineChartNode_t,_proxy__wrap_new_uiLineChart, swig_delete_uiLineChart, swig_uiLineChart_methods, swig_uiLineChart_attributes, &swig_uiLineChart_Sf_SwigStatic, swig_uiLineChart_meta, swig_uiLineChart_bases, swig_uiLineChart_base_names };

static int _wrap_new_uiMessageList(lua_State* L) {
  int SWIG_arg = 0;
  uiMessageListNode_t *result = 0 ;
  
  SWIG_check_num_args("uiMessageListNode_t::uiMessageListNode_t",0,0)
  result = (uiMessageListNode_t *)new uiMessageListNode_t();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_uiMessageListNode_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_uiMessageList(void *obj) {
uiMessageListNode_t *arg1 = (uiMessageListNode_t *) obj;
delete arg1;
}
static int _proxy__wrap_new_uiMessageList(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_uiMessageList);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_uiMessageList_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_uiMessageList_methods[]= {
    {0,0}
};
static swig_lua_method swig_uiMessageList_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_uiMessageList_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_uiMessageList_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_uiMessageList_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_uiMessageList_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_uiMessageList_Sf_SwigStatic = {
    "uiMessageList",
    swig_uiMessageList_Sf_SwigStatic_methods,
    swig_uiMessageList_Sf_SwigStatic_attributes,
    swig_uiMessageList_Sf_SwigStatic_constants,
    swig_uiMessageList_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_uiMessageList_bases[] = {0,0};
static const char *swig_uiMessageList_base_names[] = {"uiAbstractScrollableNode_t *",0};
static swig_lua_class _wrap_class_uiMessageList = { "uiMessageList", "uiMessageList", &SWIGTYPE_p_uiMessageListNode_t,_proxy__wrap_new_uiMessageList, swig_delete_uiMessageList, swig_uiMessageList_methods, swig_uiMessageList_attributes, &swig_uiMessageList_Sf_SwigStatic, swig_uiMessageList_meta, swig_uiMessageList_bases, swig_uiMessageList_base_names };

static int _wrap_uiModel_is_autoscale(lua_State* L) {
  int SWIG_arg = 0;
  uiModelNode_t *arg1 = (uiModelNode_t *) 0 ;
  bool result;
  
  SWIG_check_num_args("uiModelNode_t::is_autoscale",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("uiModelNode_t::is_autoscale",1,"uiModelNode_t *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_uiModelNode_t,0))){
    SWIG_fail_ptr("uiModel_is_autoscale",1,SWIGTYPE_p_uiModelNode_t);
  }
  
  result = (bool)uiModelNode_t_is_autoscale(arg1);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_uiModel_is_mouserotate(lua_State* L) {
  int SWIG_arg = 0;
  uiModelNode_t *arg1 = (uiModelNode_t *) 0 ;
  bool result;
  
  SWIG_check_num_args("uiModelNode_t::is_mouserotate",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("uiModelNode_t::is_mouserotate",1,"uiModelNode_t *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_uiModelNode_t,0))){
    SWIG_fail_ptr("uiModel_is_mouserotate",1,SWIGTYPE_p_uiModelNode_t);
  }
  
  result = (bool)uiModelNode_t_is_mouserotate(arg1);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_uiModel_angles(lua_State* L) {
  int SWIG_arg = 0;
  uiModelNode_t *arg1 = (uiModelNode_t *) 0 ;
  vec3_struct_t *result = 0 ;
  
  SWIG_check_num_args("uiModelNode_t::angles",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("uiModelNode_t::angles",1,"uiModelNode_t *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_uiModelNode_t,0))){
    SWIG_fail_ptr("uiModel_angles",1,SWIGTYPE_p_uiModelNode_t);
  }
  
  result = (vec3_struct_t *)uiModelNode_t_angles(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_vec3_struct_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_uiModel_origin(lua_State* L) {
  int SWIG_arg = 0;
  uiModelNode_t *arg1 = (uiModelNode_t *) 0 ;
  vec3_struct_t *result = 0 ;
  
  SWIG_check_num_args("uiModelNode_t::origin",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("uiModelNode_t::origin",1,"uiModelNode_t *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_uiModelNode_t,0))){
    SWIG_fail_ptr("uiModel_origin",1,SWIGTYPE_p_uiModelNode_t);
  }
  
  result = (vec3_struct_t *)uiModelNode_t_origin(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_vec3_struct_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_uiModel_omega(lua_State* L) {
  int SWIG_arg = 0;
  uiModelNode_t *arg1 = (uiModelNode_t *) 0 ;
  vec3_struct_t *result = 0 ;
  
  SWIG_check_num_args("uiModelNode_t::omega",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("uiModelNode_t::omega",1,"uiModelNode_t *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_uiModelNode_t,0))){
    SWIG_fail_ptr("uiModel_omega",1,SWIGTYPE_p_uiModelNode_t);
  }
  
  result = (vec3_struct_t *)uiModelNode_t_omega(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_vec3_struct_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_uiModel_scale(lua_State* L) {
  int SWIG_arg = 0;
  uiModelNode_t *arg1 = (uiModelNode_t *) 0 ;
  vec3_struct_t *result = 0 ;
  
  SWIG_check_num_args("uiModelNode_t::scale",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("uiModelNode_t::scale",1,"uiModelNode_t *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_uiModelNode_t,0))){
    SWIG_fail_ptr("uiModel_scale",1,SWIGTYPE_p_uiModelNode_t);
  }
  
  result = (vec3_struct_t *)uiModelNode_t_scale(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_vec3_struct_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_uiModel_model(lua_State* L) {
  int SWIG_arg = 0;
  uiModelNode_t *arg1 = (uiModelNode_t *) 0 ;
  char *result = 0 ;
  
  SWIG_check_num_args("uiModelNode_t::model",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("uiModelNode_t::model",1,"uiModelNode_t *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_uiModelNode_t,0))){
    SWIG_fail_ptr("uiModel_model",1,SWIGTYPE_p_uiModelNode_t);
  }
  
  result = (char *)uiModelNode_t_model(arg1);
  lua_pushstring(L,(const char *)result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_uiModel_skin(lua_State* L) {
  int SWIG_arg = 0;
  uiModelNode_t *arg1 = (uiModelNode_t *) 0 ;
  char *result = 0 ;
  
  SWIG_check_num_args("uiModelNode_t::skin",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("uiModelNode_t::skin",1,"uiModelNode_t *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_uiModelNode_t,0))){
    SWIG_fail_ptr("uiModel_skin",1,SWIGTYPE_p_uiModelNode_t);
  }
  
  result = (char *)uiModelNode_t_skin(arg1);
  lua_pushstring(L,(const char *)result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_uiModel_animation(lua_State* L) {
  int SWIG_arg = 0;
  uiModelNode_t *arg1 = (uiModelNode_t *) 0 ;
  char *result = 0 ;
  
  SWIG_check_num_args("uiModelNode_t::animation",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("uiModelNode_t::animation",1,"uiModelNode_t *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_uiModelNode_t,0))){
    SWIG_fail_ptr("uiModel_animation",1,SWIGTYPE_p_uiModelNode_t);
  }
  
  result = (char *)uiModelNode_t_animation(arg1);
  lua_pushstring(L,(const char *)result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_uiModel_tag(lua_State* L) {
  int SWIG_arg = 0;
  uiModelNode_t *arg1 = (uiModelNode_t *) 0 ;
  char *result = 0 ;
  
  SWIG_check_num_args("uiModelNode_t::tag",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("uiModelNode_t::tag",1,"uiModelNode_t *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_uiModelNode_t,0))){
    SWIG_fail_ptr("uiModel_tag",1,SWIGTYPE_p_uiModelNode_t);
  }
  
  result = (char *)uiModelNode_t_tag(arg1);
  lua_pushstring(L,(const char *)result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_uiModel_set_autoscale(lua_State* L) {
  int SWIG_arg = 0;
  uiModelNode_t *arg1 = (uiModelNode_t *) 0 ;
  bool arg2 ;
  
  SWIG_check_num_args("uiModelNode_t::set_autoscale",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("uiModelNode_t::set_autoscale",1,"uiModelNode_t *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("uiModelNode_t::set_autoscale",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_uiModelNode_t,0))){
    SWIG_fail_ptr("uiModel_set_autoscale",1,SWIGTYPE_p_uiModelNode_t);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  uiModelNode_t_set_autoscale(arg1,arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_uiModel_set_mouserotate(lua_State* L) {
  int SWIG_arg = 0;
  uiModelNode_t *arg1 = (uiModelNode_t *) 0 ;
  bool arg2 ;
  
  SWIG_check_num_args("uiModelNode_t::set_mouserotate",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("uiModelNode_t::set_mouserotate",1,"uiModelNode_t *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("uiModelNode_t::set_mouserotate",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_uiModelNode_t,0))){
    SWIG_fail_ptr("uiModel_set_mouserotate",1,SWIGTYPE_p_uiModelNode_t);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  uiModelNode_t_set_mouserotate(arg1,arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_uiModel_set_angles(lua_State* L) {
  int SWIG_arg = 0;
  uiModelNode_t *arg1 = (uiModelNode_t *) 0 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  
  SWIG_check_num_args("uiModelNode_t::set_angles",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("uiModelNode_t::set_angles",1,"uiModelNode_t *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("uiModelNode_t::set_angles",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("uiModelNode_t::set_angles",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("uiModelNode_t::set_angles",4,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_uiModelNode_t,0))){
    SWIG_fail_ptr("uiModel_set_angles",1,SWIGTYPE_p_uiModelNode_t);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3);
  arg4 = (float)lua_tonumber(L, 4);
  uiModelNode_t_set_angles(arg1,arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_uiModel_set_origin(lua_State* L) {
  int SWIG_arg = 0;
  uiModelNode_t *arg1 = (uiModelNode_t *) 0 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  
  SWIG_check_num_args("uiModelNode_t::set_origin",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("uiModelNode_t::set_origin",1,"uiModelNode_t *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("uiModelNode_t::set_origin",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("uiModelNode_t::set_origin",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("uiModelNode_t::set_origin",4,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_uiModelNode_t,0))){
    SWIG_fail_ptr("uiModel_set_origin",1,SWIGTYPE_p_uiModelNode_t);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3);
  arg4 = (float)lua_tonumber(L, 4);
  uiModelNode_t_set_origin(arg1,arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_uiModel_set_omega(lua_State* L) {
  int SWIG_arg = 0;
  uiModelNode_t *arg1 = (uiModelNode_t *) 0 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  
  SWIG_check_num_args("uiModelNode_t::set_omega",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("uiModelNode_t::set_omega",1,"uiModelNode_t *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("uiModelNode_t::set_omega",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("uiModelNode_t::set_omega",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("uiModelNode_t::set_omega",4,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_uiModelNode_t,0))){
    SWIG_fail_ptr("uiModel_set_omega",1,SWIGTYPE_p_uiModelNode_t);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3);
  arg4 = (float)lua_tonumber(L, 4);
  uiModelNode_t_set_omega(arg1,arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_uiModel_set_scale(lua_State* L) {
  int SWIG_arg = 0;
  uiModelNode_t *arg1 = (uiModelNode_t *) 0 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  
  SWIG_check_num_args("uiModelNode_t::set_scale",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("uiModelNode_t::set_scale",1,"uiModelNode_t *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("uiModelNode_t::set_scale",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("uiModelNode_t::set_scale",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("uiModelNode_t::set_scale",4,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_uiModelNode_t,0))){
    SWIG_fail_ptr("uiModel_set_scale",1,SWIGTYPE_p_uiModelNode_t);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3);
  arg4 = (float)lua_tonumber(L, 4);
  uiModelNode_t_set_scale(arg1,arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_uiModel_set_model(lua_State* L) {
  int SWIG_arg = 0;
  uiModelNode_t *arg1 = (uiModelNode_t *) 0 ;
  char *arg2 = (char *) 0 ;
  
  SWIG_check_num_args("uiModelNode_t::set_model",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("uiModelNode_t::set_model",1,"uiModelNode_t *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("uiModelNode_t::set_model",2,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_uiModelNode_t,0))){
    SWIG_fail_ptr("uiModel_set_model",1,SWIGTYPE_p_uiModelNode_t);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  uiModelNode_t_set_model(arg1,(char const *)arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_uiModel_set_skin(lua_State* L) {
  int SWIG_arg = 0;
  uiModelNode_t *arg1 = (uiModelNode_t *) 0 ;
  char *arg2 = (char *) 0 ;
  
  SWIG_check_num_args("uiModelNode_t::set_skin",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("uiModelNode_t::set_skin",1,"uiModelNode_t *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("uiModelNode_t::set_skin",2,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_uiModelNode_t,0))){
    SWIG_fail_ptr("uiModel_set_skin",1,SWIGTYPE_p_uiModelNode_t);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  uiModelNode_t_set_skin(arg1,(char const *)arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_uiModel_set_animation(lua_State* L) {
  int SWIG_arg = 0;
  uiModelNode_t *arg1 = (uiModelNode_t *) 0 ;
  char *arg2 = (char *) 0 ;
  
  SWIG_check_num_args("uiModelNode_t::set_animation",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("uiModelNode_t::set_animation",1,"uiModelNode_t *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("uiModelNode_t::set_animation",2,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_uiModelNode_t,0))){
    SWIG_fail_ptr("uiModel_set_animation",1,SWIGTYPE_p_uiModelNode_t);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  uiModelNode_t_set_animation(arg1,(char const *)arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_uiModel_set_tag(lua_State* L) {
  int SWIG_arg = 0;
  uiModelNode_t *arg1 = (uiModelNode_t *) 0 ;
  char *arg2 = (char *) 0 ;
  
  SWIG_check_num_args("uiModelNode_t::set_tag",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("uiModelNode_t::set_tag",1,"uiModelNode_t *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("uiModelNode_t::set_tag",2,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_uiModelNode_t,0))){
    SWIG_fail_ptr("uiModel_set_tag",1,SWIGTYPE_p_uiModelNode_t);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  uiModelNode_t_set_tag(arg1,(char const *)arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_uiModel(lua_State* L) {
  int SWIG_arg = 0;
  uiModelNode_t *result = 0 ;
  
  SWIG_check_num_args("uiModelNode_t::uiModelNode_t",0,0)
  result = (uiModelNode_t *)new uiModelNode_t();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_uiModelNode_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_uiModel(void *obj) {
uiModelNode_t *arg1 = (uiModelNode_t *) obj;
delete arg1;
}
static int _proxy__wrap_new_uiModel(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_uiModel);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_uiModel_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_uiModel_methods[]= {
    { "is_autoscale", _wrap_uiModel_is_autoscale},
    { "is_mouserotate", _wrap_uiModel_is_mouserotate},
    { "angles", _wrap_uiModel_angles},
    { "origin", _wrap_uiModel_origin},
    { "omega", _wrap_uiModel_omega},
    { "scale", _wrap_uiModel_scale},
    { "model", _wrap_uiModel_model},
    { "skin", _wrap_uiModel_skin},
    { "animation", _wrap_uiModel_animation},
    { "tag", _wrap_uiModel_tag},
    { "set_autoscale", _wrap_uiModel_set_autoscale},
    { "set_mouserotate", _wrap_uiModel_set_mouserotate},
    { "set_angles", _wrap_uiModel_set_angles},
    { "set_origin", _wrap_uiModel_set_origin},
    { "set_omega", _wrap_uiModel_set_omega},
    { "set_scale", _wrap_uiModel_set_scale},
    { "set_model", _wrap_uiModel_set_model},
    { "set_skin", _wrap_uiModel_set_skin},
    { "set_animation", _wrap_uiModel_set_animation},
    { "set_tag", _wrap_uiModel_set_tag},
    {0,0}
};
static swig_lua_method swig_uiModel_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_uiModel_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_uiModel_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_uiModel_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_uiModel_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_uiModel_Sf_SwigStatic = {
    "uiModel",
    swig_uiModel_Sf_SwigStatic_methods,
    swig_uiModel_Sf_SwigStatic_attributes,
    swig_uiModel_Sf_SwigStatic_constants,
    swig_uiModel_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_uiModel_bases[] = {0,0};
static const char *swig_uiModel_base_names[] = {"uiNode_t *",0};
static swig_lua_class _wrap_class_uiModel = { "uiModel", "uiModel", &SWIGTYPE_p_uiModelNode_t,_proxy__wrap_new_uiModel, swig_delete_uiModel, swig_uiModel_methods, swig_uiModel_attributes, &swig_uiModel_Sf_SwigStatic, swig_uiModel_meta, swig_uiModel_bases, swig_uiModel_base_names };

static int _wrap_uiItem_is_containerlike(lua_State* L) {
  int SWIG_arg = 0;
  uiItemNode_t *arg1 = (uiItemNode_t *) 0 ;
  bool result;
  
  SWIG_check_num_args("uiItemNode_t::is_containerlike",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("uiItemNode_t::is_containerlike",1,"uiItemNode_t *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_uiItemNode_t,0))){
    SWIG_fail_ptr("uiItem_is_containerlike",1,SWIGTYPE_p_uiItemNode_t);
  }
  
  result = (bool)uiItemNode_t_is_containerlike(arg1);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_uiItem_set_containerlike(lua_State* L) {
  int SWIG_arg = 0;
  uiItemNode_t *arg1 = (uiItemNode_t *) 0 ;
  bool arg2 ;
  
  SWIG_check_num_args("uiItemNode_t::set_containerlike",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("uiItemNode_t::set_containerlike",1,"uiItemNode_t *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("uiItemNode_t::set_containerlike",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_uiItemNode_t,0))){
    SWIG_fail_ptr("uiItem_set_containerlike",1,SWIGTYPE_p_uiItemNode_t);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  uiItemNode_t_set_containerlike(arg1,arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_uiItem(lua_State* L) {
  int SWIG_arg = 0;
  uiItemNode_t *result = 0 ;
  
  SWIG_check_num_args("uiItemNode_t::uiItemNode_t",0,0)
  result = (uiItemNode_t *)new uiItemNode_t();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_uiItemNode_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_uiItem(void *obj) {
uiItemNode_t *arg1 = (uiItemNode_t *) obj;
delete arg1;
}
static int _proxy__wrap_new_uiItem(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_uiItem);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_uiItem_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_uiItem_methods[]= {
    { "is_containerlike", _wrap_uiItem_is_containerlike},
    { "set_containerlike", _wrap_uiItem_set_containerlike},
    {0,0}
};
static swig_lua_method swig_uiItem_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_uiItem_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_uiItem_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_uiItem_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_uiItem_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_uiItem_Sf_SwigStatic = {
    "uiItem",
    swig_uiItem_Sf_SwigStatic_methods,
    swig_uiItem_Sf_SwigStatic_attributes,
    swig_uiItem_Sf_SwigStatic_constants,
    swig_uiItem_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_uiItem_bases[] = {0,0};
static const char *swig_uiItem_base_names[] = {"uiModelNode_t *",0};
static swig_lua_class _wrap_class_uiItem = { "uiItem", "uiItem", &SWIGTYPE_p_uiItemNode_t,_proxy__wrap_new_uiItem, swig_delete_uiItem, swig_uiItem_methods, swig_uiItem_attributes, &swig_uiItem_Sf_SwigStatic, swig_uiItem_meta, swig_uiItem_bases, swig_uiItem_base_names };

static int _wrap_uiOption_is_collapsed(lua_State* L) {
  int SWIG_arg = 0;
  uiOptionNode_t *arg1 = (uiOptionNode_t *) 0 ;
  bool result;
  
  SWIG_check_num_args("uiOptionNode_t::is_collapsed",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("uiOptionNode_t::is_collapsed",1,"uiOptionNode_t *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_uiOptionNode_t,0))){
    SWIG_fail_ptr("uiOption_is_collapsed",1,SWIGTYPE_p_uiOptionNode_t);
  }
  
  result = (bool)uiOptionNode_t_is_collapsed(arg1);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_uiOption_is_flipicion(lua_State* L) {
  int SWIG_arg = 0;
  uiOptionNode_t *arg1 = (uiOptionNode_t *) 0 ;
  bool result;
  
  SWIG_check_num_args("uiOptionNode_t::is_flipicion",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("uiOptionNode_t::is_flipicion",1,"uiOptionNode_t *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_uiOptionNode_t,0))){
    SWIG_fail_ptr("uiOption_is_flipicion",1,SWIGTYPE_p_uiOptionNode_t);
  }
  
  result = (bool)uiOptionNode_t_is_flipicion(arg1);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_uiOption_is_truncated(lua_State* L) {
  int SWIG_arg = 0;
  uiOptionNode_t *arg1 = (uiOptionNode_t *) 0 ;
  bool result;
  
  SWIG_check_num_args("uiOptionNode_t::is_truncated",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("uiOptionNode_t::is_truncated",1,"uiOptionNode_t *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_uiOptionNode_t,0))){
    SWIG_fail_ptr("uiOption_is_truncated",1,SWIGTYPE_p_uiOptionNode_t);
  }
  
  result = (bool)uiOptionNode_t_is_truncated(arg1);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_uiOption_label(lua_State* L) {
  int SWIG_arg = 0;
  uiOptionNode_t *arg1 = (uiOptionNode_t *) 0 ;
  char *result = 0 ;
  
  SWIG_check_num_args("uiOptionNode_t::label",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("uiOptionNode_t::label",1,"uiOptionNode_t *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_uiOptionNode_t,0))){
    SWIG_fail_ptr("uiOption_label",1,SWIGTYPE_p_uiOptionNode_t);
  }
  
  result = (char *)uiOptionNode_t_label(arg1);
  lua_pushstring(L,(const char *)result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_uiOption_value(lua_State* L) {
  int SWIG_arg = 0;
  uiOptionNode_t *arg1 = (uiOptionNode_t *) 0 ;
  char *result = 0 ;
  
  SWIG_check_num_args("uiOptionNode_t::value",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("uiOptionNode_t::value",1,"uiOptionNode_t *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_uiOptionNode_t,0))){
    SWIG_fail_ptr("uiOption_value",1,SWIGTYPE_p_uiOptionNode_t);
  }
  
  result = (char *)uiOptionNode_t_value(arg1);
  lua_pushstring(L,(const char *)result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_uiOption_count(lua_State* L) {
  int SWIG_arg = 0;
  uiOptionNode_t *arg1 = (uiOptionNode_t *) 0 ;
  int result;
  
  SWIG_check_num_args("uiOptionNode_t::count",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("uiOptionNode_t::count",1,"uiOptionNode_t *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_uiOptionNode_t,0))){
    SWIG_fail_ptr("uiOption_count",1,SWIGTYPE_p_uiOptionNode_t);
  }
  
  result = (int)uiOptionNode_t_count(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_uiOption_set_label(lua_State* L) {
  int SWIG_arg = 0;
  uiOptionNode_t *arg1 = (uiOptionNode_t *) 0 ;
  char *arg2 = (char *) 0 ;
  
  SWIG_check_num_args("uiOptionNode_t::set_label",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("uiOptionNode_t::set_label",1,"uiOptionNode_t *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("uiOptionNode_t::set_label",2,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_uiOptionNode_t,0))){
    SWIG_fail_ptr("uiOption_set_label",1,SWIGTYPE_p_uiOptionNode_t);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  uiOptionNode_t_set_label(arg1,(char const *)arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_uiOption_set_value(lua_State* L) {
  int SWIG_arg = 0;
  uiOptionNode_t *arg1 = (uiOptionNode_t *) 0 ;
  char *arg2 = (char *) 0 ;
  
  SWIG_check_num_args("uiOptionNode_t::set_value",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("uiOptionNode_t::set_value",1,"uiOptionNode_t *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("uiOptionNode_t::set_value",2,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_uiOptionNode_t,0))){
    SWIG_fail_ptr("uiOption_set_value",1,SWIGTYPE_p_uiOptionNode_t);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  uiOptionNode_t_set_value(arg1,(char const *)arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_uiOption_set_collapsed(lua_State* L) {
  int SWIG_arg = 0;
  uiOptionNode_t *arg1 = (uiOptionNode_t *) 0 ;
  bool arg2 ;
  
  SWIG_check_num_args("uiOptionNode_t::set_collapsed",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("uiOptionNode_t::set_collapsed",1,"uiOptionNode_t *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("uiOptionNode_t::set_collapsed",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_uiOptionNode_t,0))){
    SWIG_fail_ptr("uiOption_set_collapsed",1,SWIGTYPE_p_uiOptionNode_t);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  uiOptionNode_t_set_collapsed(arg1,arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_uiOption_set_flipicion(lua_State* L) {
  int SWIG_arg = 0;
  uiOptionNode_t *arg1 = (uiOptionNode_t *) 0 ;
  bool arg2 ;
  
  SWIG_check_num_args("uiOptionNode_t::set_flipicion",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("uiOptionNode_t::set_flipicion",1,"uiOptionNode_t *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("uiOptionNode_t::set_flipicion",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_uiOptionNode_t,0))){
    SWIG_fail_ptr("uiOption_set_flipicion",1,SWIGTYPE_p_uiOptionNode_t);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  uiOptionNode_t_set_flipicion(arg1,arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_uiOption_set_truncated(lua_State* L) {
  int SWIG_arg = 0;
  uiOptionNode_t *arg1 = (uiOptionNode_t *) 0 ;
  bool arg2 ;
  
  SWIG_check_num_args("uiOptionNode_t::set_truncated",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("uiOptionNode_t::set_truncated",1,"uiOptionNode_t *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("uiOptionNode_t::set_truncated",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_uiOptionNode_t,0))){
    SWIG_fail_ptr("uiOption_set_truncated",1,SWIGTYPE_p_uiOptionNode_t);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  uiOptionNode_t_set_truncated(arg1,arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_uiOption_set_icon(lua_State* L) {
  int SWIG_arg = 0;
  uiOptionNode_t *arg1 = (uiOptionNode_t *) 0 ;
  char *arg2 = (char *) 0 ;
  
  SWIG_check_num_args("uiOptionNode_t::set_icon",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("uiOptionNode_t::set_icon",1,"uiOptionNode_t *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("uiOptionNode_t::set_icon",2,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_uiOptionNode_t,0))){
    SWIG_fail_ptr("uiOption_set_icon",1,SWIGTYPE_p_uiOptionNode_t);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  uiOptionNode_t_set_icon(arg1,(char const *)arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_uiOption(lua_State* L) {
  int SWIG_arg = 0;
  uiOptionNode_t *result = 0 ;
  
  SWIG_check_num_args("uiOptionNode_t::uiOptionNode_t",0,0)
  result = (uiOptionNode_t *)new uiOptionNode_t();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_uiOptionNode_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_uiOption(void *obj) {
uiOptionNode_t *arg1 = (uiOptionNode_t *) obj;
delete arg1;
}
static int _proxy__wrap_new_uiOption(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_uiOption);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_uiOption_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_uiOption_methods[]= {
    { "is_collapsed", _wrap_uiOption_is_collapsed},
    { "is_flipicion", _wrap_uiOption_is_flipicion},
    { "is_truncated", _wrap_uiOption_is_truncated},
    { "label", _wrap_uiOption_label},
    { "value", _wrap_uiOption_value},
    { "count", _wrap_uiOption_count},
    { "set_label", _wrap_uiOption_set_label},
    { "set_value", _wrap_uiOption_set_value},
    { "set_collapsed", _wrap_uiOption_set_collapsed},
    { "set_flipicion", _wrap_uiOption_set_flipicion},
    { "set_truncated", _wrap_uiOption_set_truncated},
    { "set_icon", _wrap_uiOption_set_icon},
    {0,0}
};
static swig_lua_method swig_uiOption_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_uiOption_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_uiOption_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_uiOption_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_uiOption_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_uiOption_Sf_SwigStatic = {
    "uiOption",
    swig_uiOption_Sf_SwigStatic_methods,
    swig_uiOption_Sf_SwigStatic_attributes,
    swig_uiOption_Sf_SwigStatic_constants,
    swig_uiOption_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_uiOption_bases[] = {0,0};
static const char *swig_uiOption_base_names[] = {"uiNode_t *",0};
static swig_lua_class _wrap_class_uiOption = { "uiOption", "uiOption", &SWIGTYPE_p_uiOptionNode_t,_proxy__wrap_new_uiOption, swig_delete_uiOption, swig_uiOption_methods, swig_uiOption_attributes, &swig_uiOption_Sf_SwigStatic, swig_uiOption_meta, swig_uiOption_bases, swig_uiOption_base_names };

static int _wrap_new_uiOptionList(lua_State* L) {
  int SWIG_arg = 0;
  uiOptionListNode_t *result = 0 ;
  
  SWIG_check_num_args("uiOptionListNode_t::uiOptionListNode_t",0,0)
  result = (uiOptionListNode_t *)new uiOptionListNode_t();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_uiOptionListNode_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_uiOptionList(void *obj) {
uiOptionListNode_t *arg1 = (uiOptionListNode_t *) obj;
delete arg1;
}
static int _proxy__wrap_new_uiOptionList(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_uiOptionList);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_uiOptionList_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_uiOptionList_methods[]= {
    {0,0}
};
static swig_lua_method swig_uiOptionList_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_uiOptionList_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_uiOptionList_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_uiOptionList_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_uiOptionList_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_uiOptionList_Sf_SwigStatic = {
    "uiOptionList",
    swig_uiOptionList_Sf_SwigStatic_methods,
    swig_uiOptionList_Sf_SwigStatic_attributes,
    swig_uiOptionList_Sf_SwigStatic_constants,
    swig_uiOptionList_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_uiOptionList_bases[] = {0,0};
static const char *swig_uiOptionList_base_names[] = {"uiAbstractOptionNode_t *",0};
static swig_lua_class _wrap_class_uiOptionList = { "uiOptionList", "uiOptionList", &SWIGTYPE_p_uiOptionListNode_t,_proxy__wrap_new_uiOptionList, swig_delete_uiOptionList, swig_uiOptionList_methods, swig_uiOptionList_attributes, &swig_uiOptionList_Sf_SwigStatic, swig_uiOptionList_meta, swig_uiOptionList_bases, swig_uiOptionList_base_names };

static int _wrap_uiOptionTree_set_selectedvalue(lua_State* L) {
  int SWIG_arg = 0;
  uiOptionTreeNode_t *arg1 = (uiOptionTreeNode_t *) 0 ;
  char *arg2 = (char *) 0 ;
  
  SWIG_check_num_args("uiOptionTreeNode_t::set_selectedvalue",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("uiOptionTreeNode_t::set_selectedvalue",1,"uiOptionTreeNode_t *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("uiOptionTreeNode_t::set_selectedvalue",2,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_uiOptionTreeNode_t,0))){
    SWIG_fail_ptr("uiOptionTree_set_selectedvalue",1,SWIGTYPE_p_uiOptionTreeNode_t);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  uiOptionTreeNode_t_set_selectedvalue(arg1,(char const *)arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_uiOptionTree(lua_State* L) {
  int SWIG_arg = 0;
  uiOptionTreeNode_t *result = 0 ;
  
  SWIG_check_num_args("uiOptionTreeNode_t::uiOptionTreeNode_t",0,0)
  result = (uiOptionTreeNode_t *)new uiOptionTreeNode_t();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_uiOptionTreeNode_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_uiOptionTree(void *obj) {
uiOptionTreeNode_t *arg1 = (uiOptionTreeNode_t *) obj;
delete arg1;
}
static int _proxy__wrap_new_uiOptionTree(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_uiOptionTree);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_uiOptionTree_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_uiOptionTree_methods[]= {
    { "set_selectedvalue", _wrap_uiOptionTree_set_selectedvalue},
    {0,0}
};
static swig_lua_method swig_uiOptionTree_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_uiOptionTree_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_uiOptionTree_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_uiOptionTree_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_uiOptionTree_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_uiOptionTree_Sf_SwigStatic = {
    "uiOptionTree",
    swig_uiOptionTree_Sf_SwigStatic_methods,
    swig_uiOptionTree_Sf_SwigStatic_attributes,
    swig_uiOptionTree_Sf_SwigStatic_constants,
    swig_uiOptionTree_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_uiOptionTree_bases[] = {0,0};
static const char *swig_uiOptionTree_base_names[] = {"uiAbstractOptionNode_t *",0};
static swig_lua_class _wrap_class_uiOptionTree = { "uiOptionTree", "uiOptionTree", &SWIGTYPE_p_uiOptionTreeNode_t,_proxy__wrap_new_uiOptionTree, swig_delete_uiOptionTree, swig_uiOptionTree_methods, swig_uiOptionTree_attributes, &swig_uiOptionTree_Sf_SwigStatic, swig_uiOptionTree_meta, swig_uiOptionTree_bases, swig_uiOptionTree_base_names };

static int _wrap_uiPanel_is_wheelscrollable(lua_State* L) {
  int SWIG_arg = 0;
  uiPanelNode_t *arg1 = (uiPanelNode_t *) 0 ;
  bool result;
  
  SWIG_check_num_args("uiPanelNode_t::is_wheelscrollable",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("uiPanelNode_t::is_wheelscrollable",1,"uiPanelNode_t *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_uiPanelNode_t,0))){
    SWIG_fail_ptr("uiPanel_is_wheelscrollable",1,SWIGTYPE_p_uiPanelNode_t);
  }
  
  result = (bool)uiPanelNode_t_is_wheelscrollable(arg1);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_uiPanel_layout(lua_State* L) {
  int SWIG_arg = 0;
  uiPanelNode_t *arg1 = (uiPanelNode_t *) 0 ;
  int result;
  
  SWIG_check_num_args("uiPanelNode_t::layout",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("uiPanelNode_t::layout",1,"uiPanelNode_t *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_uiPanelNode_t,0))){
    SWIG_fail_ptr("uiPanel_layout",1,SWIGTYPE_p_uiPanelNode_t);
  }
  
  result = (int)uiPanelNode_t_layout(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_uiPanel_layoutmargin(lua_State* L) {
  int SWIG_arg = 0;
  uiPanelNode_t *arg1 = (uiPanelNode_t *) 0 ;
  int result;
  
  SWIG_check_num_args("uiPanelNode_t::layoutmargin",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("uiPanelNode_t::layoutmargin",1,"uiPanelNode_t *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_uiPanelNode_t,0))){
    SWIG_fail_ptr("uiPanel_layoutmargin",1,SWIGTYPE_p_uiPanelNode_t);
  }
  
  result = (int)uiPanelNode_t_layoutmargin(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_uiPanel_layoutcolumns(lua_State* L) {
  int SWIG_arg = 0;
  uiPanelNode_t *arg1 = (uiPanelNode_t *) 0 ;
  int result;
  
  SWIG_check_num_args("uiPanelNode_t::layoutcolumns",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("uiPanelNode_t::layoutcolumns",1,"uiPanelNode_t *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_uiPanelNode_t,0))){
    SWIG_fail_ptr("uiPanel_layoutcolumns",1,SWIGTYPE_p_uiPanelNode_t);
  }
  
  result = (int)uiPanelNode_t_layoutcolumns(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_uiPanel_set_layout(lua_State* L) {
  int SWIG_arg = 0;
  uiPanelNode_t *arg1 = (uiPanelNode_t *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("uiPanelNode_t::set_layout",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("uiPanelNode_t::set_layout",1,"uiPanelNode_t *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("uiPanelNode_t::set_layout",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_uiPanelNode_t,0))){
    SWIG_fail_ptr("uiPanel_set_layout",1,SWIGTYPE_p_uiPanelNode_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  uiPanelNode_t_set_layout(arg1,arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_uiPanel_set_layoutmargin(lua_State* L) {
  int SWIG_arg = 0;
  uiPanelNode_t *arg1 = (uiPanelNode_t *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("uiPanelNode_t::set_layoutmargin",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("uiPanelNode_t::set_layoutmargin",1,"uiPanelNode_t *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("uiPanelNode_t::set_layoutmargin",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_uiPanelNode_t,0))){
    SWIG_fail_ptr("uiPanel_set_layoutmargin",1,SWIGTYPE_p_uiPanelNode_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  uiPanelNode_t_set_layoutmargin(arg1,arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_uiPanel_set_layoutcolumns(lua_State* L) {
  int SWIG_arg = 0;
  uiPanelNode_t *arg1 = (uiPanelNode_t *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("uiPanelNode_t::set_layoutcolumns",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("uiPanelNode_t::set_layoutcolumns",1,"uiPanelNode_t *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("uiPanelNode_t::set_layoutcolumns",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_uiPanelNode_t,0))){
    SWIG_fail_ptr("uiPanel_set_layoutcolumns",1,SWIGTYPE_p_uiPanelNode_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  uiPanelNode_t_set_layoutcolumns(arg1,arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_uiPanel_set_wheelscrollable(lua_State* L) {
  int SWIG_arg = 0;
  uiPanelNode_t *arg1 = (uiPanelNode_t *) 0 ;
  bool arg2 ;
  
  SWIG_check_num_args("uiPanelNode_t::set_wheelscrollable",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("uiPanelNode_t::set_wheelscrollable",1,"uiPanelNode_t *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("uiPanelNode_t::set_wheelscrollable",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_uiPanelNode_t,0))){
    SWIG_fail_ptr("uiPanel_set_wheelscrollable",1,SWIGTYPE_p_uiPanelNode_t);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  uiPanelNode_t_set_wheelscrollable(arg1,arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_uiPanel_set_background(lua_State* L) {
  int SWIG_arg = 0;
  uiPanelNode_t *arg1 = (uiPanelNode_t *) 0 ;
  char *arg2 = (char *) 0 ;
  
  SWIG_check_num_args("uiPanelNode_t::set_background",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("uiPanelNode_t::set_background",1,"uiPanelNode_t *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("uiPanelNode_t::set_background",2,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_uiPanelNode_t,0))){
    SWIG_fail_ptr("uiPanel_set_background",1,SWIGTYPE_p_uiPanelNode_t);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  uiPanelNode_t_set_background(arg1,(char const *)arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_uiPanel(lua_State* L) {
  int SWIG_arg = 0;
  uiPanelNode_t *result = 0 ;
  
  SWIG_check_num_args("uiPanelNode_t::uiPanelNode_t",0,0)
  result = (uiPanelNode_t *)new uiPanelNode_t();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_uiPanelNode_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_uiPanel(void *obj) {
uiPanelNode_t *arg1 = (uiPanelNode_t *) obj;
delete arg1;
}
static int _proxy__wrap_new_uiPanel(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_uiPanel);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_uiPanel_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_uiPanel_methods[]= {
    { "is_wheelscrollable", _wrap_uiPanel_is_wheelscrollable},
    { "layout", _wrap_uiPanel_layout},
    { "layoutmargin", _wrap_uiPanel_layoutmargin},
    { "layoutcolumns", _wrap_uiPanel_layoutcolumns},
    { "set_layout", _wrap_uiPanel_set_layout},
    { "set_layoutmargin", _wrap_uiPanel_set_layoutmargin},
    { "set_layoutcolumns", _wrap_uiPanel_set_layoutcolumns},
    { "set_wheelscrollable", _wrap_uiPanel_set_wheelscrollable},
    { "set_background", _wrap_uiPanel_set_background},
    {0,0}
};
static swig_lua_method swig_uiPanel_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_uiPanel_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_uiPanel_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_uiPanel_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_uiPanel_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_uiPanel_Sf_SwigStatic = {
    "uiPanel",
    swig_uiPanel_Sf_SwigStatic_methods,
    swig_uiPanel_Sf_SwigStatic_attributes,
    swig_uiPanel_Sf_SwigStatic_constants,
    swig_uiPanel_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_uiPanel_bases[] = {0,0};
static const char *swig_uiPanel_base_names[] = {"uiAbstractScrollableNode_t *",0};
static swig_lua_class _wrap_class_uiPanel = { "uiPanel", "uiPanel", &SWIGTYPE_p_uiPanelNode_t,_proxy__wrap_new_uiPanel, swig_delete_uiPanel, swig_uiPanel_methods, swig_uiPanel_attributes, &swig_uiPanel_Sf_SwigStatic, swig_uiPanel_meta, swig_uiPanel_bases, swig_uiPanel_base_names };

static int _wrap_new_uiRadar(lua_State* L) {
  int SWIG_arg = 0;
  uiRadarNode_t *result = 0 ;
  
  SWIG_check_num_args("uiRadarNode_t::uiRadarNode_t",0,0)
  result = (uiRadarNode_t *)new uiRadarNode_t();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_uiRadarNode_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_uiRadar(void *obj) {
uiRadarNode_t *arg1 = (uiRadarNode_t *) obj;
delete arg1;
}
static int _proxy__wrap_new_uiRadar(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_uiRadar);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_uiRadar_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_uiRadar_methods[]= {
    {0,0}
};
static swig_lua_method swig_uiRadar_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_uiRadar_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_uiRadar_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_uiRadar_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_uiRadar_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_uiRadar_Sf_SwigStatic = {
    "uiRadar",
    swig_uiRadar_Sf_SwigStatic_methods,
    swig_uiRadar_Sf_SwigStatic_attributes,
    swig_uiRadar_Sf_SwigStatic_constants,
    swig_uiRadar_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_uiRadar_bases[] = {0,0};
static const char *swig_uiRadar_base_names[] = {"uiNode_t *",0};
static swig_lua_class _wrap_class_uiRadar = { "uiRadar", "uiRadar", &SWIGTYPE_p_uiRadarNode_t,_proxy__wrap_new_uiRadar, swig_delete_uiRadar, swig_uiRadar_methods, swig_uiRadar_attributes, &swig_uiRadar_Sf_SwigStatic, swig_uiRadar_meta, swig_uiRadar_bases, swig_uiRadar_base_names };

static int _wrap_uiRadioButton_is_flipicon(lua_State* L) {
  int SWIG_arg = 0;
  uiRadioButtonNode_t *arg1 = (uiRadioButtonNode_t *) 0 ;
  bool result;
  
  SWIG_check_num_args("uiRadioButtonNode_t::is_flipicon",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("uiRadioButtonNode_t::is_flipicon",1,"uiRadioButtonNode_t *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_uiRadioButtonNode_t,0))){
    SWIG_fail_ptr("uiRadioButton_is_flipicon",1,SWIGTYPE_p_uiRadioButtonNode_t);
  }
  
  result = (bool)uiRadioButtonNode_t_is_flipicon(arg1);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_uiRadioButton_as_string(lua_State* L) {
  int SWIG_arg = 0;
  uiRadioButtonNode_t *arg1 = (uiRadioButtonNode_t *) 0 ;
  char *result = 0 ;
  
  SWIG_check_num_args("uiRadioButtonNode_t::as_string",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("uiRadioButtonNode_t::as_string",1,"uiRadioButtonNode_t *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_uiRadioButtonNode_t,0))){
    SWIG_fail_ptr("uiRadioButton_as_string",1,SWIGTYPE_p_uiRadioButtonNode_t);
  }
  
  result = (char *)uiRadioButtonNode_t_as_string(arg1);
  lua_pushstring(L,(const char *)result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_uiRadioButton_as_float(lua_State* L) {
  int SWIG_arg = 0;
  uiRadioButtonNode_t *arg1 = (uiRadioButtonNode_t *) 0 ;
  float result;
  
  SWIG_check_num_args("uiRadioButtonNode_t::as_float",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("uiRadioButtonNode_t::as_float",1,"uiRadioButtonNode_t *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_uiRadioButtonNode_t,0))){
    SWIG_fail_ptr("uiRadioButton_as_float",1,SWIGTYPE_p_uiRadioButtonNode_t);
  }
  
  result = (float)uiRadioButtonNode_t_as_float(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_uiRadioButton_set_value__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  uiRadioButtonNode_t *arg1 = (uiRadioButtonNode_t *) 0 ;
  char *arg2 = (char *) 0 ;
  
  SWIG_check_num_args("uiRadioButtonNode_t::set_value",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("uiRadioButtonNode_t::set_value",1,"uiRadioButtonNode_t *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("uiRadioButtonNode_t::set_value",2,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_uiRadioButtonNode_t,0))){
    SWIG_fail_ptr("uiRadioButton_set_value",1,SWIGTYPE_p_uiRadioButtonNode_t);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  uiRadioButtonNode_t_set_value__SWIG_0(arg1,(char const *)arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_uiRadioButton_set_value__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  uiRadioButtonNode_t *arg1 = (uiRadioButtonNode_t *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("uiRadioButtonNode_t::set_value",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("uiRadioButtonNode_t::set_value",1,"uiRadioButtonNode_t *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("uiRadioButtonNode_t::set_value",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_uiRadioButtonNode_t,0))){
    SWIG_fail_ptr("uiRadioButton_set_value",1,SWIGTYPE_p_uiRadioButtonNode_t);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  uiRadioButtonNode_t_set_value__SWIG_1(arg1,arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_uiRadioButton_set_value(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_uiRadioButtonNode_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_uiRadioButton_set_value__SWIG_1(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_uiRadioButtonNode_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = SWIG_lua_isnilstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_uiRadioButton_set_value__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'uiRadioButton_set_value'\n"
    "  Possible C/C++ prototypes are:\n"
    "    uiRadioButtonNode_t::set_value(char const *)\n"
    "    uiRadioButtonNode_t::set_value(float)\n");
  lua_error(L);return 0;
}


static int _wrap_uiRadioButton_set_flipicon(lua_State* L) {
  int SWIG_arg = 0;
  uiRadioButtonNode_t *arg1 = (uiRadioButtonNode_t *) 0 ;
  bool arg2 ;
  
  SWIG_check_num_args("uiRadioButtonNode_t::set_flipicon",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("uiRadioButtonNode_t::set_flipicon",1,"uiRadioButtonNode_t *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("uiRadioButtonNode_t::set_flipicon",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_uiRadioButtonNode_t,0))){
    SWIG_fail_ptr("uiRadioButton_set_flipicon",1,SWIGTYPE_p_uiRadioButtonNode_t);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  uiRadioButtonNode_t_set_flipicon(arg1,arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_uiRadioButton_set_background(lua_State* L) {
  int SWIG_arg = 0;
  uiRadioButtonNode_t *arg1 = (uiRadioButtonNode_t *) 0 ;
  char *arg2 = (char *) 0 ;
  
  SWIG_check_num_args("uiRadioButtonNode_t::set_background",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("uiRadioButtonNode_t::set_background",1,"uiRadioButtonNode_t *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("uiRadioButtonNode_t::set_background",2,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_uiRadioButtonNode_t,0))){
    SWIG_fail_ptr("uiRadioButton_set_background",1,SWIGTYPE_p_uiRadioButtonNode_t);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  uiRadioButtonNode_t_set_background(arg1,(char const *)arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_uiRadioButton_set_icon(lua_State* L) {
  int SWIG_arg = 0;
  uiRadioButtonNode_t *arg1 = (uiRadioButtonNode_t *) 0 ;
  char *arg2 = (char *) 0 ;
  
  SWIG_check_num_args("uiRadioButtonNode_t::set_icon",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("uiRadioButtonNode_t::set_icon",1,"uiRadioButtonNode_t *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("uiRadioButtonNode_t::set_icon",2,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_uiRadioButtonNode_t,0))){
    SWIG_fail_ptr("uiRadioButton_set_icon",1,SWIGTYPE_p_uiRadioButtonNode_t);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  uiRadioButtonNode_t_set_icon(arg1,(char const *)arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_uiRadioButton(lua_State* L) {
  int SWIG_arg = 0;
  uiRadioButtonNode_t *result = 0 ;
  
  SWIG_check_num_args("uiRadioButtonNode_t::uiRadioButtonNode_t",0,0)
  result = (uiRadioButtonNode_t *)new uiRadioButtonNode_t();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_uiRadioButtonNode_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_uiRadioButton(void *obj) {
uiRadioButtonNode_t *arg1 = (uiRadioButtonNode_t *) obj;
delete arg1;
}
static int _proxy__wrap_new_uiRadioButton(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_uiRadioButton);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_uiRadioButton_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_uiRadioButton_methods[]= {
    { "is_flipicon", _wrap_uiRadioButton_is_flipicon},
    { "as_string", _wrap_uiRadioButton_as_string},
    { "as_float", _wrap_uiRadioButton_as_float},
    { "set_value", _wrap_uiRadioButton_set_value},
    { "set_flipicon", _wrap_uiRadioButton_set_flipicon},
    { "set_background", _wrap_uiRadioButton_set_background},
    { "set_icon", _wrap_uiRadioButton_set_icon},
    {0,0}
};
static swig_lua_method swig_uiRadioButton_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_uiRadioButton_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_uiRadioButton_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_uiRadioButton_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_uiRadioButton_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_uiRadioButton_Sf_SwigStatic = {
    "uiRadioButton",
    swig_uiRadioButton_Sf_SwigStatic_methods,
    swig_uiRadioButton_Sf_SwigStatic_attributes,
    swig_uiRadioButton_Sf_SwigStatic_constants,
    swig_uiRadioButton_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_uiRadioButton_bases[] = {0,0};
static const char *swig_uiRadioButton_base_names[] = {"uiNode_t *",0};
static swig_lua_class _wrap_class_uiRadioButton = { "uiRadioButton", "uiRadioButton", &SWIGTYPE_p_uiRadioButtonNode_t,_proxy__wrap_new_uiRadioButton, swig_delete_uiRadioButton, swig_uiRadioButton_methods, swig_uiRadioButton_attributes, &swig_uiRadioButton_Sf_SwigStatic, swig_uiRadioButton_meta, swig_uiRadioButton_bases, swig_uiRadioButton_base_names };

static int _wrap_uiRows_current(lua_State* L) {
  int SWIG_arg = 0;
  uiRowsNode_t *arg1 = (uiRowsNode_t *) 0 ;
  int result;
  
  SWIG_check_num_args("uiRowsNode_t::current",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("uiRowsNode_t::current",1,"uiRowsNode_t *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_uiRowsNode_t,0))){
    SWIG_fail_ptr("uiRows_current",1,SWIGTYPE_p_uiRowsNode_t);
  }
  
  result = (int)uiRowsNode_t_current(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_uiRows_lineheight(lua_State* L) {
  int SWIG_arg = 0;
  uiRowsNode_t *arg1 = (uiRowsNode_t *) 0 ;
  int result;
  
  SWIG_check_num_args("uiRowsNode_t::lineheight",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("uiRowsNode_t::lineheight",1,"uiRowsNode_t *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_uiRowsNode_t,0))){
    SWIG_fail_ptr("uiRows_lineheight",1,SWIGTYPE_p_uiRowsNode_t);
  }
  
  result = (int)uiRowsNode_t_lineheight(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_uiRows_set_current(lua_State* L) {
  int SWIG_arg = 0;
  uiRowsNode_t *arg1 = (uiRowsNode_t *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("uiRowsNode_t::set_current",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("uiRowsNode_t::set_current",1,"uiRowsNode_t *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("uiRowsNode_t::set_current",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_uiRowsNode_t,0))){
    SWIG_fail_ptr("uiRows_set_current",1,SWIGTYPE_p_uiRowsNode_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  uiRowsNode_t_set_current(arg1,arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_uiRows_set_lineheight(lua_State* L) {
  int SWIG_arg = 0;
  uiRowsNode_t *arg1 = (uiRowsNode_t *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("uiRowsNode_t::set_lineheight",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("uiRowsNode_t::set_lineheight",1,"uiRowsNode_t *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("uiRowsNode_t::set_lineheight",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_uiRowsNode_t,0))){
    SWIG_fail_ptr("uiRows_set_lineheight",1,SWIGTYPE_p_uiRowsNode_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  uiRowsNode_t_set_lineheight(arg1,arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_uiRows(lua_State* L) {
  int SWIG_arg = 0;
  uiRowsNode_t *result = 0 ;
  
  SWIG_check_num_args("uiRowsNode_t::uiRowsNode_t",0,0)
  result = (uiRowsNode_t *)new uiRowsNode_t();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_uiRowsNode_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_uiRows(void *obj) {
uiRowsNode_t *arg1 = (uiRowsNode_t *) obj;
delete arg1;
}
static int _proxy__wrap_new_uiRows(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_uiRows);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_uiRows_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_uiRows_methods[]= {
    { "current", _wrap_uiRows_current},
    { "lineheight", _wrap_uiRows_lineheight},
    { "set_current", _wrap_uiRows_set_current},
    { "set_lineheight", _wrap_uiRows_set_lineheight},
    {0,0}
};
static swig_lua_method swig_uiRows_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_uiRows_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_uiRows_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_uiRows_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_uiRows_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_uiRows_Sf_SwigStatic = {
    "uiRows",
    swig_uiRows_Sf_SwigStatic_methods,
    swig_uiRows_Sf_SwigStatic_attributes,
    swig_uiRows_Sf_SwigStatic_constants,
    swig_uiRows_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_uiRows_bases[] = {0,0};
static const char *swig_uiRows_base_names[] = {"uiNode_t *",0};
static swig_lua_class _wrap_class_uiRows = { "uiRows", "uiRows", &SWIGTYPE_p_uiRowsNode_t,_proxy__wrap_new_uiRows, swig_delete_uiRows, swig_uiRows_methods, swig_uiRows_attributes, &swig_uiRows_Sf_SwigStatic, swig_uiRows_meta, swig_uiRows_bases, swig_uiRows_base_names };

static int _wrap_new_uiSelectBox(lua_State* L) {
  int SWIG_arg = 0;
  uiSelectBoxNode_t *result = 0 ;
  
  SWIG_check_num_args("uiSelectBoxNode_t::uiSelectBoxNode_t",0,0)
  result = (uiSelectBoxNode_t *)new uiSelectBoxNode_t();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_uiSelectBoxNode_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_uiSelectBox(void *obj) {
uiSelectBoxNode_t *arg1 = (uiSelectBoxNode_t *) obj;
delete arg1;
}
static int _proxy__wrap_new_uiSelectBox(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_uiSelectBox);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_uiSelectBox_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_uiSelectBox_methods[]= {
    {0,0}
};
static swig_lua_method swig_uiSelectBox_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_uiSelectBox_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_uiSelectBox_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_uiSelectBox_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_uiSelectBox_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_uiSelectBox_Sf_SwigStatic = {
    "uiSelectBox",
    swig_uiSelectBox_Sf_SwigStatic_methods,
    swig_uiSelectBox_Sf_SwigStatic_attributes,
    swig_uiSelectBox_Sf_SwigStatic_constants,
    swig_uiSelectBox_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_uiSelectBox_bases[] = {0,0};
static const char *swig_uiSelectBox_base_names[] = {"uiNode_t *",0};
static swig_lua_class _wrap_class_uiSelectBox = { "uiSelectBox", "uiSelectBox", &SWIGTYPE_p_uiSelectBoxNode_t,_proxy__wrap_new_uiSelectBox, swig_delete_uiSelectBox, swig_uiSelectBox_methods, swig_uiSelectBox_attributes, &swig_uiSelectBox_Sf_SwigStatic, swig_uiSelectBox_meta, swig_uiSelectBox_bases, swig_uiSelectBox_base_names };

static int _wrap_uiSequence_is_playing(lua_State* L) {
  int SWIG_arg = 0;
  uiSequenceNode_t *arg1 = (uiSequenceNode_t *) 0 ;
  bool result;
  
  SWIG_check_num_args("uiSequenceNode_t::is_playing",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("uiSequenceNode_t::is_playing",1,"uiSequenceNode_t *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_uiSequenceNode_t,0))){
    SWIG_fail_ptr("uiSequence_is_playing",1,SWIGTYPE_p_uiSequenceNode_t);
  }
  
  result = (bool)uiSequenceNode_t_is_playing(arg1);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_uiSequence_set_source(lua_State* L) {
  int SWIG_arg = 0;
  uiSequenceNode_t *arg1 = (uiSequenceNode_t *) 0 ;
  char *arg2 = (char *) 0 ;
  
  SWIG_check_num_args("uiSequenceNode_t::set_source",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("uiSequenceNode_t::set_source",1,"uiSequenceNode_t *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("uiSequenceNode_t::set_source",2,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_uiSequenceNode_t,0))){
    SWIG_fail_ptr("uiSequence_set_source",1,SWIGTYPE_p_uiSequenceNode_t);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  uiSequenceNode_t_set_source(arg1,(char const *)arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_uiSequence_lua_onEnd_set(lua_State* L) {
  int SWIG_arg = 0;
  uiSequenceNode_t *arg1 = (uiSequenceNode_t *) 0 ;
  LUA_EVENT arg2 ;
  
  SWIG_check_num_args("uiSequenceNode_t::lua_onEnd",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("uiSequenceNode_t::lua_onEnd",1,"uiSequenceNode_t *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_uiSequenceNode_t,0))){
    SWIG_fail_ptr("uiSequence_lua_onEnd_set",1,SWIGTYPE_p_uiSequenceNode_t);
  }
  
  {
    arg2 = (LUA_EVENT)luaL_ref (L, LUA_REGISTRYINDEX);
  }
  uiSequenceNode_t_lua_onEnd_set(arg1,arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_uiSequence_lua_onEnd_get(lua_State* L) {
  int SWIG_arg = 0;
  uiSequenceNode_t *arg1 = (uiSequenceNode_t *) 0 ;
  LUA_EVENT result;
  
  SWIG_check_num_args("uiSequenceNode_t::lua_onEnd",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("uiSequenceNode_t::lua_onEnd",1,"uiSequenceNode_t *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_uiSequenceNode_t,0))){
    SWIG_fail_ptr("uiSequence_lua_onEnd_get",1,SWIGTYPE_p_uiSequenceNode_t);
  }
  
  result = uiSequenceNode_t_lua_onEnd_get(arg1);
  {
    LUA_EVENT * resultptr = new LUA_EVENT((const LUA_EVENT &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_LUA_EVENT,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_uiSequence(lua_State* L) {
  int SWIG_arg = 0;
  uiSequenceNode_t *result = 0 ;
  
  SWIG_check_num_args("uiSequenceNode_t::uiSequenceNode_t",0,0)
  result = (uiSequenceNode_t *)new uiSequenceNode_t();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_uiSequenceNode_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_uiSequence(void *obj) {
uiSequenceNode_t *arg1 = (uiSequenceNode_t *) obj;
delete arg1;
}
static int _proxy__wrap_new_uiSequence(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_uiSequence);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_uiSequence_attributes[] = {
    { "lua_onEnd", _wrap_uiSequence_lua_onEnd_get, _wrap_uiSequence_lua_onEnd_set },
    {0,0,0}
};
static swig_lua_method swig_uiSequence_methods[]= {
    { "is_playing", _wrap_uiSequence_is_playing},
    { "set_source", _wrap_uiSequence_set_source},
    {0,0}
};
static swig_lua_method swig_uiSequence_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_uiSequence_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_uiSequence_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_uiSequence_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_uiSequence_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_uiSequence_Sf_SwigStatic = {
    "uiSequence",
    swig_uiSequence_Sf_SwigStatic_methods,
    swig_uiSequence_Sf_SwigStatic_attributes,
    swig_uiSequence_Sf_SwigStatic_constants,
    swig_uiSequence_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_uiSequence_bases[] = {0,0};
static const char *swig_uiSequence_base_names[] = {"uiNode_t *",0};
static swig_lua_class _wrap_class_uiSequence = { "uiSequence", "uiSequence", &SWIGTYPE_p_uiSequenceNode_t,_proxy__wrap_new_uiSequence, swig_delete_uiSequence, swig_uiSequence_methods, swig_uiSequence_attributes, &swig_uiSequence_Sf_SwigStatic, swig_uiSequence_meta, swig_uiSequence_bases, swig_uiSequence_base_names };

static int _wrap_uiSpinner_is_horizontal(lua_State* L) {
  int SWIG_arg = 0;
  uiSpinnerNode_t *arg1 = (uiSpinnerNode_t *) 0 ;
  bool result;
  
  SWIG_check_num_args("uiSpinnerNode_t::is_horizontal",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("uiSpinnerNode_t::is_horizontal",1,"uiSpinnerNode_t *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_uiSpinnerNode_t,0))){
    SWIG_fail_ptr("uiSpinner_is_horizontal",1,SWIGTYPE_p_uiSpinnerNode_t);
  }
  
  result = (bool)uiSpinnerNode_t_is_horizontal(arg1);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_uiSpinner_is_inverted(lua_State* L) {
  int SWIG_arg = 0;
  uiSpinnerNode_t *arg1 = (uiSpinnerNode_t *) 0 ;
  bool result;
  
  SWIG_check_num_args("uiSpinnerNode_t::is_inverted",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("uiSpinnerNode_t::is_inverted",1,"uiSpinnerNode_t *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_uiSpinnerNode_t,0))){
    SWIG_fail_ptr("uiSpinner_is_inverted",1,SWIGTYPE_p_uiSpinnerNode_t);
  }
  
  result = (bool)uiSpinnerNode_t_is_inverted(arg1);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_uiSpinner_mode(lua_State* L) {
  int SWIG_arg = 0;
  uiSpinnerNode_t *arg1 = (uiSpinnerNode_t *) 0 ;
  int result;
  
  SWIG_check_num_args("uiSpinnerNode_t::mode",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("uiSpinnerNode_t::mode",1,"uiSpinnerNode_t *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_uiSpinnerNode_t,0))){
    SWIG_fail_ptr("uiSpinner_mode",1,SWIGTYPE_p_uiSpinnerNode_t);
  }
  
  result = (int)uiSpinnerNode_t_mode(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_uiSpinner_set_background(lua_State* L) {
  int SWIG_arg = 0;
  uiSpinnerNode_t *arg1 = (uiSpinnerNode_t *) 0 ;
  char *arg2 = (char *) 0 ;
  
  SWIG_check_num_args("uiSpinnerNode_t::set_background",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("uiSpinnerNode_t::set_background",1,"uiSpinnerNode_t *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("uiSpinnerNode_t::set_background",2,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_uiSpinnerNode_t,0))){
    SWIG_fail_ptr("uiSpinner_set_background",1,SWIGTYPE_p_uiSpinnerNode_t);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  uiSpinnerNode_t_set_background(arg1,(char const *)arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_uiSpinner_set_topicon(lua_State* L) {
  int SWIG_arg = 0;
  uiSpinnerNode_t *arg1 = (uiSpinnerNode_t *) 0 ;
  char *arg2 = (char *) 0 ;
  
  SWIG_check_num_args("uiSpinnerNode_t::set_topicon",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("uiSpinnerNode_t::set_topicon",1,"uiSpinnerNode_t *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("uiSpinnerNode_t::set_topicon",2,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_uiSpinnerNode_t,0))){
    SWIG_fail_ptr("uiSpinner_set_topicon",1,SWIGTYPE_p_uiSpinnerNode_t);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  uiSpinnerNode_t_set_topicon(arg1,(char const *)arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_uiSpinner_set_bottomicon(lua_State* L) {
  int SWIG_arg = 0;
  uiSpinnerNode_t *arg1 = (uiSpinnerNode_t *) 0 ;
  char *arg2 = (char *) 0 ;
  
  SWIG_check_num_args("uiSpinnerNode_t::set_bottomicon",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("uiSpinnerNode_t::set_bottomicon",1,"uiSpinnerNode_t *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("uiSpinnerNode_t::set_bottomicon",2,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_uiSpinnerNode_t,0))){
    SWIG_fail_ptr("uiSpinner_set_bottomicon",1,SWIGTYPE_p_uiSpinnerNode_t);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  uiSpinnerNode_t_set_bottomicon(arg1,(char const *)arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_uiSpinner_set_mode(lua_State* L) {
  int SWIG_arg = 0;
  uiSpinnerNode_t *arg1 = (uiSpinnerNode_t *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("uiSpinnerNode_t::set_mode",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("uiSpinnerNode_t::set_mode",1,"uiSpinnerNode_t *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("uiSpinnerNode_t::set_mode",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_uiSpinnerNode_t,0))){
    SWIG_fail_ptr("uiSpinner_set_mode",1,SWIGTYPE_p_uiSpinnerNode_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  uiSpinnerNode_t_set_mode(arg1,arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_uiSpinner_set_horizontal(lua_State* L) {
  int SWIG_arg = 0;
  uiSpinnerNode_t *arg1 = (uiSpinnerNode_t *) 0 ;
  bool arg2 ;
  
  SWIG_check_num_args("uiSpinnerNode_t::set_horizontal",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("uiSpinnerNode_t::set_horizontal",1,"uiSpinnerNode_t *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("uiSpinnerNode_t::set_horizontal",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_uiSpinnerNode_t,0))){
    SWIG_fail_ptr("uiSpinner_set_horizontal",1,SWIGTYPE_p_uiSpinnerNode_t);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  uiSpinnerNode_t_set_horizontal(arg1,arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_uiSpinner_set_inverted(lua_State* L) {
  int SWIG_arg = 0;
  uiSpinnerNode_t *arg1 = (uiSpinnerNode_t *) 0 ;
  bool arg2 ;
  
  SWIG_check_num_args("uiSpinnerNode_t::set_inverted",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("uiSpinnerNode_t::set_inverted",1,"uiSpinnerNode_t *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("uiSpinnerNode_t::set_inverted",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_uiSpinnerNode_t,0))){
    SWIG_fail_ptr("uiSpinner_set_inverted",1,SWIGTYPE_p_uiSpinnerNode_t);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  uiSpinnerNode_t_set_inverted(arg1,arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_uiSpinner(lua_State* L) {
  int SWIG_arg = 0;
  uiSpinnerNode_t *result = 0 ;
  
  SWIG_check_num_args("uiSpinnerNode_t::uiSpinnerNode_t",0,0)
  result = (uiSpinnerNode_t *)new uiSpinnerNode_t();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_uiSpinnerNode_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_uiSpinner(void *obj) {
uiSpinnerNode_t *arg1 = (uiSpinnerNode_t *) obj;
delete arg1;
}
static int _proxy__wrap_new_uiSpinner(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_uiSpinner);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_uiSpinner_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_uiSpinner_methods[]= {
    { "is_horizontal", _wrap_uiSpinner_is_horizontal},
    { "is_inverted", _wrap_uiSpinner_is_inverted},
    { "mode", _wrap_uiSpinner_mode},
    { "set_background", _wrap_uiSpinner_set_background},
    { "set_topicon", _wrap_uiSpinner_set_topicon},
    { "set_bottomicon", _wrap_uiSpinner_set_bottomicon},
    { "set_mode", _wrap_uiSpinner_set_mode},
    { "set_horizontal", _wrap_uiSpinner_set_horizontal},
    { "set_inverted", _wrap_uiSpinner_set_inverted},
    {0,0}
};
static swig_lua_method swig_uiSpinner_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_uiSpinner_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_uiSpinner_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_uiSpinner_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_uiSpinner_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_uiSpinner_Sf_SwigStatic = {
    "uiSpinner",
    swig_uiSpinner_Sf_SwigStatic_methods,
    swig_uiSpinner_Sf_SwigStatic_attributes,
    swig_uiSpinner_Sf_SwigStatic_constants,
    swig_uiSpinner_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_uiSpinner_bases[] = {0,0};
static const char *swig_uiSpinner_base_names[] = {"uiAbstractValueNode_t *",0};
static swig_lua_class _wrap_class_uiSpinner = { "uiSpinner", "uiSpinner", &SWIGTYPE_p_uiSpinnerNode_t,_proxy__wrap_new_uiSpinner, swig_delete_uiSpinner, swig_uiSpinner_methods, swig_uiSpinner_attributes, &swig_uiSpinner_Sf_SwigStatic, swig_uiSpinner_meta, swig_uiSpinner_bases, swig_uiSpinner_base_names };

static int _wrap_uiString_longlines(lua_State* L) {
  int SWIG_arg = 0;
  uiStringNode_t *arg1 = (uiStringNode_t *) 0 ;
  int result;
  
  SWIG_check_num_args("uiStringNode_t::longlines",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("uiStringNode_t::longlines",1,"uiStringNode_t *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_uiStringNode_t,0))){
    SWIG_fail_ptr("uiString_longlines",1,SWIGTYPE_p_uiStringNode_t);
  }
  
  result = (int)uiStringNode_t_longlines(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_uiString_set_longlines(lua_State* L) {
  int SWIG_arg = 0;
  uiStringNode_t *arg1 = (uiStringNode_t *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("uiStringNode_t::set_longlines",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("uiStringNode_t::set_longlines",1,"uiStringNode_t *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("uiStringNode_t::set_longlines",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_uiStringNode_t,0))){
    SWIG_fail_ptr("uiString_set_longlines",1,SWIGTYPE_p_uiStringNode_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  uiStringNode_t_set_longlines(arg1,arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_uiString(lua_State* L) {
  int SWIG_arg = 0;
  uiStringNode_t *result = 0 ;
  
  SWIG_check_num_args("uiStringNode_t::uiStringNode_t",0,0)
  result = (uiStringNode_t *)new uiStringNode_t();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_uiStringNode_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_uiString(void *obj) {
uiStringNode_t *arg1 = (uiStringNode_t *) obj;
delete arg1;
}
static int _proxy__wrap_new_uiString(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_uiString);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_uiString_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_uiString_methods[]= {
    { "longlines", _wrap_uiString_longlines},
    { "set_longlines", _wrap_uiString_set_longlines},
    {0,0}
};
static swig_lua_method swig_uiString_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_uiString_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_uiString_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_uiString_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_uiString_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_uiString_Sf_SwigStatic = {
    "uiString",
    swig_uiString_Sf_SwigStatic_methods,
    swig_uiString_Sf_SwigStatic_attributes,
    swig_uiString_Sf_SwigStatic_constants,
    swig_uiString_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_uiString_bases[] = {0,0};
static const char *swig_uiString_base_names[] = {"uiNode_t *",0};
static swig_lua_class _wrap_class_uiString = { "uiString", "uiString", &SWIGTYPE_p_uiStringNode_t,_proxy__wrap_new_uiString, swig_delete_uiString, swig_uiString_methods, swig_uiString_attributes, &swig_uiString_Sf_SwigStatic, swig_uiString_meta, swig_uiString_bases, swig_uiString_base_names };

static int _wrap_new_uiTab(lua_State* L) {
  int SWIG_arg = 0;
  uiTabNode_t *result = 0 ;
  
  SWIG_check_num_args("uiTabNode_t::uiTabNode_t",0,0)
  result = (uiTabNode_t *)new uiTabNode_t();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_uiTabNode_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_uiTab(void *obj) {
uiTabNode_t *arg1 = (uiTabNode_t *) obj;
delete arg1;
}
static int _proxy__wrap_new_uiTab(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_uiTab);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_uiTab_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_uiTab_methods[]= {
    {0,0}
};
static swig_lua_method swig_uiTab_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_uiTab_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_uiTab_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_uiTab_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_uiTab_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_uiTab_Sf_SwigStatic = {
    "uiTab",
    swig_uiTab_Sf_SwigStatic_methods,
    swig_uiTab_Sf_SwigStatic_attributes,
    swig_uiTab_Sf_SwigStatic_constants,
    swig_uiTab_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_uiTab_bases[] = {0,0};
static const char *swig_uiTab_base_names[] = {"uiAbstractOptionNode_t *",0};
static swig_lua_class _wrap_class_uiTab = { "uiTab", "uiTab", &SWIGTYPE_p_uiTabNode_t,_proxy__wrap_new_uiTab, swig_delete_uiTab, swig_uiTab_methods, swig_uiTab_attributes, &swig_uiTab_Sf_SwigStatic, swig_uiTab_meta, swig_uiTab_bases, swig_uiTab_base_names };

static int _wrap_uiTBar_texh(lua_State* L) {
  int SWIG_arg = 0;
  uiTBarNode_t *arg1 = (uiTBarNode_t *) 0 ;
  vec2_struct_t *result = 0 ;
  
  SWIG_check_num_args("uiTBarNode_t::texh",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("uiTBarNode_t::texh",1,"uiTBarNode_t *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_uiTBarNode_t,0))){
    SWIG_fail_ptr("uiTBar_texh",1,SWIGTYPE_p_uiTBarNode_t);
  }
  
  result = (vec2_struct_t *)uiTBarNode_t_texh(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_vec2_struct_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_uiTBar_texl(lua_State* L) {
  int SWIG_arg = 0;
  uiTBarNode_t *arg1 = (uiTBarNode_t *) 0 ;
  vec2_struct_t *result = 0 ;
  
  SWIG_check_num_args("uiTBarNode_t::texl",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("uiTBarNode_t::texl",1,"uiTBarNode_t *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_uiTBarNode_t,0))){
    SWIG_fail_ptr("uiTBar_texl",1,SWIGTYPE_p_uiTBarNode_t);
  }
  
  result = (vec2_struct_t *)uiTBarNode_t_texl(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_vec2_struct_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_uiTBar_set_source(lua_State* L) {
  int SWIG_arg = 0;
  uiTBarNode_t *arg1 = (uiTBarNode_t *) 0 ;
  char *arg2 = (char *) 0 ;
  
  SWIG_check_num_args("uiTBarNode_t::set_source",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("uiTBarNode_t::set_source",1,"uiTBarNode_t *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("uiTBarNode_t::set_source",2,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_uiTBarNode_t,0))){
    SWIG_fail_ptr("uiTBar_set_source",1,SWIGTYPE_p_uiTBarNode_t);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  uiTBarNode_t_set_source(arg1,(char const *)arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_uiTBar_set_texh(lua_State* L) {
  int SWIG_arg = 0;
  uiTBarNode_t *arg1 = (uiTBarNode_t *) 0 ;
  float arg2 ;
  float arg3 ;
  
  SWIG_check_num_args("uiTBarNode_t::set_texh",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("uiTBarNode_t::set_texh",1,"uiTBarNode_t *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("uiTBarNode_t::set_texh",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("uiTBarNode_t::set_texh",3,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_uiTBarNode_t,0))){
    SWIG_fail_ptr("uiTBar_set_texh",1,SWIGTYPE_p_uiTBarNode_t);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3);
  uiTBarNode_t_set_texh(arg1,arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_uiTBar_set_texl(lua_State* L) {
  int SWIG_arg = 0;
  uiTBarNode_t *arg1 = (uiTBarNode_t *) 0 ;
  float arg2 ;
  float arg3 ;
  
  SWIG_check_num_args("uiTBarNode_t::set_texl",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("uiTBarNode_t::set_texl",1,"uiTBarNode_t *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("uiTBarNode_t::set_texl",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("uiTBarNode_t::set_texl",3,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_uiTBarNode_t,0))){
    SWIG_fail_ptr("uiTBar_set_texl",1,SWIGTYPE_p_uiTBarNode_t);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3);
  uiTBarNode_t_set_texl(arg1,arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_uiTBar(lua_State* L) {
  int SWIG_arg = 0;
  uiTBarNode_t *result = 0 ;
  
  SWIG_check_num_args("uiTBarNode_t::uiTBarNode_t",0,0)
  result = (uiTBarNode_t *)new uiTBarNode_t();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_uiTBarNode_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_uiTBar(void *obj) {
uiTBarNode_t *arg1 = (uiTBarNode_t *) obj;
delete arg1;
}
static int _proxy__wrap_new_uiTBar(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_uiTBar);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_uiTBar_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_uiTBar_methods[]= {
    { "texh", _wrap_uiTBar_texh},
    { "texl", _wrap_uiTBar_texl},
    { "set_source", _wrap_uiTBar_set_source},
    { "set_texh", _wrap_uiTBar_set_texh},
    { "set_texl", _wrap_uiTBar_set_texl},
    {0,0}
};
static swig_lua_method swig_uiTBar_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_uiTBar_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_uiTBar_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_uiTBar_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_uiTBar_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_uiTBar_Sf_SwigStatic = {
    "uiTBar",
    swig_uiTBar_Sf_SwigStatic_methods,
    swig_uiTBar_Sf_SwigStatic_attributes,
    swig_uiTBar_Sf_SwigStatic_constants,
    swig_uiTBar_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_uiTBar_bases[] = {0,0};
static const char *swig_uiTBar_base_names[] = {"uiAbstractValueNode_t *",0};
static swig_lua_class _wrap_class_uiTBar = { "uiTBar", "uiTBar", &SWIGTYPE_p_uiTBarNode_t,_proxy__wrap_new_uiTBar, swig_delete_uiTBar, swig_uiTBar_methods, swig_uiTBar_attributes, &swig_uiTBar_Sf_SwigStatic, swig_uiTBar_meta, swig_uiTBar_bases, swig_uiTBar_base_names };

static int _wrap_uiText_dataid(lua_State* L) {
  int SWIG_arg = 0;
  uiTextNode_t *arg1 = (uiTextNode_t *) 0 ;
  int result;
  
  SWIG_check_num_args("uiTextNode_t::dataid",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("uiTextNode_t::dataid",1,"uiTextNode_t *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_uiTextNode_t,0))){
    SWIG_fail_ptr("uiText_dataid",1,SWIGTYPE_p_uiTextNode_t);
  }
  
  result = (int)uiTextNode_t_dataid(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_uiText_lineheight(lua_State* L) {
  int SWIG_arg = 0;
  uiTextNode_t *arg1 = (uiTextNode_t *) 0 ;
  int result;
  
  SWIG_check_num_args("uiTextNode_t::lineheight",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("uiTextNode_t::lineheight",1,"uiTextNode_t *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_uiTextNode_t,0))){
    SWIG_fail_ptr("uiText_lineheight",1,SWIGTYPE_p_uiTextNode_t);
  }
  
  result = (int)uiTextNode_t_lineheight(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_uiText_lineselected(lua_State* L) {
  int SWIG_arg = 0;
  uiTextNode_t *arg1 = (uiTextNode_t *) 0 ;
  int result;
  
  SWIG_check_num_args("uiTextNode_t::lineselected",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("uiTextNode_t::lineselected",1,"uiTextNode_t *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_uiTextNode_t,0))){
    SWIG_fail_ptr("uiText_lineselected",1,SWIGTYPE_p_uiTextNode_t);
  }
  
  result = (int)uiTextNode_t_lineselected(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_uiText_longlines(lua_State* L) {
  int SWIG_arg = 0;
  uiTextNode_t *arg1 = (uiTextNode_t *) 0 ;
  int result;
  
  SWIG_check_num_args("uiTextNode_t::longlines",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("uiTextNode_t::longlines",1,"uiTextNode_t *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_uiTextNode_t,0))){
    SWIG_fail_ptr("uiText_longlines",1,SWIGTYPE_p_uiTextNode_t);
  }
  
  result = (int)uiTextNode_t_longlines(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_uiText_textselected(lua_State* L) {
  int SWIG_arg = 0;
  uiTextNode_t *arg1 = (uiTextNode_t *) 0 ;
  char *result = 0 ;
  
  SWIG_check_num_args("uiTextNode_t::textselected",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("uiTextNode_t::textselected",1,"uiTextNode_t *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_uiTextNode_t,0))){
    SWIG_fail_ptr("uiText_textselected",1,SWIGTYPE_p_uiTextNode_t);
  }
  
  result = (char *)uiTextNode_t_textselected(arg1);
  lua_pushstring(L,(const char *)result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_uiText_tabwidth(lua_State* L) {
  int SWIG_arg = 0;
  uiTextNode_t *arg1 = (uiTextNode_t *) 0 ;
  int result;
  
  SWIG_check_num_args("uiTextNode_t::tabwidth",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("uiTextNode_t::tabwidth",1,"uiTextNode_t *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_uiTextNode_t,0))){
    SWIG_fail_ptr("uiText_tabwidth",1,SWIGTYPE_p_uiTextNode_t);
  }
  
  result = (int)uiTextNode_t_tabwidth(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_uiText_set_dataid(lua_State* L) {
  int SWIG_arg = 0;
  uiTextNode_t *arg1 = (uiTextNode_t *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("uiTextNode_t::set_dataid",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("uiTextNode_t::set_dataid",1,"uiTextNode_t *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("uiTextNode_t::set_dataid",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_uiTextNode_t,0))){
    SWIG_fail_ptr("uiText_set_dataid",1,SWIGTYPE_p_uiTextNode_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  uiTextNode_t_set_dataid(arg1,arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_uiText_set_longlines(lua_State* L) {
  int SWIG_arg = 0;
  uiTextNode_t *arg1 = (uiTextNode_t *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("uiTextNode_t::set_longlines",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("uiTextNode_t::set_longlines",1,"uiTextNode_t *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("uiTextNode_t::set_longlines",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_uiTextNode_t,0))){
    SWIG_fail_ptr("uiText_set_longlines",1,SWIGTYPE_p_uiTextNode_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  uiTextNode_t_set_longlines(arg1,arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_uiText_set_lineheight(lua_State* L) {
  int SWIG_arg = 0;
  uiTextNode_t *arg1 = (uiTextNode_t *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("uiTextNode_t::set_lineheight",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("uiTextNode_t::set_lineheight",1,"uiTextNode_t *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("uiTextNode_t::set_lineheight",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_uiTextNode_t,0))){
    SWIG_fail_ptr("uiText_set_lineheight",1,SWIGTYPE_p_uiTextNode_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  uiTextNode_t_set_lineheight(arg1,arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_uiText_set_lineselected(lua_State* L) {
  int SWIG_arg = 0;
  uiTextNode_t *arg1 = (uiTextNode_t *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("uiTextNode_t::set_lineselected",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("uiTextNode_t::set_lineselected",1,"uiTextNode_t *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("uiTextNode_t::set_lineselected",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_uiTextNode_t,0))){
    SWIG_fail_ptr("uiText_set_lineselected",1,SWIGTYPE_p_uiTextNode_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  uiTextNode_t_set_lineselected(arg1,arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_uiText_set_tabwidth(lua_State* L) {
  int SWIG_arg = 0;
  uiTextNode_t *arg1 = (uiTextNode_t *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("uiTextNode_t::set_tabwidth",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("uiTextNode_t::set_tabwidth",1,"uiTextNode_t *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("uiTextNode_t::set_tabwidth",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_uiTextNode_t,0))){
    SWIG_fail_ptr("uiText_set_tabwidth",1,SWIGTYPE_p_uiTextNode_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  uiTextNode_t_set_tabwidth(arg1,arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_uiText(lua_State* L) {
  int SWIG_arg = 0;
  uiTextNode_t *result = 0 ;
  
  SWIG_check_num_args("uiTextNode_t::uiTextNode_t",0,0)
  result = (uiTextNode_t *)new uiTextNode_t();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_uiTextNode_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_uiText(void *obj) {
uiTextNode_t *arg1 = (uiTextNode_t *) obj;
delete arg1;
}
static int _proxy__wrap_new_uiText(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_uiText);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_uiText_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_uiText_methods[]= {
    { "dataid", _wrap_uiText_dataid},
    { "lineheight", _wrap_uiText_lineheight},
    { "lineselected", _wrap_uiText_lineselected},
    { "longlines", _wrap_uiText_longlines},
    { "textselected", _wrap_uiText_textselected},
    { "tabwidth", _wrap_uiText_tabwidth},
    { "set_dataid", _wrap_uiText_set_dataid},
    { "set_longlines", _wrap_uiText_set_longlines},
    { "set_lineheight", _wrap_uiText_set_lineheight},
    { "set_lineselected", _wrap_uiText_set_lineselected},
    { "set_tabwidth", _wrap_uiText_set_tabwidth},
    {0,0}
};
static swig_lua_method swig_uiText_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_uiText_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_uiText_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_uiText_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_uiText_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_uiText_Sf_SwigStatic = {
    "uiText",
    swig_uiText_Sf_SwigStatic_methods,
    swig_uiText_Sf_SwigStatic_attributes,
    swig_uiText_Sf_SwigStatic_constants,
    swig_uiText_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_uiText_bases[] = {0,0};
static const char *swig_uiText_base_names[] = {"uiAbstractScrollableNode_t *",0};
static swig_lua_class _wrap_class_uiText = { "uiText", "uiText", &SWIGTYPE_p_uiTextNode_t,_proxy__wrap_new_uiText, swig_delete_uiText, swig_uiText_methods, swig_uiText_attributes, &swig_uiText_Sf_SwigStatic, swig_uiText_meta, swig_uiText_bases, swig_uiText_base_names };

static int _wrap_new_uiText2(lua_State* L) {
  int SWIG_arg = 0;
  uiText2Node_t *result = 0 ;
  
  SWIG_check_num_args("uiText2Node_t::uiText2Node_t",0,0)
  result = (uiText2Node_t *)new uiText2Node_t();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_uiText2Node_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_uiText2(void *obj) {
uiText2Node_t *arg1 = (uiText2Node_t *) obj;
delete arg1;
}
static int _proxy__wrap_new_uiText2(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_uiText2);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_uiText2_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_uiText2_methods[]= {
    {0,0}
};
static swig_lua_method swig_uiText2_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_uiText2_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_uiText2_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_uiText2_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_uiText2_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_uiText2_Sf_SwigStatic = {
    "uiText2",
    swig_uiText2_Sf_SwigStatic_methods,
    swig_uiText2_Sf_SwigStatic_attributes,
    swig_uiText2_Sf_SwigStatic_constants,
    swig_uiText2_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_uiText2_bases[] = {0,0};
static const char *swig_uiText2_base_names[] = {"uiTextNode_t *",0};
static swig_lua_class _wrap_class_uiText2 = { "uiText2", "uiText2", &SWIGTYPE_p_uiText2Node_t,_proxy__wrap_new_uiText2, swig_delete_uiText2, swig_uiText2_methods, swig_uiText2_attributes, &swig_uiText2_Sf_SwigStatic, swig_uiText2_meta, swig_uiText2_bases, swig_uiText2_base_names };

static int _wrap_uiTextEntry_is_password(lua_State* L) {
  int SWIG_arg = 0;
  uiTextEntryNode_t *arg1 = (uiTextEntryNode_t *) 0 ;
  bool result;
  
  SWIG_check_num_args("uiTextEntryNode_t::is_password",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("uiTextEntryNode_t::is_password",1,"uiTextEntryNode_t *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_uiTextEntryNode_t,0))){
    SWIG_fail_ptr("uiTextEntry_is_password",1,SWIGTYPE_p_uiTextEntryNode_t);
  }
  
  result = (bool)uiTextEntryNode_t_is_password(arg1);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_uiTextEntry_is_clickoutabort(lua_State* L) {
  int SWIG_arg = 0;
  uiTextEntryNode_t *arg1 = (uiTextEntryNode_t *) 0 ;
  bool result;
  
  SWIG_check_num_args("uiTextEntryNode_t::is_clickoutabort",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("uiTextEntryNode_t::is_clickoutabort",1,"uiTextEntryNode_t *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_uiTextEntryNode_t,0))){
    SWIG_fail_ptr("uiTextEntry_is_clickoutabort",1,SWIGTYPE_p_uiTextEntryNode_t);
  }
  
  result = (bool)uiTextEntryNode_t_is_clickoutabort(arg1);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_uiTextEntry_cursorposition(lua_State* L) {
  int SWIG_arg = 0;
  uiTextEntryNode_t *arg1 = (uiTextEntryNode_t *) 0 ;
  int result;
  
  SWIG_check_num_args("uiTextEntryNode_t::cursorposition",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("uiTextEntryNode_t::cursorposition",1,"uiTextEntryNode_t *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_uiTextEntryNode_t,0))){
    SWIG_fail_ptr("uiTextEntry_cursorposition",1,SWIGTYPE_p_uiTextEntryNode_t);
  }
  
  result = (int)uiTextEntryNode_t_cursorposition(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_uiTextEntry_set_password(lua_State* L) {
  int SWIG_arg = 0;
  uiTextEntryNode_t *arg1 = (uiTextEntryNode_t *) 0 ;
  bool arg2 ;
  
  SWIG_check_num_args("uiTextEntryNode_t::set_password",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("uiTextEntryNode_t::set_password",1,"uiTextEntryNode_t *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("uiTextEntryNode_t::set_password",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_uiTextEntryNode_t,0))){
    SWIG_fail_ptr("uiTextEntry_set_password",1,SWIGTYPE_p_uiTextEntryNode_t);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  uiTextEntryNode_t_set_password(arg1,arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_uiTextEntry_set_clickoutabort(lua_State* L) {
  int SWIG_arg = 0;
  uiTextEntryNode_t *arg1 = (uiTextEntryNode_t *) 0 ;
  bool arg2 ;
  
  SWIG_check_num_args("uiTextEntryNode_t::set_clickoutabort",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("uiTextEntryNode_t::set_clickoutabort",1,"uiTextEntryNode_t *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("uiTextEntryNode_t::set_clickoutabort",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_uiTextEntryNode_t,0))){
    SWIG_fail_ptr("uiTextEntry_set_clickoutabort",1,SWIGTYPE_p_uiTextEntryNode_t);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  uiTextEntryNode_t_set_clickoutabort(arg1,arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_uiTextEntry_set_background(lua_State* L) {
  int SWIG_arg = 0;
  uiTextEntryNode_t *arg1 = (uiTextEntryNode_t *) 0 ;
  char *arg2 = (char *) 0 ;
  
  SWIG_check_num_args("uiTextEntryNode_t::set_background",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("uiTextEntryNode_t::set_background",1,"uiTextEntryNode_t *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("uiTextEntryNode_t::set_background",2,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_uiTextEntryNode_t,0))){
    SWIG_fail_ptr("uiTextEntry_set_background",1,SWIGTYPE_p_uiTextEntryNode_t);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  uiTextEntryNode_t_set_background(arg1,(char const *)arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_uiTextEntry_on_textabort_set(lua_State* L) {
  int SWIG_arg = 0;
  uiTextEntryNode_t *arg1 = (uiTextEntryNode_t *) 0 ;
  LUA_EVENT arg2 ;
  
  SWIG_check_num_args("uiTextEntryNode_t::lua_onTextEntryAbort",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("uiTextEntryNode_t::lua_onTextEntryAbort",1,"uiTextEntryNode_t *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_uiTextEntryNode_t,0))){
    SWIG_fail_ptr("uiTextEntry_on_textabort_set",1,SWIGTYPE_p_uiTextEntryNode_t);
  }
  
  {
    arg2 = (LUA_EVENT)luaL_ref (L, LUA_REGISTRYINDEX);
  }
  uiTextEntryNode_t_lua_onTextEntryAbort_set(arg1,arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_uiTextEntry_on_textabort_get(lua_State* L) {
  int SWIG_arg = 0;
  uiTextEntryNode_t *arg1 = (uiTextEntryNode_t *) 0 ;
  LUA_EVENT result;
  
  SWIG_check_num_args("uiTextEntryNode_t::lua_onTextEntryAbort",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("uiTextEntryNode_t::lua_onTextEntryAbort",1,"uiTextEntryNode_t *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_uiTextEntryNode_t,0))){
    SWIG_fail_ptr("uiTextEntry_on_textabort_get",1,SWIGTYPE_p_uiTextEntryNode_t);
  }
  
  result = uiTextEntryNode_t_lua_onTextEntryAbort_get(arg1);
  {
    LUA_EVENT * resultptr = new LUA_EVENT((const LUA_EVENT &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_LUA_EVENT,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_uiTextEntry(lua_State* L) {
  int SWIG_arg = 0;
  uiTextEntryNode_t *result = 0 ;
  
  SWIG_check_num_args("uiTextEntryNode_t::uiTextEntryNode_t",0,0)
  result = (uiTextEntryNode_t *)new uiTextEntryNode_t();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_uiTextEntryNode_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_uiTextEntry(void *obj) {
uiTextEntryNode_t *arg1 = (uiTextEntryNode_t *) obj;
delete arg1;
}
static int _proxy__wrap_new_uiTextEntry(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_uiTextEntry);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_uiTextEntry_attributes[] = {
    { "on_textabort", _wrap_uiTextEntry_on_textabort_get, _wrap_uiTextEntry_on_textabort_set },
    {0,0,0}
};
static swig_lua_method swig_uiTextEntry_methods[]= {
    { "is_password", _wrap_uiTextEntry_is_password},
    { "is_clickoutabort", _wrap_uiTextEntry_is_clickoutabort},
    { "cursorposition", _wrap_uiTextEntry_cursorposition},
    { "set_password", _wrap_uiTextEntry_set_password},
    { "set_clickoutabort", _wrap_uiTextEntry_set_clickoutabort},
    { "set_background", _wrap_uiTextEntry_set_background},
    {0,0}
};
static swig_lua_method swig_uiTextEntry_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_uiTextEntry_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_uiTextEntry_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_uiTextEntry_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_uiTextEntry_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_uiTextEntry_Sf_SwigStatic = {
    "uiTextEntry",
    swig_uiTextEntry_Sf_SwigStatic_methods,
    swig_uiTextEntry_Sf_SwigStatic_attributes,
    swig_uiTextEntry_Sf_SwigStatic_constants,
    swig_uiTextEntry_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_uiTextEntry_bases[] = {0,0};
static const char *swig_uiTextEntry_base_names[] = {"uiNode_t *",0};
static swig_lua_class _wrap_class_uiTextEntry = { "uiTextEntry", "uiTextEntry", &SWIGTYPE_p_uiTextEntryNode_t,_proxy__wrap_new_uiTextEntry, swig_delete_uiTextEntry, swig_uiTextEntry_methods, swig_uiTextEntry_attributes, &swig_uiTextEntry_Sf_SwigStatic, swig_uiTextEntry_meta, swig_uiTextEntry_bases, swig_uiTextEntry_base_names };

static int _wrap_new_uiTextList(lua_State* L) {
  int SWIG_arg = 0;
  uiTextListNode_t *result = 0 ;
  
  SWIG_check_num_args("uiTextListNode_t::uiTextListNode_t",0,0)
  result = (uiTextListNode_t *)new uiTextListNode_t();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_uiTextListNode_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_uiTextList(void *obj) {
uiTextListNode_t *arg1 = (uiTextListNode_t *) obj;
delete arg1;
}
static int _proxy__wrap_new_uiTextList(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_uiTextList);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_uiTextList_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_uiTextList_methods[]= {
    {0,0}
};
static swig_lua_method swig_uiTextList_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_uiTextList_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_uiTextList_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_uiTextList_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_uiTextList_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_uiTextList_Sf_SwigStatic = {
    "uiTextList",
    swig_uiTextList_Sf_SwigStatic_methods,
    swig_uiTextList_Sf_SwigStatic_attributes,
    swig_uiTextList_Sf_SwigStatic_constants,
    swig_uiTextList_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_uiTextList_bases[] = {0,0};
static const char *swig_uiTextList_base_names[] = {"uiTextNode_t *",0};
static swig_lua_class _wrap_class_uiTextList = { "uiTextList", "uiTextList", &SWIGTYPE_p_uiTextListNode_t,_proxy__wrap_new_uiTextList, swig_delete_uiTextList, swig_uiTextList_methods, swig_uiTextList_attributes, &swig_uiTextList_Sf_SwigStatic, swig_uiTextList_meta, swig_uiTextList_bases, swig_uiTextList_base_names };

static int _wrap_uiTexture_set_source(lua_State* L) {
  int SWIG_arg = 0;
  uiTextureNode_t *arg1 = (uiTextureNode_t *) 0 ;
  char *arg2 = (char *) 0 ;
  
  SWIG_check_num_args("uiTextureNode_t::set_source",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("uiTextureNode_t::set_source",1,"uiTextureNode_t *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("uiTextureNode_t::set_source",2,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_uiTextureNode_t,0))){
    SWIG_fail_ptr("uiTexture_set_source",1,SWIGTYPE_p_uiTextureNode_t);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  uiTextureNode_t_set_source(arg1,(char const *)arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_uiTexture(lua_State* L) {
  int SWIG_arg = 0;
  uiTextureNode_t *result = 0 ;
  
  SWIG_check_num_args("uiTextureNode_t::uiTextureNode_t",0,0)
  result = (uiTextureNode_t *)new uiTextureNode_t();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_uiTextureNode_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_uiTexture(void *obj) {
uiTextureNode_t *arg1 = (uiTextureNode_t *) obj;
delete arg1;
}
static int _proxy__wrap_new_uiTexture(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_uiTexture);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_uiTexture_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_uiTexture_methods[]= {
    { "set_source", _wrap_uiTexture_set_source},
    {0,0}
};
static swig_lua_method swig_uiTexture_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_uiTexture_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_uiTexture_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_uiTexture_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_uiTexture_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_uiTexture_Sf_SwigStatic = {
    "uiTexture",
    swig_uiTexture_Sf_SwigStatic_methods,
    swig_uiTexture_Sf_SwigStatic_attributes,
    swig_uiTexture_Sf_SwigStatic_constants,
    swig_uiTexture_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_uiTexture_bases[] = {0,0};
static const char *swig_uiTexture_base_names[] = {"uiNode_t *",0};
static swig_lua_class _wrap_class_uiTexture = { "uiTexture", "uiTexture", &SWIGTYPE_p_uiTextureNode_t,_proxy__wrap_new_uiTexture, swig_delete_uiTexture, swig_uiTexture_methods, swig_uiTexture_attributes, &swig_uiTexture_Sf_SwigStatic, swig_uiTexture_meta, swig_uiTexture_bases, swig_uiTexture_base_names };

static int _wrap_uiTimer_timeout(lua_State* L) {
  int SWIG_arg = 0;
  uiTimerNode_t *arg1 = (uiTimerNode_t *) 0 ;
  int result;
  
  SWIG_check_num_args("uiTimerNode_t::timeout",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("uiTimerNode_t::timeout",1,"uiTimerNode_t *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_uiTimerNode_t,0))){
    SWIG_fail_ptr("uiTimer_timeout",1,SWIGTYPE_p_uiTimerNode_t);
  }
  
  result = (int)uiTimerNode_t_timeout(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_uiTimer_set_timeout(lua_State* L) {
  int SWIG_arg = 0;
  uiTimerNode_t *arg1 = (uiTimerNode_t *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("uiTimerNode_t::set_timeout",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("uiTimerNode_t::set_timeout",1,"uiTimerNode_t *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("uiTimerNode_t::set_timeout",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_uiTimerNode_t,0))){
    SWIG_fail_ptr("uiTimer_set_timeout",1,SWIGTYPE_p_uiTimerNode_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  uiTimerNode_t_set_timeout(arg1,arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_uiTimer_lua_onEvent_set(lua_State* L) {
  int SWIG_arg = 0;
  uiTimerNode_t *arg1 = (uiTimerNode_t *) 0 ;
  LUA_EVENT arg2 ;
  
  SWIG_check_num_args("uiTimerNode_t::lua_onEvent",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("uiTimerNode_t::lua_onEvent",1,"uiTimerNode_t *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_uiTimerNode_t,0))){
    SWIG_fail_ptr("uiTimer_lua_onEvent_set",1,SWIGTYPE_p_uiTimerNode_t);
  }
  
  {
    arg2 = (LUA_EVENT)luaL_ref (L, LUA_REGISTRYINDEX);
  }
  uiTimerNode_t_lua_onEvent_set(arg1,arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_uiTimer_lua_onEvent_get(lua_State* L) {
  int SWIG_arg = 0;
  uiTimerNode_t *arg1 = (uiTimerNode_t *) 0 ;
  LUA_EVENT result;
  
  SWIG_check_num_args("uiTimerNode_t::lua_onEvent",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("uiTimerNode_t::lua_onEvent",1,"uiTimerNode_t *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_uiTimerNode_t,0))){
    SWIG_fail_ptr("uiTimer_lua_onEvent_get",1,SWIGTYPE_p_uiTimerNode_t);
  }
  
  result = uiTimerNode_t_lua_onEvent_get(arg1);
  {
    LUA_EVENT * resultptr = new LUA_EVENT((const LUA_EVENT &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_LUA_EVENT,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_uiTimer(lua_State* L) {
  int SWIG_arg = 0;
  uiTimerNode_t *result = 0 ;
  
  SWIG_check_num_args("uiTimerNode_t::uiTimerNode_t",0,0)
  result = (uiTimerNode_t *)new uiTimerNode_t();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_uiTimerNode_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_uiTimer(void *obj) {
uiTimerNode_t *arg1 = (uiTimerNode_t *) obj;
delete arg1;
}
static int _proxy__wrap_new_uiTimer(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_uiTimer);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_uiTimer_attributes[] = {
    { "lua_onEvent", _wrap_uiTimer_lua_onEvent_get, _wrap_uiTimer_lua_onEvent_set },
    {0,0,0}
};
static swig_lua_method swig_uiTimer_methods[]= {
    { "timeout", _wrap_uiTimer_timeout},
    { "set_timeout", _wrap_uiTimer_set_timeout},
    {0,0}
};
static swig_lua_method swig_uiTimer_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_uiTimer_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_uiTimer_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_uiTimer_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_uiTimer_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_uiTimer_Sf_SwigStatic = {
    "uiTimer",
    swig_uiTimer_Sf_SwigStatic_methods,
    swig_uiTimer_Sf_SwigStatic_attributes,
    swig_uiTimer_Sf_SwigStatic_constants,
    swig_uiTimer_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_uiTimer_bases[] = {0,0};
static const char *swig_uiTimer_base_names[] = {"uiNode_t *",0};
static swig_lua_class _wrap_class_uiTimer = { "uiTimer", "uiTimer", &SWIGTYPE_p_uiTimerNode_t,_proxy__wrap_new_uiTimer, swig_delete_uiTimer, swig_uiTimer_methods, swig_uiTimer_attributes, &swig_uiTimer_Sf_SwigStatic, swig_uiTimer_meta, swig_uiTimer_bases, swig_uiTimer_base_names };

static int _wrap_uiVideo_is_nosound(lua_State* L) {
  int SWIG_arg = 0;
  uiVideoNode_t *arg1 = (uiVideoNode_t *) 0 ;
  bool result;
  
  SWIG_check_num_args("uiVideoNode_t::is_nosound",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("uiVideoNode_t::is_nosound",1,"uiVideoNode_t *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_uiVideoNode_t,0))){
    SWIG_fail_ptr("uiVideo_is_nosound",1,SWIGTYPE_p_uiVideoNode_t);
  }
  
  result = (bool)uiVideoNode_t_is_nosound(arg1);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_uiVideo_set_nosound(lua_State* L) {
  int SWIG_arg = 0;
  uiVideoNode_t *arg1 = (uiVideoNode_t *) 0 ;
  bool arg2 ;
  
  SWIG_check_num_args("uiVideoNode_t::set_nosound",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("uiVideoNode_t::set_nosound",1,"uiVideoNode_t *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("uiVideoNode_t::set_nosound",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_uiVideoNode_t,0))){
    SWIG_fail_ptr("uiVideo_set_nosound",1,SWIGTYPE_p_uiVideoNode_t);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  uiVideoNode_t_set_nosound(arg1,arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_uiVideo_set_source(lua_State* L) {
  int SWIG_arg = 0;
  uiVideoNode_t *arg1 = (uiVideoNode_t *) 0 ;
  char *arg2 = (char *) 0 ;
  
  SWIG_check_num_args("uiVideoNode_t::set_source",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("uiVideoNode_t::set_source",1,"uiVideoNode_t *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("uiVideoNode_t::set_source",2,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_uiVideoNode_t,0))){
    SWIG_fail_ptr("uiVideo_set_source",1,SWIGTYPE_p_uiVideoNode_t);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  uiVideoNode_t_set_source(arg1,(char const *)arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_uiVideo_lua_onEnd_set(lua_State* L) {
  int SWIG_arg = 0;
  uiVideoNode_t *arg1 = (uiVideoNode_t *) 0 ;
  LUA_EVENT arg2 ;
  
  SWIG_check_num_args("uiVideoNode_t::lua_onEnd",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("uiVideoNode_t::lua_onEnd",1,"uiVideoNode_t *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_uiVideoNode_t,0))){
    SWIG_fail_ptr("uiVideo_lua_onEnd_set",1,SWIGTYPE_p_uiVideoNode_t);
  }
  
  {
    arg2 = (LUA_EVENT)luaL_ref (L, LUA_REGISTRYINDEX);
  }
  uiVideoNode_t_lua_onEnd_set(arg1,arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_uiVideo_lua_onEnd_get(lua_State* L) {
  int SWIG_arg = 0;
  uiVideoNode_t *arg1 = (uiVideoNode_t *) 0 ;
  LUA_EVENT result;
  
  SWIG_check_num_args("uiVideoNode_t::lua_onEnd",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("uiVideoNode_t::lua_onEnd",1,"uiVideoNode_t *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_uiVideoNode_t,0))){
    SWIG_fail_ptr("uiVideo_lua_onEnd_get",1,SWIGTYPE_p_uiVideoNode_t);
  }
  
  result = uiVideoNode_t_lua_onEnd_get(arg1);
  {
    LUA_EVENT * resultptr = new LUA_EVENT((const LUA_EVENT &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_LUA_EVENT,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_uiVideo(lua_State* L) {
  int SWIG_arg = 0;
  uiVideoNode_t *result = 0 ;
  
  SWIG_check_num_args("uiVideoNode_t::uiVideoNode_t",0,0)
  result = (uiVideoNode_t *)new uiVideoNode_t();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_uiVideoNode_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_uiVideo(void *obj) {
uiVideoNode_t *arg1 = (uiVideoNode_t *) obj;
delete arg1;
}
static int _proxy__wrap_new_uiVideo(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_uiVideo);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_uiVideo_attributes[] = {
    { "lua_onEnd", _wrap_uiVideo_lua_onEnd_get, _wrap_uiVideo_lua_onEnd_set },
    {0,0,0}
};
static swig_lua_method swig_uiVideo_methods[]= {
    { "is_nosound", _wrap_uiVideo_is_nosound},
    { "set_nosound", _wrap_uiVideo_set_nosound},
    { "set_source", _wrap_uiVideo_set_source},
    {0,0}
};
static swig_lua_method swig_uiVideo_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_uiVideo_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_uiVideo_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_uiVideo_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_uiVideo_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_uiVideo_Sf_SwigStatic = {
    "uiVideo",
    swig_uiVideo_Sf_SwigStatic_methods,
    swig_uiVideo_Sf_SwigStatic_attributes,
    swig_uiVideo_Sf_SwigStatic_constants,
    swig_uiVideo_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_uiVideo_bases[] = {0,0};
static const char *swig_uiVideo_base_names[] = {"uiNode_t *",0};
static swig_lua_class _wrap_class_uiVideo = { "uiVideo", "uiVideo", &SWIGTYPE_p_uiVideoNode_t,_proxy__wrap_new_uiVideo, swig_delete_uiVideo, swig_uiVideo_methods, swig_uiVideo_attributes, &swig_uiVideo_Sf_SwigStatic, swig_uiVideo_meta, swig_uiVideo_bases, swig_uiVideo_base_names };

static int _wrap_new_uiVScrollbar(lua_State* L) {
  int SWIG_arg = 0;
  uiVScrollBarNode_t *result = 0 ;
  
  SWIG_check_num_args("uiVScrollBarNode_t::uiVScrollBarNode_t",0,0)
  result = (uiVScrollBarNode_t *)new uiVScrollBarNode_t();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_uiVScrollBarNode_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_uiVScrollbar(void *obj) {
uiVScrollBarNode_t *arg1 = (uiVScrollBarNode_t *) obj;
delete arg1;
}
static int _proxy__wrap_new_uiVScrollbar(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_uiVScrollbar);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_uiVScrollbar_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_uiVScrollbar_methods[]= {
    {0,0}
};
static swig_lua_method swig_uiVScrollbar_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_uiVScrollbar_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_uiVScrollbar_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_uiVScrollbar_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_uiVScrollbar_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_uiVScrollbar_Sf_SwigStatic = {
    "uiVScrollbar",
    swig_uiVScrollbar_Sf_SwigStatic_methods,
    swig_uiVScrollbar_Sf_SwigStatic_attributes,
    swig_uiVScrollbar_Sf_SwigStatic_constants,
    swig_uiVScrollbar_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_uiVScrollbar_bases[] = {0,0};
static const char *swig_uiVScrollbar_base_names[] = {"uiAbstractScrollbarNode_t *",0};
static swig_lua_class _wrap_class_uiVScrollbar = { "uiVScrollbar", "uiVScrollbar", &SWIGTYPE_p_uiVScrollBarNode_t,_proxy__wrap_new_uiVScrollbar, swig_delete_uiVScrollbar, swig_uiVScrollbar_methods, swig_uiVScrollbar_attributes, &swig_uiVScrollbar_Sf_SwigStatic, swig_uiVScrollbar_meta, swig_uiVScrollbar_bases, swig_uiVScrollbar_base_names };

static int _wrap_new_uiWidget(lua_State* L) {
  int SWIG_arg = 0;
  uiWidgetNode_t *result = 0 ;
  
  SWIG_check_num_args("uiWidgetNode_t::uiWidgetNode_t",0,0)
  result = (uiWidgetNode_t *)new uiWidgetNode_t();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_uiWidgetNode_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_uiWidget(void *obj) {
uiWidgetNode_t *arg1 = (uiWidgetNode_t *) obj;
delete arg1;
}
static int _proxy__wrap_new_uiWidget(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_uiWidget);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_uiWidget_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_uiWidget_methods[]= {
    {0,0}
};
static swig_lua_method swig_uiWidget_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_uiWidget_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_uiWidget_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_uiWidget_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_uiWidget_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_uiWidget_Sf_SwigStatic = {
    "uiWidget",
    swig_uiWidget_Sf_SwigStatic_methods,
    swig_uiWidget_Sf_SwigStatic_attributes,
    swig_uiWidget_Sf_SwigStatic_constants,
    swig_uiWidget_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_uiWidget_bases[] = {0,0};
static const char *swig_uiWidget_base_names[] = {"uiImageNode_t *",0};
static swig_lua_class _wrap_class_uiWidget = { "uiWidget", "uiWidget", &SWIGTYPE_p_uiWidgetNode_t,_proxy__wrap_new_uiWidget, swig_delete_uiWidget, swig_uiWidget_methods, swig_uiWidget_attributes, &swig_uiWidget_Sf_SwigStatic, swig_uiWidget_meta, swig_uiWidget_bases, swig_uiWidget_base_names };

static int _wrap_uiWindow_is_fullscreen(lua_State* L) {
  int SWIG_arg = 0;
  uiWindowNode_t *arg1 = (uiWindowNode_t *) 0 ;
  bool result;
  
  SWIG_check_num_args("uiWindowNode_t::is_fullscreen",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("uiWindowNode_t::is_fullscreen",1,"uiWindowNode_t *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_uiWindowNode_t,0))){
    SWIG_fail_ptr("uiWindow_is_fullscreen",1,SWIGTYPE_p_uiWindowNode_t);
  }
  
  result = (bool)uiWindowNode_t_is_fullscreen(arg1);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_uiWindow_is_modal(lua_State* L) {
  int SWIG_arg = 0;
  uiWindowNode_t *arg1 = (uiWindowNode_t *) 0 ;
  bool result;
  
  SWIG_check_num_args("uiWindowNode_t::is_modal",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("uiWindowNode_t::is_modal",1,"uiWindowNode_t *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_uiWindowNode_t,0))){
    SWIG_fail_ptr("uiWindow_is_modal",1,SWIGTYPE_p_uiWindowNode_t);
  }
  
  result = (bool)uiWindowNode_t_is_modal(arg1);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_uiWindow_is_starlayout(lua_State* L) {
  int SWIG_arg = 0;
  uiWindowNode_t *arg1 = (uiWindowNode_t *) 0 ;
  bool result;
  
  SWIG_check_num_args("uiWindowNode_t::is_starlayout",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("uiWindowNode_t::is_starlayout",1,"uiWindowNode_t *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_uiWindowNode_t,0))){
    SWIG_fail_ptr("uiWindow_is_starlayout",1,SWIGTYPE_p_uiWindowNode_t);
  }
  
  result = (bool)uiWindowNode_t_is_starlayout(arg1);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_uiWindow_close(lua_State* L) {
  int SWIG_arg = 0;
  uiWindowNode_t *arg1 = (uiWindowNode_t *) 0 ;
  
  SWIG_check_num_args("uiWindowNode_t::close",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("uiWindowNode_t::close",1,"uiWindowNode_t *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_uiWindowNode_t,0))){
    SWIG_fail_ptr("uiWindow_close",1,SWIGTYPE_p_uiWindowNode_t);
  }
  
  uiWindowNode_t_close(arg1);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_uiWindow_open(lua_State* L) {
  int SWIG_arg = 0;
  uiWindowNode_t *arg1 = (uiWindowNode_t *) 0 ;
  
  SWIG_check_num_args("uiWindowNode_t::open",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("uiWindowNode_t::open",1,"uiWindowNode_t *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_uiWindowNode_t,0))){
    SWIG_fail_ptr("uiWindow_open",1,SWIGTYPE_p_uiWindowNode_t);
  }
  
  uiWindowNode_t_open(arg1);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_uiWindow_set_background(lua_State* L) {
  int SWIG_arg = 0;
  uiWindowNode_t *arg1 = (uiWindowNode_t *) 0 ;
  char *arg2 = (char *) 0 ;
  
  SWIG_check_num_args("uiWindowNode_t::set_background",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("uiWindowNode_t::set_background",1,"uiWindowNode_t *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("uiWindowNode_t::set_background",2,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_uiWindowNode_t,0))){
    SWIG_fail_ptr("uiWindow_set_background",1,SWIGTYPE_p_uiWindowNode_t);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  uiWindowNode_t_set_background(arg1,(char const *)arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_uiWindow_set_fullscreen(lua_State* L) {
  int SWIG_arg = 0;
  uiWindowNode_t *arg1 = (uiWindowNode_t *) 0 ;
  bool arg2 ;
  
  SWIG_check_num_args("uiWindowNode_t::set_fullscreen",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("uiWindowNode_t::set_fullscreen",1,"uiWindowNode_t *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("uiWindowNode_t::set_fullscreen",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_uiWindowNode_t,0))){
    SWIG_fail_ptr("uiWindow_set_fullscreen",1,SWIGTYPE_p_uiWindowNode_t);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  uiWindowNode_t_set_fullscreen(arg1,arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_uiWindow_set_modal(lua_State* L) {
  int SWIG_arg = 0;
  uiWindowNode_t *arg1 = (uiWindowNode_t *) 0 ;
  bool arg2 ;
  
  SWIG_check_num_args("uiWindowNode_t::set_modal",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("uiWindowNode_t::set_modal",1,"uiWindowNode_t *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("uiWindowNode_t::set_modal",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_uiWindowNode_t,0))){
    SWIG_fail_ptr("uiWindow_set_modal",1,SWIGTYPE_p_uiWindowNode_t);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  uiWindowNode_t_set_modal(arg1,arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_uiWindow_set_fill(lua_State* L) {
  int SWIG_arg = 0;
  uiWindowNode_t *arg1 = (uiWindowNode_t *) 0 ;
  bool arg2 ;
  
  SWIG_check_num_args("uiWindowNode_t::set_fill",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("uiWindowNode_t::set_fill",1,"uiWindowNode_t *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("uiWindowNode_t::set_fill",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_uiWindowNode_t,0))){
    SWIG_fail_ptr("uiWindow_set_fill",1,SWIGTYPE_p_uiWindowNode_t);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  uiWindowNode_t_set_fill(arg1,arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_uiWindow_set_dragbutton(lua_State* L) {
  int SWIG_arg = 0;
  uiWindowNode_t *arg1 = (uiWindowNode_t *) 0 ;
  bool arg2 ;
  
  SWIG_check_num_args("uiWindowNode_t::set_dragbutton",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("uiWindowNode_t::set_dragbutton",1,"uiWindowNode_t *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("uiWindowNode_t::set_dragbutton",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_uiWindowNode_t,0))){
    SWIG_fail_ptr("uiWindow_set_dragbutton",1,SWIGTYPE_p_uiWindowNode_t);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  uiWindowNode_t_set_dragbutton(arg1,arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_uiWindow_set_closebutton(lua_State* L) {
  int SWIG_arg = 0;
  uiWindowNode_t *arg1 = (uiWindowNode_t *) 0 ;
  bool arg2 ;
  
  SWIG_check_num_args("uiWindowNode_t::set_closebutton",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("uiWindowNode_t::set_closebutton",1,"uiWindowNode_t *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("uiWindowNode_t::set_closebutton",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_uiWindowNode_t,0))){
    SWIG_fail_ptr("uiWindow_set_closebutton",1,SWIGTYPE_p_uiWindowNode_t);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  uiWindowNode_t_set_closebutton(arg1,arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_uiWindow_set_starlayout(lua_State* L) {
  int SWIG_arg = 0;
  uiWindowNode_t *arg1 = (uiWindowNode_t *) 0 ;
  bool arg2 ;
  
  SWIG_check_num_args("uiWindowNode_t::set_starlayout",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("uiWindowNode_t::set_starlayout",1,"uiWindowNode_t *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("uiWindowNode_t::set_starlayout",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_uiWindowNode_t,0))){
    SWIG_fail_ptr("uiWindow_set_starlayout",1,SWIGTYPE_p_uiWindowNode_t);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  uiWindowNode_t_set_starlayout(arg1,arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_uiWindow_set_preventtypingescape(lua_State* L) {
  int SWIG_arg = 0;
  uiWindowNode_t *arg1 = (uiWindowNode_t *) 0 ;
  bool arg2 ;
  
  SWIG_check_num_args("uiWindowNode_t::set_preventtypingescape",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("uiWindowNode_t::set_preventtypingescape",1,"uiWindowNode_t *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("uiWindowNode_t::set_preventtypingescape",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_uiWindowNode_t,0))){
    SWIG_fail_ptr("uiWindow_set_preventtypingescape",1,SWIGTYPE_p_uiWindowNode_t);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  uiWindowNode_t_set_preventtypingescape(arg1,arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_uiWindow_set_noticepos(lua_State* L) {
  int SWIG_arg = 0;
  uiWindowNode_t *arg1 = (uiWindowNode_t *) 0 ;
  float arg2 ;
  float arg3 ;
  
  SWIG_check_num_args("uiWindowNode_t::set_noticepos",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("uiWindowNode_t::set_noticepos",1,"uiWindowNode_t *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("uiWindowNode_t::set_noticepos",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("uiWindowNode_t::set_noticepos",3,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_uiWindowNode_t,0))){
    SWIG_fail_ptr("uiWindow_set_noticepos",1,SWIGTYPE_p_uiWindowNode_t);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3);
  uiWindowNode_t_set_noticepos(arg1,arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_uiWindow_on_windowopened_set(lua_State* L) {
  int SWIG_arg = 0;
  uiWindowNode_t *arg1 = (uiWindowNode_t *) 0 ;
  LUA_EVENT arg2 ;
  
  SWIG_check_num_args("uiWindowNode_t::lua_onWindowOpened",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("uiWindowNode_t::lua_onWindowOpened",1,"uiWindowNode_t *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_uiWindowNode_t,0))){
    SWIG_fail_ptr("uiWindow_on_windowopened_set",1,SWIGTYPE_p_uiWindowNode_t);
  }
  
  {
    arg2 = (LUA_EVENT)luaL_ref (L, LUA_REGISTRYINDEX);
  }
  uiWindowNode_t_lua_onWindowOpened_set(arg1,arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_uiWindow_on_windowopened_get(lua_State* L) {
  int SWIG_arg = 0;
  uiWindowNode_t *arg1 = (uiWindowNode_t *) 0 ;
  LUA_EVENT result;
  
  SWIG_check_num_args("uiWindowNode_t::lua_onWindowOpened",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("uiWindowNode_t::lua_onWindowOpened",1,"uiWindowNode_t *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_uiWindowNode_t,0))){
    SWIG_fail_ptr("uiWindow_on_windowopened_get",1,SWIGTYPE_p_uiWindowNode_t);
  }
  
  result = uiWindowNode_t_lua_onWindowOpened_get(arg1);
  {
    LUA_EVENT * resultptr = new LUA_EVENT((const LUA_EVENT &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_LUA_EVENT,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_uiWindow_on_windowclosed_set(lua_State* L) {
  int SWIG_arg = 0;
  uiWindowNode_t *arg1 = (uiWindowNode_t *) 0 ;
  LUA_EVENT arg2 ;
  
  SWIG_check_num_args("uiWindowNode_t::lua_onWindowClosed",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("uiWindowNode_t::lua_onWindowClosed",1,"uiWindowNode_t *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_uiWindowNode_t,0))){
    SWIG_fail_ptr("uiWindow_on_windowclosed_set",1,SWIGTYPE_p_uiWindowNode_t);
  }
  
  {
    arg2 = (LUA_EVENT)luaL_ref (L, LUA_REGISTRYINDEX);
  }
  uiWindowNode_t_lua_onWindowClosed_set(arg1,arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_uiWindow_on_windowclosed_get(lua_State* L) {
  int SWIG_arg = 0;
  uiWindowNode_t *arg1 = (uiWindowNode_t *) 0 ;
  LUA_EVENT result;
  
  SWIG_check_num_args("uiWindowNode_t::lua_onWindowClosed",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("uiWindowNode_t::lua_onWindowClosed",1,"uiWindowNode_t *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_uiWindowNode_t,0))){
    SWIG_fail_ptr("uiWindow_on_windowclosed_get",1,SWIGTYPE_p_uiWindowNode_t);
  }
  
  result = uiWindowNode_t_lua_onWindowClosed_get(arg1);
  {
    LUA_EVENT * resultptr = new LUA_EVENT((const LUA_EVENT &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_LUA_EVENT,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_uiWindow(lua_State* L) {
  int SWIG_arg = 0;
  uiWindowNode_t *result = 0 ;
  
  SWIG_check_num_args("uiWindowNode_t::uiWindowNode_t",0,0)
  result = (uiWindowNode_t *)new uiWindowNode_t();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_uiWindowNode_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_uiWindow(void *obj) {
uiWindowNode_t *arg1 = (uiWindowNode_t *) obj;
delete arg1;
}
static int _proxy__wrap_new_uiWindow(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_uiWindow);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_uiWindow_attributes[] = {
    { "on_windowopened", _wrap_uiWindow_on_windowopened_get, _wrap_uiWindow_on_windowopened_set },
    { "on_windowclosed", _wrap_uiWindow_on_windowclosed_get, _wrap_uiWindow_on_windowclosed_set },
    {0,0,0}
};
static swig_lua_method swig_uiWindow_methods[]= {
    { "is_fullscreen", _wrap_uiWindow_is_fullscreen},
    { "is_modal", _wrap_uiWindow_is_modal},
    { "is_starlayout", _wrap_uiWindow_is_starlayout},
    { "close", _wrap_uiWindow_close},
    { "open", _wrap_uiWindow_open},
    { "set_background", _wrap_uiWindow_set_background},
    { "set_fullscreen", _wrap_uiWindow_set_fullscreen},
    { "set_modal", _wrap_uiWindow_set_modal},
    { "set_fill", _wrap_uiWindow_set_fill},
    { "set_dragbutton", _wrap_uiWindow_set_dragbutton},
    { "set_closebutton", _wrap_uiWindow_set_closebutton},
    { "set_starlayout", _wrap_uiWindow_set_starlayout},
    { "set_preventtypingescape", _wrap_uiWindow_set_preventtypingescape},
    { "set_noticepos", _wrap_uiWindow_set_noticepos},
    {0,0}
};
static swig_lua_method swig_uiWindow_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_uiWindow_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_uiWindow_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_uiWindow_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_uiWindow_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_uiWindow_Sf_SwigStatic = {
    "uiWindow",
    swig_uiWindow_Sf_SwigStatic_methods,
    swig_uiWindow_Sf_SwigStatic_attributes,
    swig_uiWindow_Sf_SwigStatic_constants,
    swig_uiWindow_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_uiWindow_bases[] = {0,0};
static const char *swig_uiWindow_base_names[] = {"uiNode_t *",0};
static swig_lua_class _wrap_class_uiWindow = { "uiWindow", "uiWindow", &SWIGTYPE_p_uiWindowNode_t,_proxy__wrap_new_uiWindow, swig_delete_uiWindow, swig_uiWindow_methods, swig_uiWindow_attributes, &swig_uiWindow_Sf_SwigStatic, swig_uiWindow_meta, swig_uiWindow_bases, swig_uiWindow_base_names };

static int _wrap_uiZone_is_repeat(lua_State* L) {
  int SWIG_arg = 0;
  uiZoneNode_t *arg1 = (uiZoneNode_t *) 0 ;
  bool result;
  
  SWIG_check_num_args("uiZoneNode_t::is_repeat",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("uiZoneNode_t::is_repeat",1,"uiZoneNode_t *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_uiZoneNode_t,0))){
    SWIG_fail_ptr("uiZone_is_repeat",1,SWIGTYPE_p_uiZoneNode_t);
  }
  
  result = (bool)uiZoneNode_t_is_repeat(arg1);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_uiZone_clickdelay(lua_State* L) {
  int SWIG_arg = 0;
  uiZoneNode_t *arg1 = (uiZoneNode_t *) 0 ;
  int result;
  
  SWIG_check_num_args("uiZoneNode_t::clickdelay",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("uiZoneNode_t::clickdelay",1,"uiZoneNode_t *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_uiZoneNode_t,0))){
    SWIG_fail_ptr("uiZone_clickdelay",1,SWIGTYPE_p_uiZoneNode_t);
  }
  
  result = (int)uiZoneNode_t_clickdelay(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_uiZone_set_repeat(lua_State* L) {
  int SWIG_arg = 0;
  uiZoneNode_t *arg1 = (uiZoneNode_t *) 0 ;
  bool arg2 ;
  
  SWIG_check_num_args("uiZoneNode_t::set_repeat",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("uiZoneNode_t::set_repeat",1,"uiZoneNode_t *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("uiZoneNode_t::set_repeat",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_uiZoneNode_t,0))){
    SWIG_fail_ptr("uiZone_set_repeat",1,SWIGTYPE_p_uiZoneNode_t);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  uiZoneNode_t_set_repeat(arg1,arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_uiZone_set_clickdelay(lua_State* L) {
  int SWIG_arg = 0;
  uiZoneNode_t *arg1 = (uiZoneNode_t *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("uiZoneNode_t::set_clickdelay",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("uiZoneNode_t::set_clickdelay",1,"uiZoneNode_t *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("uiZoneNode_t::set_clickdelay",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_uiZoneNode_t,0))){
    SWIG_fail_ptr("uiZone_set_clickdelay",1,SWIGTYPE_p_uiZoneNode_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  uiZoneNode_t_set_clickdelay(arg1,arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_uiZone(lua_State* L) {
  int SWIG_arg = 0;
  uiZoneNode_t *result = 0 ;
  
  SWIG_check_num_args("uiZoneNode_t::uiZoneNode_t",0,0)
  result = (uiZoneNode_t *)new uiZoneNode_t();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_uiZoneNode_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_uiZone(void *obj) {
uiZoneNode_t *arg1 = (uiZoneNode_t *) obj;
delete arg1;
}
static int _proxy__wrap_new_uiZone(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_uiZone);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_uiZone_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_uiZone_methods[]= {
    { "is_repeat", _wrap_uiZone_is_repeat},
    { "clickdelay", _wrap_uiZone_clickdelay},
    { "set_repeat", _wrap_uiZone_set_repeat},
    { "set_clickdelay", _wrap_uiZone_set_clickdelay},
    {0,0}
};
static swig_lua_method swig_uiZone_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_uiZone_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_uiZone_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_uiZone_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_uiZone_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_uiZone_Sf_SwigStatic = {
    "uiZone",
    swig_uiZone_Sf_SwigStatic_methods,
    swig_uiZone_Sf_SwigStatic_attributes,
    swig_uiZone_Sf_SwigStatic_constants,
    swig_uiZone_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_uiZone_bases[] = {0,0};
static const char *swig_uiZone_base_names[] = {"uiNode_t *",0};
static swig_lua_class _wrap_class_uiZone = { "uiZone", "uiZone", &SWIGTYPE_p_uiZoneNode_t,_proxy__wrap_new_uiZone, swig_delete_uiZone, swig_uiZone_methods, swig_uiZone_attributes, &swig_uiZone_Sf_SwigStatic, swig_uiZone_meta, swig_uiZone_bases, swig_uiZone_base_names };

static int _wrap_create_control(lua_State* L) {
  int SWIG_arg = 0;
  uiNode_t *arg1 = (uiNode_t *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  char *arg4 = (char *) 0 ;
  uiNode_t *result = 0 ;
  
  SWIG_check_num_args("UI_CreateControl",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("UI_CreateControl",1,"uiNode_t *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("UI_CreateControl",2,"char const *");
  if(!SWIG_lua_isnilstring(L,3)) SWIG_fail_arg("UI_CreateControl",3,"char const *");
  if(!SWIG_lua_isnilstring(L,4)) SWIG_fail_arg("UI_CreateControl",4,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_uiNode_t,0))){
    SWIG_fail_ptr("create_control",1,SWIGTYPE_p_uiNode_t);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  arg3 = (char *)lua_tostring(L, 3);
  arg4 = (char *)lua_tostring(L, 4);
  result = (uiNode_t *)UI_CreateControl(arg1,(char const *)arg2,(char const *)arg3,(char const *)arg4);
  {
    if (result) {
      swig_type_info* info=(swig_type_info*)result->behaviour->lua_SWIG_typeinfo;
      SWIG_NewPointerObj(L, result, info, 0); SWIG_arg++;
    }
    else {
      SWIG_NewPointerObj(L, nullptr, nullptr, 0); SWIG_arg++;
    }
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UI_CreateBar(lua_State* L) {
  int SWIG_arg = 0;
  uiNode_t *arg1 = (uiNode_t *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  uiBarNode_t *result = 0 ;
  
  SWIG_check_num_args("UI_CreateBar",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("UI_CreateBar",1,"uiNode_t *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("UI_CreateBar",2,"char const *");
  if(!SWIG_lua_isnilstring(L,3)) SWIG_fail_arg("UI_CreateBar",3,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_uiNode_t,0))){
    SWIG_fail_ptr("UI_CreateBar",1,SWIGTYPE_p_uiNode_t);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  arg3 = (char *)lua_tostring(L, 3);
  result = (uiBarNode_t *)UI_CreateBar(arg1,(char const *)arg2,(char const *)arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_uiBarNode_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UI_CreateBaseMap(lua_State* L) {
  int SWIG_arg = 0;
  uiNode_t *arg1 = (uiNode_t *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  uiBaseMapNode_t *result = 0 ;
  
  SWIG_check_num_args("UI_CreateBaseMap",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("UI_CreateBaseMap",1,"uiNode_t *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("UI_CreateBaseMap",2,"char const *");
  if(!SWIG_lua_isnilstring(L,3)) SWIG_fail_arg("UI_CreateBaseMap",3,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_uiNode_t,0))){
    SWIG_fail_ptr("UI_CreateBaseMap",1,SWIGTYPE_p_uiNode_t);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  arg3 = (char *)lua_tostring(L, 3);
  result = (uiBaseMapNode_t *)UI_CreateBaseMap(arg1,(char const *)arg2,(char const *)arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_uiBaseMapNode_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UI_CreateBaseLayout(lua_State* L) {
  int SWIG_arg = 0;
  uiNode_t *arg1 = (uiNode_t *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  uiBaseLayoutNode_t *result = 0 ;
  
  SWIG_check_num_args("UI_CreateBaseLayout",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("UI_CreateBaseLayout",1,"uiNode_t *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("UI_CreateBaseLayout",2,"char const *");
  if(!SWIG_lua_isnilstring(L,3)) SWIG_fail_arg("UI_CreateBaseLayout",3,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_uiNode_t,0))){
    SWIG_fail_ptr("UI_CreateBaseLayout",1,SWIGTYPE_p_uiNode_t);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  arg3 = (char *)lua_tostring(L, 3);
  result = (uiBaseLayoutNode_t *)UI_CreateBaseLayout(arg1,(char const *)arg2,(char const *)arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_uiBaseLayoutNode_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UI_CreateBaseInventory(lua_State* L) {
  int SWIG_arg = 0;
  uiNode_t *arg1 = (uiNode_t *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  uiBaseInventoryNode_t *result = 0 ;
  
  SWIG_check_num_args("UI_CreateBaseInventory",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("UI_CreateBaseInventory",1,"uiNode_t *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("UI_CreateBaseInventory",2,"char const *");
  if(!SWIG_lua_isnilstring(L,3)) SWIG_fail_arg("UI_CreateBaseInventory",3,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_uiNode_t,0))){
    SWIG_fail_ptr("UI_CreateBaseInventory",1,SWIGTYPE_p_uiNode_t);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  arg3 = (char *)lua_tostring(L, 3);
  result = (uiBaseInventoryNode_t *)UI_CreateBaseInventory(arg1,(char const *)arg2,(char const *)arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_uiBaseInventoryNode_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UI_CreateButton(lua_State* L) {
  int SWIG_arg = 0;
  uiNode_t *arg1 = (uiNode_t *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  uiButtonNode_t *result = 0 ;
  
  SWIG_check_num_args("UI_CreateButton",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("UI_CreateButton",1,"uiNode_t *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("UI_CreateButton",2,"char const *");
  if(!SWIG_lua_isnilstring(L,3)) SWIG_fail_arg("UI_CreateButton",3,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_uiNode_t,0))){
    SWIG_fail_ptr("UI_CreateButton",1,SWIGTYPE_p_uiNode_t);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  arg3 = (char *)lua_tostring(L, 3);
  result = (uiButtonNode_t *)UI_CreateButton(arg1,(char const *)arg2,(char const *)arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_uiButtonNode_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UI_CreateCheckBox(lua_State* L) {
  int SWIG_arg = 0;
  uiNode_t *arg1 = (uiNode_t *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  uiCheckBoxNode_t *result = 0 ;
  
  SWIG_check_num_args("UI_CreateCheckBox",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("UI_CreateCheckBox",1,"uiNode_t *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("UI_CreateCheckBox",2,"char const *");
  if(!SWIG_lua_isnilstring(L,3)) SWIG_fail_arg("UI_CreateCheckBox",3,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_uiNode_t,0))){
    SWIG_fail_ptr("UI_CreateCheckBox",1,SWIGTYPE_p_uiNode_t);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  arg3 = (char *)lua_tostring(L, 3);
  result = (uiCheckBoxNode_t *)UI_CreateCheckBox(arg1,(char const *)arg2,(char const *)arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_uiCheckBoxNode_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UI_CreateConFunc(lua_State* L) {
  int SWIG_arg = 0;
  uiNode_t *arg1 = (uiNode_t *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  uiConFuncNode_t *result = 0 ;
  
  SWIG_check_num_args("UI_CreateConFunc",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("UI_CreateConFunc",1,"uiNode_t *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("UI_CreateConFunc",2,"char const *");
  if(!SWIG_lua_isnilstring(L,3)) SWIG_fail_arg("UI_CreateConFunc",3,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_uiNode_t,0))){
    SWIG_fail_ptr("UI_CreateConFunc",1,SWIGTYPE_p_uiNode_t);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  arg3 = (char *)lua_tostring(L, 3);
  result = (uiConFuncNode_t *)UI_CreateConFunc(arg1,(char const *)arg2,(char const *)arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_uiConFuncNode_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UI_CreateContainer(lua_State* L) {
  int SWIG_arg = 0;
  uiNode_t *arg1 = (uiNode_t *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  uiContainerNode_t *result = 0 ;
  
  SWIG_check_num_args("UI_CreateContainer",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("UI_CreateContainer",1,"uiNode_t *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("UI_CreateContainer",2,"char const *");
  if(!SWIG_lua_isnilstring(L,3)) SWIG_fail_arg("UI_CreateContainer",3,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_uiNode_t,0))){
    SWIG_fail_ptr("UI_CreateContainer",1,SWIGTYPE_p_uiNode_t);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  arg3 = (char *)lua_tostring(L, 3);
  result = (uiContainerNode_t *)UI_CreateContainer(arg1,(char const *)arg2,(char const *)arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_uiContainerNode_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UI_CreateData(lua_State* L) {
  int SWIG_arg = 0;
  uiNode_t *arg1 = (uiNode_t *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  uiDataNode_t *result = 0 ;
  
  SWIG_check_num_args("UI_CreateData",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("UI_CreateData",1,"uiNode_t *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("UI_CreateData",2,"char const *");
  if(!SWIG_lua_isnilstring(L,3)) SWIG_fail_arg("UI_CreateData",3,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_uiNode_t,0))){
    SWIG_fail_ptr("UI_CreateData",1,SWIGTYPE_p_uiNode_t);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  arg3 = (char *)lua_tostring(L, 3);
  result = (uiDataNode_t *)UI_CreateData(arg1,(char const *)arg2,(char const *)arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_uiDataNode_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UI_CreateEkg(lua_State* L) {
  int SWIG_arg = 0;
  uiNode_t *arg1 = (uiNode_t *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  uiEkgNode_t *result = 0 ;
  
  SWIG_check_num_args("UI_CreateEkg",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("UI_CreateEkg",1,"uiNode_t *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("UI_CreateEkg",2,"char const *");
  if(!SWIG_lua_isnilstring(L,3)) SWIG_fail_arg("UI_CreateEkg",3,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_uiNode_t,0))){
    SWIG_fail_ptr("UI_CreateEkg",1,SWIGTYPE_p_uiNode_t);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  arg3 = (char *)lua_tostring(L, 3);
  result = (uiEkgNode_t *)UI_CreateEkg(arg1,(char const *)arg2,(char const *)arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_uiEkgNode_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UI_CreateGeoscape(lua_State* L) {
  int SWIG_arg = 0;
  uiNode_t *arg1 = (uiNode_t *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  uiGeoscapeNode_t *result = 0 ;
  
  SWIG_check_num_args("UI_CreateGeoscape",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("UI_CreateGeoscape",1,"uiNode_t *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("UI_CreateGeoscape",2,"char const *");
  if(!SWIG_lua_isnilstring(L,3)) SWIG_fail_arg("UI_CreateGeoscape",3,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_uiNode_t,0))){
    SWIG_fail_ptr("UI_CreateGeoscape",1,SWIGTYPE_p_uiNode_t);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  arg3 = (char *)lua_tostring(L, 3);
  result = (uiGeoscapeNode_t *)UI_CreateGeoscape(arg1,(char const *)arg2,(char const *)arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_uiGeoscapeNode_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UI_CreateImage(lua_State* L) {
  int SWIG_arg = 0;
  uiNode_t *arg1 = (uiNode_t *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  uiImageNode_t *result = 0 ;
  
  SWIG_check_num_args("UI_CreateImage",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("UI_CreateImage",1,"uiNode_t *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("UI_CreateImage",2,"char const *");
  if(!SWIG_lua_isnilstring(L,3)) SWIG_fail_arg("UI_CreateImage",3,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_uiNode_t,0))){
    SWIG_fail_ptr("UI_CreateImage",1,SWIGTYPE_p_uiNode_t);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  arg3 = (char *)lua_tostring(L, 3);
  result = (uiImageNode_t *)UI_CreateImage(arg1,(char const *)arg2,(char const *)arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_uiImageNode_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UI_CreateItem(lua_State* L) {
  int SWIG_arg = 0;
  uiNode_t *arg1 = (uiNode_t *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  uiItemNode_t *result = 0 ;
  
  SWIG_check_num_args("UI_CreateItem",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("UI_CreateItem",1,"uiNode_t *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("UI_CreateItem",2,"char const *");
  if(!SWIG_lua_isnilstring(L,3)) SWIG_fail_arg("UI_CreateItem",3,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_uiNode_t,0))){
    SWIG_fail_ptr("UI_CreateItem",1,SWIGTYPE_p_uiNode_t);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  arg3 = (char *)lua_tostring(L, 3);
  result = (uiItemNode_t *)UI_CreateItem(arg1,(char const *)arg2,(char const *)arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_uiItemNode_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UI_CreateLineChart(lua_State* L) {
  int SWIG_arg = 0;
  uiNode_t *arg1 = (uiNode_t *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  uiLineChartNode_t *result = 0 ;
  
  SWIG_check_num_args("UI_CreateLineChart",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("UI_CreateLineChart",1,"uiNode_t *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("UI_CreateLineChart",2,"char const *");
  if(!SWIG_lua_isnilstring(L,3)) SWIG_fail_arg("UI_CreateLineChart",3,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_uiNode_t,0))){
    SWIG_fail_ptr("UI_CreateLineChart",1,SWIGTYPE_p_uiNode_t);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  arg3 = (char *)lua_tostring(L, 3);
  result = (uiLineChartNode_t *)UI_CreateLineChart(arg1,(char const *)arg2,(char const *)arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_uiLineChartNode_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UI_CreateMessageList(lua_State* L) {
  int SWIG_arg = 0;
  uiNode_t *arg1 = (uiNode_t *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  uiMessageListNode_t *result = 0 ;
  
  SWIG_check_num_args("UI_CreateMessageList",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("UI_CreateMessageList",1,"uiNode_t *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("UI_CreateMessageList",2,"char const *");
  if(!SWIG_lua_isnilstring(L,3)) SWIG_fail_arg("UI_CreateMessageList",3,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_uiNode_t,0))){
    SWIG_fail_ptr("UI_CreateMessageList",1,SWIGTYPE_p_uiNode_t);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  arg3 = (char *)lua_tostring(L, 3);
  result = (uiMessageListNode_t *)UI_CreateMessageList(arg1,(char const *)arg2,(char const *)arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_uiMessageListNode_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UI_CreateModel(lua_State* L) {
  int SWIG_arg = 0;
  uiNode_t *arg1 = (uiNode_t *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  uiModelNode_t *result = 0 ;
  
  SWIG_check_num_args("UI_CreateModel",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("UI_CreateModel",1,"uiNode_t *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("UI_CreateModel",2,"char const *");
  if(!SWIG_lua_isnilstring(L,3)) SWIG_fail_arg("UI_CreateModel",3,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_uiNode_t,0))){
    SWIG_fail_ptr("UI_CreateModel",1,SWIGTYPE_p_uiNode_t);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  arg3 = (char *)lua_tostring(L, 3);
  result = (uiModelNode_t *)UI_CreateModel(arg1,(char const *)arg2,(char const *)arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_uiModelNode_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UI_CreateOption(lua_State* L) {
  int SWIG_arg = 0;
  uiNode_t *arg1 = (uiNode_t *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  uiOptionNode_t *result = 0 ;
  
  SWIG_check_num_args("UI_CreateOption",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("UI_CreateOption",1,"uiNode_t *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("UI_CreateOption",2,"char const *");
  if(!SWIG_lua_isnilstring(L,3)) SWIG_fail_arg("UI_CreateOption",3,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_uiNode_t,0))){
    SWIG_fail_ptr("UI_CreateOption",1,SWIGTYPE_p_uiNode_t);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  arg3 = (char *)lua_tostring(L, 3);
  result = (uiOptionNode_t *)UI_CreateOption(arg1,(char const *)arg2,(char const *)arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_uiOptionNode_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UI_CreateOptionList(lua_State* L) {
  int SWIG_arg = 0;
  uiNode_t *arg1 = (uiNode_t *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  uiOptionListNode_t *result = 0 ;
  
  SWIG_check_num_args("UI_CreateOptionList",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("UI_CreateOptionList",1,"uiNode_t *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("UI_CreateOptionList",2,"char const *");
  if(!SWIG_lua_isnilstring(L,3)) SWIG_fail_arg("UI_CreateOptionList",3,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_uiNode_t,0))){
    SWIG_fail_ptr("UI_CreateOptionList",1,SWIGTYPE_p_uiNode_t);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  arg3 = (char *)lua_tostring(L, 3);
  result = (uiOptionListNode_t *)UI_CreateOptionList(arg1,(char const *)arg2,(char const *)arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_uiOptionListNode_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UI_CreateOptionTree(lua_State* L) {
  int SWIG_arg = 0;
  uiNode_t *arg1 = (uiNode_t *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  uiOptionTreeNode_t *result = 0 ;
  
  SWIG_check_num_args("UI_CreateOptionTree",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("UI_CreateOptionTree",1,"uiNode_t *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("UI_CreateOptionTree",2,"char const *");
  if(!SWIG_lua_isnilstring(L,3)) SWIG_fail_arg("UI_CreateOptionTree",3,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_uiNode_t,0))){
    SWIG_fail_ptr("UI_CreateOptionTree",1,SWIGTYPE_p_uiNode_t);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  arg3 = (char *)lua_tostring(L, 3);
  result = (uiOptionTreeNode_t *)UI_CreateOptionTree(arg1,(char const *)arg2,(char const *)arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_uiOptionTreeNode_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UI_CreatePanel(lua_State* L) {
  int SWIG_arg = 0;
  uiNode_t *arg1 = (uiNode_t *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  uiPanelNode_t *result = 0 ;
  
  SWIG_check_num_args("UI_CreatePanel",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("UI_CreatePanel",1,"uiNode_t *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("UI_CreatePanel",2,"char const *");
  if(!SWIG_lua_isnilstring(L,3)) SWIG_fail_arg("UI_CreatePanel",3,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_uiNode_t,0))){
    SWIG_fail_ptr("UI_CreatePanel",1,SWIGTYPE_p_uiNode_t);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  arg3 = (char *)lua_tostring(L, 3);
  result = (uiPanelNode_t *)UI_CreatePanel(arg1,(char const *)arg2,(char const *)arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_uiPanelNode_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UI_CreateRadar(lua_State* L) {
  int SWIG_arg = 0;
  uiNode_t *arg1 = (uiNode_t *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  uiRadarNode_t *result = 0 ;
  
  SWIG_check_num_args("UI_CreateRadar",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("UI_CreateRadar",1,"uiNode_t *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("UI_CreateRadar",2,"char const *");
  if(!SWIG_lua_isnilstring(L,3)) SWIG_fail_arg("UI_CreateRadar",3,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_uiNode_t,0))){
    SWIG_fail_ptr("UI_CreateRadar",1,SWIGTYPE_p_uiNode_t);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  arg3 = (char *)lua_tostring(L, 3);
  result = (uiRadarNode_t *)UI_CreateRadar(arg1,(char const *)arg2,(char const *)arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_uiRadarNode_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UI_CreateRadioButton(lua_State* L) {
  int SWIG_arg = 0;
  uiNode_t *arg1 = (uiNode_t *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  uiRadioButtonNode_t *result = 0 ;
  
  SWIG_check_num_args("UI_CreateRadioButton",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("UI_CreateRadioButton",1,"uiNode_t *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("UI_CreateRadioButton",2,"char const *");
  if(!SWIG_lua_isnilstring(L,3)) SWIG_fail_arg("UI_CreateRadioButton",3,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_uiNode_t,0))){
    SWIG_fail_ptr("UI_CreateRadioButton",1,SWIGTYPE_p_uiNode_t);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  arg3 = (char *)lua_tostring(L, 3);
  result = (uiRadioButtonNode_t *)UI_CreateRadioButton(arg1,(char const *)arg2,(char const *)arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_uiRadioButtonNode_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UI_CreateRows(lua_State* L) {
  int SWIG_arg = 0;
  uiNode_t *arg1 = (uiNode_t *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  uiRowsNode_t *result = 0 ;
  
  SWIG_check_num_args("UI_CreateRows",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("UI_CreateRows",1,"uiNode_t *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("UI_CreateRows",2,"char const *");
  if(!SWIG_lua_isnilstring(L,3)) SWIG_fail_arg("UI_CreateRows",3,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_uiNode_t,0))){
    SWIG_fail_ptr("UI_CreateRows",1,SWIGTYPE_p_uiNode_t);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  arg3 = (char *)lua_tostring(L, 3);
  result = (uiRowsNode_t *)UI_CreateRows(arg1,(char const *)arg2,(char const *)arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_uiRowsNode_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UI_CreateSelectBox(lua_State* L) {
  int SWIG_arg = 0;
  uiNode_t *arg1 = (uiNode_t *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  uiSelectBoxNode_t *result = 0 ;
  
  SWIG_check_num_args("UI_CreateSelectBox",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("UI_CreateSelectBox",1,"uiNode_t *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("UI_CreateSelectBox",2,"char const *");
  if(!SWIG_lua_isnilstring(L,3)) SWIG_fail_arg("UI_CreateSelectBox",3,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_uiNode_t,0))){
    SWIG_fail_ptr("UI_CreateSelectBox",1,SWIGTYPE_p_uiNode_t);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  arg3 = (char *)lua_tostring(L, 3);
  result = (uiSelectBoxNode_t *)UI_CreateSelectBox(arg1,(char const *)arg2,(char const *)arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_uiSelectBoxNode_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UI_CreateSequence(lua_State* L) {
  int SWIG_arg = 0;
  uiNode_t *arg1 = (uiNode_t *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  uiSequenceNode_t *result = 0 ;
  
  SWIG_check_num_args("UI_CreateSequence",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("UI_CreateSequence",1,"uiNode_t *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("UI_CreateSequence",2,"char const *");
  if(!SWIG_lua_isnilstring(L,3)) SWIG_fail_arg("UI_CreateSequence",3,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_uiNode_t,0))){
    SWIG_fail_ptr("UI_CreateSequence",1,SWIGTYPE_p_uiNode_t);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  arg3 = (char *)lua_tostring(L, 3);
  result = (uiSequenceNode_t *)UI_CreateSequence(arg1,(char const *)arg2,(char const *)arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_uiSequenceNode_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UI_CreateSpinner(lua_State* L) {
  int SWIG_arg = 0;
  uiNode_t *arg1 = (uiNode_t *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  uiSpinnerNode_t *result = 0 ;
  
  SWIG_check_num_args("UI_CreateSpinner",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("UI_CreateSpinner",1,"uiNode_t *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("UI_CreateSpinner",2,"char const *");
  if(!SWIG_lua_isnilstring(L,3)) SWIG_fail_arg("UI_CreateSpinner",3,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_uiNode_t,0))){
    SWIG_fail_ptr("UI_CreateSpinner",1,SWIGTYPE_p_uiNode_t);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  arg3 = (char *)lua_tostring(L, 3);
  result = (uiSpinnerNode_t *)UI_CreateSpinner(arg1,(char const *)arg2,(char const *)arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_uiSpinnerNode_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UI_CreateString(lua_State* L) {
  int SWIG_arg = 0;
  uiNode_t *arg1 = (uiNode_t *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  uiStringNode_t *result = 0 ;
  
  SWIG_check_num_args("UI_CreateString",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("UI_CreateString",1,"uiNode_t *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("UI_CreateString",2,"char const *");
  if(!SWIG_lua_isnilstring(L,3)) SWIG_fail_arg("UI_CreateString",3,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_uiNode_t,0))){
    SWIG_fail_ptr("UI_CreateString",1,SWIGTYPE_p_uiNode_t);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  arg3 = (char *)lua_tostring(L, 3);
  result = (uiStringNode_t *)UI_CreateString(arg1,(char const *)arg2,(char const *)arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_uiStringNode_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UI_CreateTab(lua_State* L) {
  int SWIG_arg = 0;
  uiNode_t *arg1 = (uiNode_t *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  uiTabNode_t *result = 0 ;
  
  SWIG_check_num_args("UI_CreateTab",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("UI_CreateTab",1,"uiNode_t *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("UI_CreateTab",2,"char const *");
  if(!SWIG_lua_isnilstring(L,3)) SWIG_fail_arg("UI_CreateTab",3,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_uiNode_t,0))){
    SWIG_fail_ptr("UI_CreateTab",1,SWIGTYPE_p_uiNode_t);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  arg3 = (char *)lua_tostring(L, 3);
  result = (uiTabNode_t *)UI_CreateTab(arg1,(char const *)arg2,(char const *)arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_uiTabNode_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UI_CreateTBar(lua_State* L) {
  int SWIG_arg = 0;
  uiNode_t *arg1 = (uiNode_t *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  uiTBarNode_t *result = 0 ;
  
  SWIG_check_num_args("UI_CreateTBar",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("UI_CreateTBar",1,"uiNode_t *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("UI_CreateTBar",2,"char const *");
  if(!SWIG_lua_isnilstring(L,3)) SWIG_fail_arg("UI_CreateTBar",3,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_uiNode_t,0))){
    SWIG_fail_ptr("UI_CreateTBar",1,SWIGTYPE_p_uiNode_t);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  arg3 = (char *)lua_tostring(L, 3);
  result = (uiTBarNode_t *)UI_CreateTBar(arg1,(char const *)arg2,(char const *)arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_uiTBarNode_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UI_CreateText(lua_State* L) {
  int SWIG_arg = 0;
  uiNode_t *arg1 = (uiNode_t *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  uiTextNode_t *result = 0 ;
  
  SWIG_check_num_args("UI_CreateText",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("UI_CreateText",1,"uiNode_t *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("UI_CreateText",2,"char const *");
  if(!SWIG_lua_isnilstring(L,3)) SWIG_fail_arg("UI_CreateText",3,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_uiNode_t,0))){
    SWIG_fail_ptr("UI_CreateText",1,SWIGTYPE_p_uiNode_t);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  arg3 = (char *)lua_tostring(L, 3);
  result = (uiTextNode_t *)UI_CreateText(arg1,(char const *)arg2,(char const *)arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_uiTextNode_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UI_CreateText2(lua_State* L) {
  int SWIG_arg = 0;
  uiNode_t *arg1 = (uiNode_t *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  uiText2Node_t *result = 0 ;
  
  SWIG_check_num_args("UI_CreateText2",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("UI_CreateText2",1,"uiNode_t *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("UI_CreateText2",2,"char const *");
  if(!SWIG_lua_isnilstring(L,3)) SWIG_fail_arg("UI_CreateText2",3,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_uiNode_t,0))){
    SWIG_fail_ptr("UI_CreateText2",1,SWIGTYPE_p_uiNode_t);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  arg3 = (char *)lua_tostring(L, 3);
  result = (uiText2Node_t *)UI_CreateText2(arg1,(char const *)arg2,(char const *)arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_uiText2Node_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UI_CreateTextEntry(lua_State* L) {
  int SWIG_arg = 0;
  uiNode_t *arg1 = (uiNode_t *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  uiTextEntryNode_t *result = 0 ;
  
  SWIG_check_num_args("UI_CreateTextEntry",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("UI_CreateTextEntry",1,"uiNode_t *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("UI_CreateTextEntry",2,"char const *");
  if(!SWIG_lua_isnilstring(L,3)) SWIG_fail_arg("UI_CreateTextEntry",3,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_uiNode_t,0))){
    SWIG_fail_ptr("UI_CreateTextEntry",1,SWIGTYPE_p_uiNode_t);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  arg3 = (char *)lua_tostring(L, 3);
  result = (uiTextEntryNode_t *)UI_CreateTextEntry(arg1,(char const *)arg2,(char const *)arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_uiTextEntryNode_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UI_CreateTextList(lua_State* L) {
  int SWIG_arg = 0;
  uiNode_t *arg1 = (uiNode_t *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  uiTextListNode_t *result = 0 ;
  
  SWIG_check_num_args("UI_CreateTextList",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("UI_CreateTextList",1,"uiNode_t *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("UI_CreateTextList",2,"char const *");
  if(!SWIG_lua_isnilstring(L,3)) SWIG_fail_arg("UI_CreateTextList",3,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_uiNode_t,0))){
    SWIG_fail_ptr("UI_CreateTextList",1,SWIGTYPE_p_uiNode_t);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  arg3 = (char *)lua_tostring(L, 3);
  result = (uiTextListNode_t *)UI_CreateTextList(arg1,(char const *)arg2,(char const *)arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_uiTextListNode_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UI_CreateTexture(lua_State* L) {
  int SWIG_arg = 0;
  uiNode_t *arg1 = (uiNode_t *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  uiTextureNode_t *result = 0 ;
  
  SWIG_check_num_args("UI_CreateTexture",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("UI_CreateTexture",1,"uiNode_t *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("UI_CreateTexture",2,"char const *");
  if(!SWIG_lua_isnilstring(L,3)) SWIG_fail_arg("UI_CreateTexture",3,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_uiNode_t,0))){
    SWIG_fail_ptr("UI_CreateTexture",1,SWIGTYPE_p_uiNode_t);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  arg3 = (char *)lua_tostring(L, 3);
  result = (uiTextureNode_t *)UI_CreateTexture(arg1,(char const *)arg2,(char const *)arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_uiTextureNode_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UI_CreateTimer(lua_State* L) {
  int SWIG_arg = 0;
  uiNode_t *arg1 = (uiNode_t *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  uiTimerNode_t *result = 0 ;
  
  SWIG_check_num_args("UI_CreateTimer",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("UI_CreateTimer",1,"uiNode_t *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("UI_CreateTimer",2,"char const *");
  if(!SWIG_lua_isnilstring(L,3)) SWIG_fail_arg("UI_CreateTimer",3,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_uiNode_t,0))){
    SWIG_fail_ptr("UI_CreateTimer",1,SWIGTYPE_p_uiNode_t);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  arg3 = (char *)lua_tostring(L, 3);
  result = (uiTimerNode_t *)UI_CreateTimer(arg1,(char const *)arg2,(char const *)arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_uiTimerNode_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UI_CreateVideo(lua_State* L) {
  int SWIG_arg = 0;
  uiNode_t *arg1 = (uiNode_t *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  uiVideoNode_t *result = 0 ;
  
  SWIG_check_num_args("UI_CreateVideo",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("UI_CreateVideo",1,"uiNode_t *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("UI_CreateVideo",2,"char const *");
  if(!SWIG_lua_isnilstring(L,3)) SWIG_fail_arg("UI_CreateVideo",3,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_uiNode_t,0))){
    SWIG_fail_ptr("UI_CreateVideo",1,SWIGTYPE_p_uiNode_t);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  arg3 = (char *)lua_tostring(L, 3);
  result = (uiVideoNode_t *)UI_CreateVideo(arg1,(char const *)arg2,(char const *)arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_uiVideoNode_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UI_CreateVScrollbar(lua_State* L) {
  int SWIG_arg = 0;
  uiNode_t *arg1 = (uiNode_t *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  uiVScrollBarNode_t *result = 0 ;
  
  SWIG_check_num_args("UI_CreateVScrollbar",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("UI_CreateVScrollbar",1,"uiNode_t *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("UI_CreateVScrollbar",2,"char const *");
  if(!SWIG_lua_isnilstring(L,3)) SWIG_fail_arg("UI_CreateVScrollbar",3,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_uiNode_t,0))){
    SWIG_fail_ptr("UI_CreateVScrollbar",1,SWIGTYPE_p_uiNode_t);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  arg3 = (char *)lua_tostring(L, 3);
  result = (uiVScrollBarNode_t *)UI_CreateVScrollbar(arg1,(char const *)arg2,(char const *)arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_uiVScrollBarNode_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UI_CreateWidget(lua_State* L) {
  int SWIG_arg = 0;
  uiNode_t *arg1 = (uiNode_t *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  uiWidgetNode_t *result = 0 ;
  
  SWIG_check_num_args("UI_CreateWidget",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("UI_CreateWidget",1,"uiNode_t *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("UI_CreateWidget",2,"char const *");
  if(!SWIG_lua_isnilstring(L,3)) SWIG_fail_arg("UI_CreateWidget",3,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_uiNode_t,0))){
    SWIG_fail_ptr("UI_CreateWidget",1,SWIGTYPE_p_uiNode_t);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  arg3 = (char *)lua_tostring(L, 3);
  result = (uiWidgetNode_t *)UI_CreateWidget(arg1,(char const *)arg2,(char const *)arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_uiWidgetNode_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UI_CreateWindow(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  uiWindowNode_t *result = 0 ;
  
  SWIG_check_num_args("UI_CreateWindow",2,2)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("UI_CreateWindow",1,"char const *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("UI_CreateWindow",2,"char const *");
  arg1 = (char *)lua_tostring(L, 1);
  arg2 = (char *)lua_tostring(L, 2);
  result = (uiWindowNode_t *)UI_CreateWindow((char const *)arg1,(char const *)arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_uiWindowNode_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UI_CreateZone(lua_State* L) {
  int SWIG_arg = 0;
  uiNode_t *arg1 = (uiNode_t *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  uiZoneNode_t *result = 0 ;
  
  SWIG_check_num_args("UI_CreateZone",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("UI_CreateZone",1,"uiNode_t *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("UI_CreateZone",2,"char const *");
  if(!SWIG_lua_isnilstring(L,3)) SWIG_fail_arg("UI_CreateZone",3,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_uiNode_t,0))){
    SWIG_fail_ptr("UI_CreateZone",1,SWIGTYPE_p_uiNode_t);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  arg3 = (char *)lua_tostring(L, 3);
  result = (uiZoneNode_t *)UI_CreateZone(arg1,(char const *)arg2,(char const *)arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_uiZoneNode_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_create_bar(lua_State* L) {
  int SWIG_arg = 0;
  uiNode_t *arg1 = (uiNode_t *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  uiBarNode_t *result = 0 ;
  
  SWIG_check_num_args("UI_CreateBar",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("UI_CreateBar",1,"uiNode_t *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("UI_CreateBar",2,"char const *");
  if(!SWIG_lua_isnilstring(L,3)) SWIG_fail_arg("UI_CreateBar",3,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_uiNode_t,0))){
    SWIG_fail_ptr("create_bar",1,SWIGTYPE_p_uiNode_t);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  arg3 = (char *)lua_tostring(L, 3);
  result = (uiBarNode_t *)UI_CreateBar(arg1,(char const *)arg2,(char const *)arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_uiBarNode_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_create_button(lua_State* L) {
  int SWIG_arg = 0;
  uiNode_t *arg1 = (uiNode_t *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  uiButtonNode_t *result = 0 ;
  
  SWIG_check_num_args("UI_CreateButton",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("UI_CreateButton",1,"uiNode_t *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("UI_CreateButton",2,"char const *");
  if(!SWIG_lua_isnilstring(L,3)) SWIG_fail_arg("UI_CreateButton",3,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_uiNode_t,0))){
    SWIG_fail_ptr("create_button",1,SWIGTYPE_p_uiNode_t);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  arg3 = (char *)lua_tostring(L, 3);
  result = (uiButtonNode_t *)UI_CreateButton(arg1,(char const *)arg2,(char const *)arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_uiButtonNode_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_create_basemap(lua_State* L) {
  int SWIG_arg = 0;
  uiNode_t *arg1 = (uiNode_t *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  uiBaseMapNode_t *result = 0 ;
  
  SWIG_check_num_args("UI_CreateBaseMap",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("UI_CreateBaseMap",1,"uiNode_t *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("UI_CreateBaseMap",2,"char const *");
  if(!SWIG_lua_isnilstring(L,3)) SWIG_fail_arg("UI_CreateBaseMap",3,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_uiNode_t,0))){
    SWIG_fail_ptr("create_basemap",1,SWIGTYPE_p_uiNode_t);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  arg3 = (char *)lua_tostring(L, 3);
  result = (uiBaseMapNode_t *)UI_CreateBaseMap(arg1,(char const *)arg2,(char const *)arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_uiBaseMapNode_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_create_baselayout(lua_State* L) {
  int SWIG_arg = 0;
  uiNode_t *arg1 = (uiNode_t *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  uiBaseLayoutNode_t *result = 0 ;
  
  SWIG_check_num_args("UI_CreateBaseLayout",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("UI_CreateBaseLayout",1,"uiNode_t *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("UI_CreateBaseLayout",2,"char const *");
  if(!SWIG_lua_isnilstring(L,3)) SWIG_fail_arg("UI_CreateBaseLayout",3,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_uiNode_t,0))){
    SWIG_fail_ptr("create_baselayout",1,SWIGTYPE_p_uiNode_t);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  arg3 = (char *)lua_tostring(L, 3);
  result = (uiBaseLayoutNode_t *)UI_CreateBaseLayout(arg1,(char const *)arg2,(char const *)arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_uiBaseLayoutNode_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_create_baseinventory(lua_State* L) {
  int SWIG_arg = 0;
  uiNode_t *arg1 = (uiNode_t *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  uiBaseInventoryNode_t *result = 0 ;
  
  SWIG_check_num_args("UI_CreateBaseInventory",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("UI_CreateBaseInventory",1,"uiNode_t *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("UI_CreateBaseInventory",2,"char const *");
  if(!SWIG_lua_isnilstring(L,3)) SWIG_fail_arg("UI_CreateBaseInventory",3,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_uiNode_t,0))){
    SWIG_fail_ptr("create_baseinventory",1,SWIGTYPE_p_uiNode_t);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  arg3 = (char *)lua_tostring(L, 3);
  result = (uiBaseInventoryNode_t *)UI_CreateBaseInventory(arg1,(char const *)arg2,(char const *)arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_uiBaseInventoryNode_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_create_checkbox(lua_State* L) {
  int SWIG_arg = 0;
  uiNode_t *arg1 = (uiNode_t *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  uiCheckBoxNode_t *result = 0 ;
  
  SWIG_check_num_args("UI_CreateCheckBox",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("UI_CreateCheckBox",1,"uiNode_t *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("UI_CreateCheckBox",2,"char const *");
  if(!SWIG_lua_isnilstring(L,3)) SWIG_fail_arg("UI_CreateCheckBox",3,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_uiNode_t,0))){
    SWIG_fail_ptr("create_checkbox",1,SWIGTYPE_p_uiNode_t);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  arg3 = (char *)lua_tostring(L, 3);
  result = (uiCheckBoxNode_t *)UI_CreateCheckBox(arg1,(char const *)arg2,(char const *)arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_uiCheckBoxNode_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_create_confunc(lua_State* L) {
  int SWIG_arg = 0;
  uiNode_t *arg1 = (uiNode_t *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  uiConFuncNode_t *result = 0 ;
  
  SWIG_check_num_args("UI_CreateConFunc",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("UI_CreateConFunc",1,"uiNode_t *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("UI_CreateConFunc",2,"char const *");
  if(!SWIG_lua_isnilstring(L,3)) SWIG_fail_arg("UI_CreateConFunc",3,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_uiNode_t,0))){
    SWIG_fail_ptr("create_confunc",1,SWIGTYPE_p_uiNode_t);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  arg3 = (char *)lua_tostring(L, 3);
  result = (uiConFuncNode_t *)UI_CreateConFunc(arg1,(char const *)arg2,(char const *)arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_uiConFuncNode_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_create_container(lua_State* L) {
  int SWIG_arg = 0;
  uiNode_t *arg1 = (uiNode_t *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  uiContainerNode_t *result = 0 ;
  
  SWIG_check_num_args("UI_CreateContainer",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("UI_CreateContainer",1,"uiNode_t *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("UI_CreateContainer",2,"char const *");
  if(!SWIG_lua_isnilstring(L,3)) SWIG_fail_arg("UI_CreateContainer",3,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_uiNode_t,0))){
    SWIG_fail_ptr("create_container",1,SWIGTYPE_p_uiNode_t);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  arg3 = (char *)lua_tostring(L, 3);
  result = (uiContainerNode_t *)UI_CreateContainer(arg1,(char const *)arg2,(char const *)arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_uiContainerNode_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_create_data(lua_State* L) {
  int SWIG_arg = 0;
  uiNode_t *arg1 = (uiNode_t *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  uiDataNode_t *result = 0 ;
  
  SWIG_check_num_args("UI_CreateData",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("UI_CreateData",1,"uiNode_t *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("UI_CreateData",2,"char const *");
  if(!SWIG_lua_isnilstring(L,3)) SWIG_fail_arg("UI_CreateData",3,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_uiNode_t,0))){
    SWIG_fail_ptr("create_data",1,SWIGTYPE_p_uiNode_t);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  arg3 = (char *)lua_tostring(L, 3);
  result = (uiDataNode_t *)UI_CreateData(arg1,(char const *)arg2,(char const *)arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_uiDataNode_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_create_ekg(lua_State* L) {
  int SWIG_arg = 0;
  uiNode_t *arg1 = (uiNode_t *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  uiEkgNode_t *result = 0 ;
  
  SWIG_check_num_args("UI_CreateEkg",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("UI_CreateEkg",1,"uiNode_t *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("UI_CreateEkg",2,"char const *");
  if(!SWIG_lua_isnilstring(L,3)) SWIG_fail_arg("UI_CreateEkg",3,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_uiNode_t,0))){
    SWIG_fail_ptr("create_ekg",1,SWIGTYPE_p_uiNode_t);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  arg3 = (char *)lua_tostring(L, 3);
  result = (uiEkgNode_t *)UI_CreateEkg(arg1,(char const *)arg2,(char const *)arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_uiEkgNode_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_create_geoscape(lua_State* L) {
  int SWIG_arg = 0;
  uiNode_t *arg1 = (uiNode_t *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  uiGeoscapeNode_t *result = 0 ;
  
  SWIG_check_num_args("UI_CreateGeoscape",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("UI_CreateGeoscape",1,"uiNode_t *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("UI_CreateGeoscape",2,"char const *");
  if(!SWIG_lua_isnilstring(L,3)) SWIG_fail_arg("UI_CreateGeoscape",3,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_uiNode_t,0))){
    SWIG_fail_ptr("create_geoscape",1,SWIGTYPE_p_uiNode_t);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  arg3 = (char *)lua_tostring(L, 3);
  result = (uiGeoscapeNode_t *)UI_CreateGeoscape(arg1,(char const *)arg2,(char const *)arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_uiGeoscapeNode_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_create_image(lua_State* L) {
  int SWIG_arg = 0;
  uiNode_t *arg1 = (uiNode_t *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  uiImageNode_t *result = 0 ;
  
  SWIG_check_num_args("UI_CreateImage",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("UI_CreateImage",1,"uiNode_t *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("UI_CreateImage",2,"char const *");
  if(!SWIG_lua_isnilstring(L,3)) SWIG_fail_arg("UI_CreateImage",3,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_uiNode_t,0))){
    SWIG_fail_ptr("create_image",1,SWIGTYPE_p_uiNode_t);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  arg3 = (char *)lua_tostring(L, 3);
  result = (uiImageNode_t *)UI_CreateImage(arg1,(char const *)arg2,(char const *)arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_uiImageNode_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_create_item(lua_State* L) {
  int SWIG_arg = 0;
  uiNode_t *arg1 = (uiNode_t *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  uiItemNode_t *result = 0 ;
  
  SWIG_check_num_args("UI_CreateItem",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("UI_CreateItem",1,"uiNode_t *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("UI_CreateItem",2,"char const *");
  if(!SWIG_lua_isnilstring(L,3)) SWIG_fail_arg("UI_CreateItem",3,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_uiNode_t,0))){
    SWIG_fail_ptr("create_item",1,SWIGTYPE_p_uiNode_t);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  arg3 = (char *)lua_tostring(L, 3);
  result = (uiItemNode_t *)UI_CreateItem(arg1,(char const *)arg2,(char const *)arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_uiItemNode_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_create_linechart(lua_State* L) {
  int SWIG_arg = 0;
  uiNode_t *arg1 = (uiNode_t *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  uiLineChartNode_t *result = 0 ;
  
  SWIG_check_num_args("UI_CreateLineChart",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("UI_CreateLineChart",1,"uiNode_t *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("UI_CreateLineChart",2,"char const *");
  if(!SWIG_lua_isnilstring(L,3)) SWIG_fail_arg("UI_CreateLineChart",3,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_uiNode_t,0))){
    SWIG_fail_ptr("create_linechart",1,SWIGTYPE_p_uiNode_t);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  arg3 = (char *)lua_tostring(L, 3);
  result = (uiLineChartNode_t *)UI_CreateLineChart(arg1,(char const *)arg2,(char const *)arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_uiLineChartNode_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_create_messagelist(lua_State* L) {
  int SWIG_arg = 0;
  uiNode_t *arg1 = (uiNode_t *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  uiMessageListNode_t *result = 0 ;
  
  SWIG_check_num_args("UI_CreateMessageList",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("UI_CreateMessageList",1,"uiNode_t *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("UI_CreateMessageList",2,"char const *");
  if(!SWIG_lua_isnilstring(L,3)) SWIG_fail_arg("UI_CreateMessageList",3,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_uiNode_t,0))){
    SWIG_fail_ptr("create_messagelist",1,SWIGTYPE_p_uiNode_t);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  arg3 = (char *)lua_tostring(L, 3);
  result = (uiMessageListNode_t *)UI_CreateMessageList(arg1,(char const *)arg2,(char const *)arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_uiMessageListNode_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_create_model(lua_State* L) {
  int SWIG_arg = 0;
  uiNode_t *arg1 = (uiNode_t *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  uiModelNode_t *result = 0 ;
  
  SWIG_check_num_args("UI_CreateModel",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("UI_CreateModel",1,"uiNode_t *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("UI_CreateModel",2,"char const *");
  if(!SWIG_lua_isnilstring(L,3)) SWIG_fail_arg("UI_CreateModel",3,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_uiNode_t,0))){
    SWIG_fail_ptr("create_model",1,SWIGTYPE_p_uiNode_t);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  arg3 = (char *)lua_tostring(L, 3);
  result = (uiModelNode_t *)UI_CreateModel(arg1,(char const *)arg2,(char const *)arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_uiModelNode_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_create_option(lua_State* L) {
  int SWIG_arg = 0;
  uiNode_t *arg1 = (uiNode_t *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  uiOptionNode_t *result = 0 ;
  
  SWIG_check_num_args("UI_CreateOption",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("UI_CreateOption",1,"uiNode_t *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("UI_CreateOption",2,"char const *");
  if(!SWIG_lua_isnilstring(L,3)) SWIG_fail_arg("UI_CreateOption",3,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_uiNode_t,0))){
    SWIG_fail_ptr("create_option",1,SWIGTYPE_p_uiNode_t);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  arg3 = (char *)lua_tostring(L, 3);
  result = (uiOptionNode_t *)UI_CreateOption(arg1,(char const *)arg2,(char const *)arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_uiOptionNode_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_create_optionlist(lua_State* L) {
  int SWIG_arg = 0;
  uiNode_t *arg1 = (uiNode_t *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  uiOptionListNode_t *result = 0 ;
  
  SWIG_check_num_args("UI_CreateOptionList",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("UI_CreateOptionList",1,"uiNode_t *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("UI_CreateOptionList",2,"char const *");
  if(!SWIG_lua_isnilstring(L,3)) SWIG_fail_arg("UI_CreateOptionList",3,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_uiNode_t,0))){
    SWIG_fail_ptr("create_optionlist",1,SWIGTYPE_p_uiNode_t);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  arg3 = (char *)lua_tostring(L, 3);
  result = (uiOptionListNode_t *)UI_CreateOptionList(arg1,(char const *)arg2,(char const *)arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_uiOptionListNode_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_create_optiontree(lua_State* L) {
  int SWIG_arg = 0;
  uiNode_t *arg1 = (uiNode_t *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  uiOptionTreeNode_t *result = 0 ;
  
  SWIG_check_num_args("UI_CreateOptionTree",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("UI_CreateOptionTree",1,"uiNode_t *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("UI_CreateOptionTree",2,"char const *");
  if(!SWIG_lua_isnilstring(L,3)) SWIG_fail_arg("UI_CreateOptionTree",3,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_uiNode_t,0))){
    SWIG_fail_ptr("create_optiontree",1,SWIGTYPE_p_uiNode_t);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  arg3 = (char *)lua_tostring(L, 3);
  result = (uiOptionTreeNode_t *)UI_CreateOptionTree(arg1,(char const *)arg2,(char const *)arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_uiOptionTreeNode_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_create_panel(lua_State* L) {
  int SWIG_arg = 0;
  uiNode_t *arg1 = (uiNode_t *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  uiPanelNode_t *result = 0 ;
  
  SWIG_check_num_args("UI_CreatePanel",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("UI_CreatePanel",1,"uiNode_t *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("UI_CreatePanel",2,"char const *");
  if(!SWIG_lua_isnilstring(L,3)) SWIG_fail_arg("UI_CreatePanel",3,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_uiNode_t,0))){
    SWIG_fail_ptr("create_panel",1,SWIGTYPE_p_uiNode_t);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  arg3 = (char *)lua_tostring(L, 3);
  result = (uiPanelNode_t *)UI_CreatePanel(arg1,(char const *)arg2,(char const *)arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_uiPanelNode_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_create_radar(lua_State* L) {
  int SWIG_arg = 0;
  uiNode_t *arg1 = (uiNode_t *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  uiRadarNode_t *result = 0 ;
  
  SWIG_check_num_args("UI_CreateRadar",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("UI_CreateRadar",1,"uiNode_t *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("UI_CreateRadar",2,"char const *");
  if(!SWIG_lua_isnilstring(L,3)) SWIG_fail_arg("UI_CreateRadar",3,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_uiNode_t,0))){
    SWIG_fail_ptr("create_radar",1,SWIGTYPE_p_uiNode_t);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  arg3 = (char *)lua_tostring(L, 3);
  result = (uiRadarNode_t *)UI_CreateRadar(arg1,(char const *)arg2,(char const *)arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_uiRadarNode_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_create_radiobutton(lua_State* L) {
  int SWIG_arg = 0;
  uiNode_t *arg1 = (uiNode_t *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  uiRadioButtonNode_t *result = 0 ;
  
  SWIG_check_num_args("UI_CreateRadioButton",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("UI_CreateRadioButton",1,"uiNode_t *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("UI_CreateRadioButton",2,"char const *");
  if(!SWIG_lua_isnilstring(L,3)) SWIG_fail_arg("UI_CreateRadioButton",3,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_uiNode_t,0))){
    SWIG_fail_ptr("create_radiobutton",1,SWIGTYPE_p_uiNode_t);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  arg3 = (char *)lua_tostring(L, 3);
  result = (uiRadioButtonNode_t *)UI_CreateRadioButton(arg1,(char const *)arg2,(char const *)arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_uiRadioButtonNode_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_create_rows(lua_State* L) {
  int SWIG_arg = 0;
  uiNode_t *arg1 = (uiNode_t *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  uiRowsNode_t *result = 0 ;
  
  SWIG_check_num_args("UI_CreateRows",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("UI_CreateRows",1,"uiNode_t *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("UI_CreateRows",2,"char const *");
  if(!SWIG_lua_isnilstring(L,3)) SWIG_fail_arg("UI_CreateRows",3,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_uiNode_t,0))){
    SWIG_fail_ptr("create_rows",1,SWIGTYPE_p_uiNode_t);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  arg3 = (char *)lua_tostring(L, 3);
  result = (uiRowsNode_t *)UI_CreateRows(arg1,(char const *)arg2,(char const *)arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_uiRowsNode_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_create_selectbox(lua_State* L) {
  int SWIG_arg = 0;
  uiNode_t *arg1 = (uiNode_t *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  uiSelectBoxNode_t *result = 0 ;
  
  SWIG_check_num_args("UI_CreateSelectBox",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("UI_CreateSelectBox",1,"uiNode_t *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("UI_CreateSelectBox",2,"char const *");
  if(!SWIG_lua_isnilstring(L,3)) SWIG_fail_arg("UI_CreateSelectBox",3,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_uiNode_t,0))){
    SWIG_fail_ptr("create_selectbox",1,SWIGTYPE_p_uiNode_t);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  arg3 = (char *)lua_tostring(L, 3);
  result = (uiSelectBoxNode_t *)UI_CreateSelectBox(arg1,(char const *)arg2,(char const *)arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_uiSelectBoxNode_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_create_sequence(lua_State* L) {
  int SWIG_arg = 0;
  uiNode_t *arg1 = (uiNode_t *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  uiSequenceNode_t *result = 0 ;
  
  SWIG_check_num_args("UI_CreateSequence",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("UI_CreateSequence",1,"uiNode_t *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("UI_CreateSequence",2,"char const *");
  if(!SWIG_lua_isnilstring(L,3)) SWIG_fail_arg("UI_CreateSequence",3,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_uiNode_t,0))){
    SWIG_fail_ptr("create_sequence",1,SWIGTYPE_p_uiNode_t);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  arg3 = (char *)lua_tostring(L, 3);
  result = (uiSequenceNode_t *)UI_CreateSequence(arg1,(char const *)arg2,(char const *)arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_uiSequenceNode_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_create_spinner(lua_State* L) {
  int SWIG_arg = 0;
  uiNode_t *arg1 = (uiNode_t *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  uiSpinnerNode_t *result = 0 ;
  
  SWIG_check_num_args("UI_CreateSpinner",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("UI_CreateSpinner",1,"uiNode_t *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("UI_CreateSpinner",2,"char const *");
  if(!SWIG_lua_isnilstring(L,3)) SWIG_fail_arg("UI_CreateSpinner",3,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_uiNode_t,0))){
    SWIG_fail_ptr("create_spinner",1,SWIGTYPE_p_uiNode_t);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  arg3 = (char *)lua_tostring(L, 3);
  result = (uiSpinnerNode_t *)UI_CreateSpinner(arg1,(char const *)arg2,(char const *)arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_uiSpinnerNode_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_create_string(lua_State* L) {
  int SWIG_arg = 0;
  uiNode_t *arg1 = (uiNode_t *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  uiStringNode_t *result = 0 ;
  
  SWIG_check_num_args("UI_CreateString",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("UI_CreateString",1,"uiNode_t *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("UI_CreateString",2,"char const *");
  if(!SWIG_lua_isnilstring(L,3)) SWIG_fail_arg("UI_CreateString",3,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_uiNode_t,0))){
    SWIG_fail_ptr("create_string",1,SWIGTYPE_p_uiNode_t);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  arg3 = (char *)lua_tostring(L, 3);
  result = (uiStringNode_t *)UI_CreateString(arg1,(char const *)arg2,(char const *)arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_uiStringNode_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_create_tab(lua_State* L) {
  int SWIG_arg = 0;
  uiNode_t *arg1 = (uiNode_t *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  uiTabNode_t *result = 0 ;
  
  SWIG_check_num_args("UI_CreateTab",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("UI_CreateTab",1,"uiNode_t *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("UI_CreateTab",2,"char const *");
  if(!SWIG_lua_isnilstring(L,3)) SWIG_fail_arg("UI_CreateTab",3,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_uiNode_t,0))){
    SWIG_fail_ptr("create_tab",1,SWIGTYPE_p_uiNode_t);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  arg3 = (char *)lua_tostring(L, 3);
  result = (uiTabNode_t *)UI_CreateTab(arg1,(char const *)arg2,(char const *)arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_uiTabNode_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_create_tbar(lua_State* L) {
  int SWIG_arg = 0;
  uiNode_t *arg1 = (uiNode_t *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  uiTBarNode_t *result = 0 ;
  
  SWIG_check_num_args("UI_CreateTBar",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("UI_CreateTBar",1,"uiNode_t *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("UI_CreateTBar",2,"char const *");
  if(!SWIG_lua_isnilstring(L,3)) SWIG_fail_arg("UI_CreateTBar",3,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_uiNode_t,0))){
    SWIG_fail_ptr("create_tbar",1,SWIGTYPE_p_uiNode_t);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  arg3 = (char *)lua_tostring(L, 3);
  result = (uiTBarNode_t *)UI_CreateTBar(arg1,(char const *)arg2,(char const *)arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_uiTBarNode_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_create_text(lua_State* L) {
  int SWIG_arg = 0;
  uiNode_t *arg1 = (uiNode_t *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  uiTextNode_t *result = 0 ;
  
  SWIG_check_num_args("UI_CreateText",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("UI_CreateText",1,"uiNode_t *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("UI_CreateText",2,"char const *");
  if(!SWIG_lua_isnilstring(L,3)) SWIG_fail_arg("UI_CreateText",3,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_uiNode_t,0))){
    SWIG_fail_ptr("create_text",1,SWIGTYPE_p_uiNode_t);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  arg3 = (char *)lua_tostring(L, 3);
  result = (uiTextNode_t *)UI_CreateText(arg1,(char const *)arg2,(char const *)arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_uiTextNode_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_create_text2(lua_State* L) {
  int SWIG_arg = 0;
  uiNode_t *arg1 = (uiNode_t *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  uiText2Node_t *result = 0 ;
  
  SWIG_check_num_args("UI_CreateText2",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("UI_CreateText2",1,"uiNode_t *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("UI_CreateText2",2,"char const *");
  if(!SWIG_lua_isnilstring(L,3)) SWIG_fail_arg("UI_CreateText2",3,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_uiNode_t,0))){
    SWIG_fail_ptr("create_text2",1,SWIGTYPE_p_uiNode_t);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  arg3 = (char *)lua_tostring(L, 3);
  result = (uiText2Node_t *)UI_CreateText2(arg1,(char const *)arg2,(char const *)arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_uiText2Node_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_create_textentry(lua_State* L) {
  int SWIG_arg = 0;
  uiNode_t *arg1 = (uiNode_t *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  uiTextEntryNode_t *result = 0 ;
  
  SWIG_check_num_args("UI_CreateTextEntry",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("UI_CreateTextEntry",1,"uiNode_t *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("UI_CreateTextEntry",2,"char const *");
  if(!SWIG_lua_isnilstring(L,3)) SWIG_fail_arg("UI_CreateTextEntry",3,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_uiNode_t,0))){
    SWIG_fail_ptr("create_textentry",1,SWIGTYPE_p_uiNode_t);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  arg3 = (char *)lua_tostring(L, 3);
  result = (uiTextEntryNode_t *)UI_CreateTextEntry(arg1,(char const *)arg2,(char const *)arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_uiTextEntryNode_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_create_textlist(lua_State* L) {
  int SWIG_arg = 0;
  uiNode_t *arg1 = (uiNode_t *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  uiTextListNode_t *result = 0 ;
  
  SWIG_check_num_args("UI_CreateTextList",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("UI_CreateTextList",1,"uiNode_t *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("UI_CreateTextList",2,"char const *");
  if(!SWIG_lua_isnilstring(L,3)) SWIG_fail_arg("UI_CreateTextList",3,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_uiNode_t,0))){
    SWIG_fail_ptr("create_textlist",1,SWIGTYPE_p_uiNode_t);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  arg3 = (char *)lua_tostring(L, 3);
  result = (uiTextListNode_t *)UI_CreateTextList(arg1,(char const *)arg2,(char const *)arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_uiTextListNode_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_create_texture(lua_State* L) {
  int SWIG_arg = 0;
  uiNode_t *arg1 = (uiNode_t *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  uiTextureNode_t *result = 0 ;
  
  SWIG_check_num_args("UI_CreateTexture",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("UI_CreateTexture",1,"uiNode_t *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("UI_CreateTexture",2,"char const *");
  if(!SWIG_lua_isnilstring(L,3)) SWIG_fail_arg("UI_CreateTexture",3,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_uiNode_t,0))){
    SWIG_fail_ptr("create_texture",1,SWIGTYPE_p_uiNode_t);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  arg3 = (char *)lua_tostring(L, 3);
  result = (uiTextureNode_t *)UI_CreateTexture(arg1,(char const *)arg2,(char const *)arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_uiTextureNode_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_create_timer(lua_State* L) {
  int SWIG_arg = 0;
  uiNode_t *arg1 = (uiNode_t *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  uiTimerNode_t *result = 0 ;
  
  SWIG_check_num_args("UI_CreateTimer",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("UI_CreateTimer",1,"uiNode_t *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("UI_CreateTimer",2,"char const *");
  if(!SWIG_lua_isnilstring(L,3)) SWIG_fail_arg("UI_CreateTimer",3,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_uiNode_t,0))){
    SWIG_fail_ptr("create_timer",1,SWIGTYPE_p_uiNode_t);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  arg3 = (char *)lua_tostring(L, 3);
  result = (uiTimerNode_t *)UI_CreateTimer(arg1,(char const *)arg2,(char const *)arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_uiTimerNode_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_create_video(lua_State* L) {
  int SWIG_arg = 0;
  uiNode_t *arg1 = (uiNode_t *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  uiVideoNode_t *result = 0 ;
  
  SWIG_check_num_args("UI_CreateVideo",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("UI_CreateVideo",1,"uiNode_t *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("UI_CreateVideo",2,"char const *");
  if(!SWIG_lua_isnilstring(L,3)) SWIG_fail_arg("UI_CreateVideo",3,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_uiNode_t,0))){
    SWIG_fail_ptr("create_video",1,SWIGTYPE_p_uiNode_t);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  arg3 = (char *)lua_tostring(L, 3);
  result = (uiVideoNode_t *)UI_CreateVideo(arg1,(char const *)arg2,(char const *)arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_uiVideoNode_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_create_vscrollbar(lua_State* L) {
  int SWIG_arg = 0;
  uiNode_t *arg1 = (uiNode_t *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  uiVScrollBarNode_t *result = 0 ;
  
  SWIG_check_num_args("UI_CreateVScrollbar",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("UI_CreateVScrollbar",1,"uiNode_t *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("UI_CreateVScrollbar",2,"char const *");
  if(!SWIG_lua_isnilstring(L,3)) SWIG_fail_arg("UI_CreateVScrollbar",3,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_uiNode_t,0))){
    SWIG_fail_ptr("create_vscrollbar",1,SWIGTYPE_p_uiNode_t);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  arg3 = (char *)lua_tostring(L, 3);
  result = (uiVScrollBarNode_t *)UI_CreateVScrollbar(arg1,(char const *)arg2,(char const *)arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_uiVScrollBarNode_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_create_widget(lua_State* L) {
  int SWIG_arg = 0;
  uiNode_t *arg1 = (uiNode_t *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  uiWidgetNode_t *result = 0 ;
  
  SWIG_check_num_args("UI_CreateWidget",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("UI_CreateWidget",1,"uiNode_t *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("UI_CreateWidget",2,"char const *");
  if(!SWIG_lua_isnilstring(L,3)) SWIG_fail_arg("UI_CreateWidget",3,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_uiNode_t,0))){
    SWIG_fail_ptr("create_widget",1,SWIGTYPE_p_uiNode_t);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  arg3 = (char *)lua_tostring(L, 3);
  result = (uiWidgetNode_t *)UI_CreateWidget(arg1,(char const *)arg2,(char const *)arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_uiWidgetNode_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_create_window(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  uiWindowNode_t *result = 0 ;
  
  SWIG_check_num_args("UI_CreateWindow",2,2)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("UI_CreateWindow",1,"char const *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("UI_CreateWindow",2,"char const *");
  arg1 = (char *)lua_tostring(L, 1);
  arg2 = (char *)lua_tostring(L, 2);
  result = (uiWindowNode_t *)UI_CreateWindow((char const *)arg1,(char const *)arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_uiWindowNode_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_create_zone(lua_State* L) {
  int SWIG_arg = 0;
  uiNode_t *arg1 = (uiNode_t *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  uiZoneNode_t *result = 0 ;
  
  SWIG_check_num_args("UI_CreateZone",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("UI_CreateZone",1,"uiNode_t *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("UI_CreateZone",2,"char const *");
  if(!SWIG_lua_isnilstring(L,3)) SWIG_fail_arg("UI_CreateZone",3,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_uiNode_t,0))){
    SWIG_fail_ptr("create_zone",1,SWIGTYPE_p_uiNode_t);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  arg3 = (char *)lua_tostring(L, 3);
  result = (uiZoneNode_t *)UI_CreateZone(arg1,(char const *)arg2,(char const *)arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_uiZoneNode_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_create_component(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  uiNode_t *result = 0 ;
  
  SWIG_check_num_args("UI_CreateComponent",3,3)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("UI_CreateComponent",1,"char const *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("UI_CreateComponent",2,"char const *");
  if(!SWIG_lua_isnilstring(L,3)) SWIG_fail_arg("UI_CreateComponent",3,"char const *");
  arg1 = (char *)lua_tostring(L, 1);
  arg2 = (char *)lua_tostring(L, 2);
  arg3 = (char *)lua_tostring(L, 3);
  result = (uiNode_t *)UI_CreateComponent((char const *)arg1,(char const *)arg2,(char const *)arg3);
  {
    if (result) {
      swig_type_info* info=(swig_type_info*)result->behaviour->lua_SWIG_typeinfo;
      SWIG_NewPointerObj(L, result, info, 0); SWIG_arg++;
    }
    else {
      SWIG_NewPointerObj(L, nullptr, nullptr, 0); SWIG_arg++;
    }
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_pop_window(lua_State* L) {
  int SWIG_arg = 0;
  bool arg1 ;
  
  SWIG_check_num_args("UI_PopWindow",1,1)
  if(!lua_isboolean(L,1)) SWIG_fail_arg("UI_PopWindow",1,"bool");
  arg1 = (lua_toboolean(L, 1)!=0);
  UI_PopWindow(arg1);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_push_window(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  linkedList_t *arg3 = (linkedList_t *) 0 ;
  uiNode_t *result = 0 ;
  
  SWIG_check_num_args("UI_PushWindow",3,3)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("UI_PushWindow",1,"char const *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("UI_PushWindow",2,"char const *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("UI_PushWindow",3,"linkedList_t *");
  arg1 = (char *)lua_tostring(L, 1);
  arg2 = (char *)lua_tostring(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_linkedList_t,0))){
    SWIG_fail_ptr("push_window",3,SWIGTYPE_p_linkedList_t);
  }
  
  result = (uiNode_t *)UI_PushWindow((char const *)arg1,(char const *)arg2,arg3);
  {
    if (result) {
      swig_type_info* info=(swig_type_info*)result->behaviour->lua_SWIG_typeinfo;
      SWIG_NewPointerObj(L, result, info, 0); SWIG_arg++;
    }
    else {
      SWIG_NewPointerObj(L, nullptr, nullptr, 0); SWIG_arg++;
    }
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_get_window(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  uiNode_t *result = 0 ;
  
  SWIG_check_num_args("UI_GetWindow",1,1)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("UI_GetWindow",1,"char const *");
  arg1 = (char *)lua_tostring(L, 1);
  result = (uiNode_t *)UI_GetWindow((char const *)arg1);
  {
    if (result) {
      swig_type_info* info=(swig_type_info*)result->behaviour->lua_SWIG_typeinfo;
      SWIG_NewPointerObj(L, result, info, 0); SWIG_arg++;
    }
    else {
      SWIG_NewPointerObj(L, nullptr, nullptr, 0); SWIG_arg++;
    }
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_delete_node(lua_State* L) {
  int SWIG_arg = 0;
  uiNode_t *arg1 = (uiNode_t *) 0 ;
  
  SWIG_check_num_args("UI_DeleteNode",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("UI_DeleteNode",1,"uiNode_t *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_uiNode_t,0))){
    SWIG_fail_ptr("delete_node",1,SWIGTYPE_p_uiNode_t);
  }
  
  UI_DeleteNode(arg1);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cmd(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  
  SWIG_check_num_args("Cbuf_AddText",1,1)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("Cbuf_AddText",1,"char const *");
  arg1 = (char *)lua_tostring(L, 1);
  Cbuf_AddText((char const *)arg1);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_print(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  
  SWIG_check_num_args("Com_Printf",1,1)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("Com_Printf",1,"char const *");
  arg1 = (char *)lua_tostring(L, 1);
  Com_Printf((char const *)arg1);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_dprint(lua_State* L) {
  int SWIG_arg = 0;
  int arg1 ;
  char *arg2 = (char *) 0 ;
  
  SWIG_check_num_args("Com_DPrintf",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Com_DPrintf",1,"int");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("Com_DPrintf",2,"char const *");
  arg1 = (int)lua_tonumber(L, 1);
  arg2 = (char *)lua_tostring(L, 2);
  Com_DPrintf(arg1,(char const *)arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_error(lua_State* L) {
  int SWIG_arg = 0;
  int arg1 ;
  char *arg2 = (char *) 0 ;
  
  SWIG_check_num_args("Com_Error",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Com_Error",1,"int");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("Com_Error",2,"char const *");
  arg1 = (int)lua_tonumber(L, 1);
  arg2 = (char *)lua_tostring(L, 2);
  Com_Error(arg1,(char const *)arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_nodetree(lua_State* L) {
  int SWIG_arg = 0;
  uiNode_t *arg1 = (uiNode_t *) 0 ;
  
  SWIG_check_num_args("UI_PrintNodeTree",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("UI_PrintNodeTree",1,"uiNode_t *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_uiNode_t,0))){
    SWIG_fail_ptr("nodetree",1,SWIGTYPE_p_uiNode_t);
  }
  
  UI_PrintNodeTree(arg1);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UI_GetPath(lua_State* L) {
  int SWIG_arg = 0;
  uiNode_t *arg1 = (uiNode_t *) 0 ;
  char *result = 0 ;
  
  SWIG_check_num_args("UI_GetPath",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("UI_GetPath",1,"uiNode_t const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_uiNode_t,0))){
    SWIG_fail_ptr("UI_GetPath",1,SWIGTYPE_p_uiNode_t);
  }
  
  result = (char *)UI_GetPath((uiNode_t const *)arg1);
  lua_pushstring(L,(const char *)result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_register_onload(lua_State* L) {
  int SWIG_arg = 0;
  LUA_FUNCTION arg1 ;
  
  SWIG_check_num_args("UI_RegisterHandler_OnLoad",1,1)
  {
    arg1 = (LUA_FUNCTION)luaL_ref (L, LUA_REGISTRYINDEX);
  }
  UI_RegisterHandler_OnLoad(arg1);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static swig_lua_attribute swig_SwigModule_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_SwigModule_constants[]= {
    {SWIG_LUA_CONSTTAB_INT("TEXT_NULL", TEXT_NULL)},
    {SWIG_LUA_CONSTTAB_INT("TEXT_STANDARD", TEXT_STANDARD)},
    {SWIG_LUA_CONSTTAB_INT("TEXT_LIST", TEXT_LIST)},
    {SWIG_LUA_CONSTTAB_INT("TEXT_LIST2", TEXT_LIST2)},
    {SWIG_LUA_CONSTTAB_INT("TEXT_UFOPEDIA", TEXT_UFOPEDIA)},
    {SWIG_LUA_CONSTTAB_INT("TEXT_UFOPEDIA_REQUIREMENT", TEXT_UFOPEDIA_REQUIREMENT)},
    {SWIG_LUA_CONSTTAB_INT("TEXT_BUILDINGS", TEXT_BUILDINGS)},
    {SWIG_LUA_CONSTTAB_INT("TEXT_BUILDING_INFO", TEXT_BUILDING_INFO)},
    {SWIG_LUA_CONSTTAB_INT("TEXT_RESEARCH", TEXT_RESEARCH)},
    {SWIG_LUA_CONSTTAB_INT("TEXT_POPUP", TEXT_POPUP)},
    {SWIG_LUA_CONSTTAB_INT("TEXT_POPUP_INFO", TEXT_POPUP_INFO)},
    {SWIG_LUA_CONSTTAB_INT("TEXT_AIRCRAFT_LIST", TEXT_AIRCRAFT_LIST)},
    {SWIG_LUA_CONSTTAB_INT("TEXT_AIRCRAFT_INFO", TEXT_AIRCRAFT_INFO)},
    {SWIG_LUA_CONSTTAB_INT("TEXT_MULTISELECTION", TEXT_MULTISELECTION)},
    {SWIG_LUA_CONSTTAB_INT("TEXT_PRODUCTION_LIST", TEXT_PRODUCTION_LIST)},
    {SWIG_LUA_CONSTTAB_INT("TEXT_PRODUCTION_AMOUNT", TEXT_PRODUCTION_AMOUNT)},
    {SWIG_LUA_CONSTTAB_INT("TEXT_PRODUCTION_INFO", TEXT_PRODUCTION_INFO)},
    {SWIG_LUA_CONSTTAB_INT("TEXT_EMPLOYEE", TEXT_EMPLOYEE)},
    {SWIG_LUA_CONSTTAB_INT("TEXT_MOUSECURSOR_RIGHT", TEXT_MOUSECURSOR_RIGHT)},
    {SWIG_LUA_CONSTTAB_INT("TEXT_PRODUCTION_QUEUED", TEXT_PRODUCTION_QUEUED)},
    {SWIG_LUA_CONSTTAB_INT("TEXT_STATS_MISSION", TEXT_STATS_MISSION)},
    {SWIG_LUA_CONSTTAB_INT("TEXT_STATS_BASES", TEXT_STATS_BASES)},
    {SWIG_LUA_CONSTTAB_INT("TEXT_STATS_NATIONS", TEXT_STATS_NATIONS)},
    {SWIG_LUA_CONSTTAB_INT("TEXT_STATS_EMPLOYEES", TEXT_STATS_EMPLOYEES)},
    {SWIG_LUA_CONSTTAB_INT("TEXT_STATS_COSTS", TEXT_STATS_COSTS)},
    {SWIG_LUA_CONSTTAB_INT("TEXT_STATS_INSTALLATIONS", TEXT_STATS_INSTALLATIONS)},
    {SWIG_LUA_CONSTTAB_INT("TEXT_STATS_7", TEXT_STATS_7)},
    {SWIG_LUA_CONSTTAB_INT("TEXT_BASE_LIST", TEXT_BASE_LIST)},
    {SWIG_LUA_CONSTTAB_INT("TEXT_BASE_INFO", TEXT_BASE_INFO)},
    {SWIG_LUA_CONSTTAB_INT("TEXT_TRANSFER_LIST", TEXT_TRANSFER_LIST)},
    {SWIG_LUA_CONSTTAB_INT("TEXT_TRANSFER_LIST_AMOUNT", TEXT_TRANSFER_LIST_AMOUNT)},
    {SWIG_LUA_CONSTTAB_INT("TEXT_TRANSFER_LIST_TRANSFERED", TEXT_TRANSFER_LIST_TRANSFERED)},
    {SWIG_LUA_CONSTTAB_INT("TEXT_MOUSECURSOR_PLAYERNAMES", TEXT_MOUSECURSOR_PLAYERNAMES)},
    {SWIG_LUA_CONSTTAB_INT("TEXT_CARGO_LIST", TEXT_CARGO_LIST)},
    {SWIG_LUA_CONSTTAB_INT("TEXT_CARGO_LIST_AMOUNT", TEXT_CARGO_LIST_AMOUNT)},
    {SWIG_LUA_CONSTTAB_INT("TEXT_UFOPEDIA_MAILHEADER", TEXT_UFOPEDIA_MAILHEADER)},
    {SWIG_LUA_CONSTTAB_INT("TEXT_UFOPEDIA_MAIL", TEXT_UFOPEDIA_MAIL)},
    {SWIG_LUA_CONSTTAB_INT("TEXT_MARKET_NAMES", TEXT_MARKET_NAMES)},
    {SWIG_LUA_CONSTTAB_INT("TEXT_MARKET_STORAGE", TEXT_MARKET_STORAGE)},
    {SWIG_LUA_CONSTTAB_INT("TEXT_MARKET_MARKET", TEXT_MARKET_MARKET)},
    {SWIG_LUA_CONSTTAB_INT("TEXT_MARKET_PRICES", TEXT_MARKET_PRICES)},
    {SWIG_LUA_CONSTTAB_INT("TEXT_CHAT_WINDOW", TEXT_CHAT_WINDOW)},
    {SWIG_LUA_CONSTTAB_INT("TEXT_AIREQUIP_1", TEXT_AIREQUIP_1)},
    {SWIG_LUA_CONSTTAB_INT("TEXT_AIREQUIP_2", TEXT_AIREQUIP_2)},
    {SWIG_LUA_CONSTTAB_INT("TEXT_BASEDEFENCE_LIST", TEXT_BASEDEFENCE_LIST)},
    {SWIG_LUA_CONSTTAB_INT("TEXT_TIPOFTHEDAY", TEXT_TIPOFTHEDAY)},
    {SWIG_LUA_CONSTTAB_INT("TEXT_GENERIC", TEXT_GENERIC)},
    {SWIG_LUA_CONSTTAB_INT("TEXT_XVI", TEXT_XVI)},
    {SWIG_LUA_CONSTTAB_INT("TEXT_MOUSECURSOR_TOP", TEXT_MOUSECURSOR_TOP)},
    {SWIG_LUA_CONSTTAB_INT("TEXT_MOUSECURSOR_BOTTOM", TEXT_MOUSECURSOR_BOTTOM)},
    {SWIG_LUA_CONSTTAB_INT("TEXT_MOUSECURSOR_LEFT", TEXT_MOUSECURSOR_LEFT)},
    {SWIG_LUA_CONSTTAB_INT("TEXT_MESSAGEOPTIONS", TEXT_MESSAGEOPTIONS)},
    {SWIG_LUA_CONSTTAB_INT("TEXT_UFORECOVERY_NATIONS", TEXT_UFORECOVERY_NATIONS)},
    {SWIG_LUA_CONSTTAB_INT("TEXT_UFORECOVERY_UFOYARDS", TEXT_UFORECOVERY_UFOYARDS)},
    {SWIG_LUA_CONSTTAB_INT("TEXT_UFORECOVERY_CAPACITIES", TEXT_UFORECOVERY_CAPACITIES)},
    {SWIG_LUA_CONSTTAB_INT("TEXT_MATERIAL_STAGES", TEXT_MATERIAL_STAGES)},
    {SWIG_LUA_CONSTTAB_INT("TEXT_IRCCONTENT", TEXT_IRCCONTENT)},
    {SWIG_LUA_CONSTTAB_INT("TEXT_IRCUSERS", TEXT_IRCUSERS)},
    {SWIG_LUA_CONSTTAB_INT("TEXT_MULTIPLAYER_USERLIST", TEXT_MULTIPLAYER_USERLIST)},
    {SWIG_LUA_CONSTTAB_INT("TEXT_MULTIPLAYER_USERTEAM", TEXT_MULTIPLAYER_USERTEAM)},
    {SWIG_LUA_CONSTTAB_INT("TEXT_ITEMDESCRIPTION", TEXT_ITEMDESCRIPTION)},
    {SWIG_LUA_CONSTTAB_INT("TEXT_MISSIONBRIEFING", TEXT_MISSIONBRIEFING)},
    {SWIG_LUA_CONSTTAB_INT("TEXT_MISSIONBRIEFING_TITLE", TEXT_MISSIONBRIEFING_TITLE)},
    {SWIG_LUA_CONSTTAB_INT("TEXT_MISSIONBRIEFING_VICTORY_CONDITIONS", TEXT_MISSIONBRIEFING_VICTORY_CONDITIONS)},
    {SWIG_LUA_CONSTTAB_INT("OPTION_LANGUAGES", OPTION_LANGUAGES)},
    {SWIG_LUA_CONSTTAB_INT("OPTION_JOYSTICKS", OPTION_JOYSTICKS)},
    {SWIG_LUA_CONSTTAB_INT("OPTION_VIDEO_RESOLUTIONS", OPTION_VIDEO_RESOLUTIONS)},
    {SWIG_LUA_CONSTTAB_INT("OPTION_SINGLEPLAYER_SKINS", OPTION_SINGLEPLAYER_SKINS)},
    {SWIG_LUA_CONSTTAB_INT("OPTION_MULTIPLAYER_SKINS", OPTION_MULTIPLAYER_SKINS)},
    {SWIG_LUA_CONSTTAB_INT("OPTION_UFOPEDIA", OPTION_UFOPEDIA)},
    {SWIG_LUA_CONSTTAB_INT("OPTION_UFOS", OPTION_UFOS)},
    {SWIG_LUA_CONSTTAB_INT("OPTION_DROPSHIPS", OPTION_DROPSHIPS)},
    {SWIG_LUA_CONSTTAB_INT("OPTION_BASELIST", OPTION_BASELIST)},
    {SWIG_LUA_CONSTTAB_INT("OPTION_TEAMDEFS", OPTION_TEAMDEFS)},
    {SWIG_LUA_CONSTTAB_INT("OPTION_PRODUCTION_REQUIREMENTS", OPTION_PRODUCTION_REQUIREMENTS)},
    {SWIG_LUA_CONSTTAB_INT("OPTION_CAMPAIGN_LIST", OPTION_CAMPAIGN_LIST)},
    {SWIG_LUA_CONSTTAB_INT("LINESTRIP_FUNDING", LINESTRIP_FUNDING)},
    {SWIG_LUA_CONSTTAB_INT("LINESTRIP_COLOR", LINESTRIP_COLOR)},
    {SWIG_LUA_CONSTTAB_INT("UI_MAX_DATAID", UI_MAX_DATAID)},
    {SWIG_LUA_CONSTTAB_INT("LONGLINES_WRAP", LONGLINES_WRAP)},
    {SWIG_LUA_CONSTTAB_INT("LONGLINES_CHOP", LONGLINES_CHOP)},
    {SWIG_LUA_CONSTTAB_INT("LONGLINES_PRETTYCHOP", LONGLINES_PRETTYCHOP)},
    {SWIG_LUA_CONSTTAB_INT("LONGLINES_LAST", LONGLINES_LAST)},
    {SWIG_LUA_CONSTTAB_INT("ALIGN_UL", ALIGN_UL)},
    {SWIG_LUA_CONSTTAB_INT("ALIGN_UC", ALIGN_UC)},
    {SWIG_LUA_CONSTTAB_INT("ALIGN_UR", ALIGN_UR)},
    {SWIG_LUA_CONSTTAB_INT("ALIGN_CL", ALIGN_CL)},
    {SWIG_LUA_CONSTTAB_INT("ALIGN_CC", ALIGN_CC)},
    {SWIG_LUA_CONSTTAB_INT("ALIGN_CR", ALIGN_CR)},
    {SWIG_LUA_CONSTTAB_INT("ALIGN_LL", ALIGN_LL)},
    {SWIG_LUA_CONSTTAB_INT("ALIGN_LC", ALIGN_LC)},
    {SWIG_LUA_CONSTTAB_INT("ALIGN_LR", ALIGN_LR)},
    {SWIG_LUA_CONSTTAB_INT("ALIGN_UL_RSL", ALIGN_UL_RSL)},
    {SWIG_LUA_CONSTTAB_INT("ALIGN_UC_RSL", ALIGN_UC_RSL)},
    {SWIG_LUA_CONSTTAB_INT("ALIGN_UR_RSL", ALIGN_UR_RSL)},
    {SWIG_LUA_CONSTTAB_INT("ALIGN_CL_RSL", ALIGN_CL_RSL)},
    {SWIG_LUA_CONSTTAB_INT("ALIGN_CC_RSL", ALIGN_CC_RSL)},
    {SWIG_LUA_CONSTTAB_INT("ALIGN_CR_RSL", ALIGN_CR_RSL)},
    {SWIG_LUA_CONSTTAB_INT("ALIGN_LL_RSL", ALIGN_LL_RSL)},
    {SWIG_LUA_CONSTTAB_INT("ALIGN_LC_RSL", ALIGN_LC_RSL)},
    {SWIG_LUA_CONSTTAB_INT("ALIGN_LR_RSL", ALIGN_LR_RSL)},
    {SWIG_LUA_CONSTTAB_INT("LAYOUTALIGN_NONE", LAYOUTALIGN_NONE)},
    {SWIG_LUA_CONSTTAB_INT("LAYOUTALIGN_H_MASK", LAYOUTALIGN_H_MASK)},
    {SWIG_LUA_CONSTTAB_INT("LAYOUTALIGN_H_LEFT", LAYOUTALIGN_H_LEFT)},
    {SWIG_LUA_CONSTTAB_INT("LAYOUTALIGN_H_MIDDLE", LAYOUTALIGN_H_MIDDLE)},
    {SWIG_LUA_CONSTTAB_INT("LAYOUTALIGN_H_RIGHT", LAYOUTALIGN_H_RIGHT)},
    {SWIG_LUA_CONSTTAB_INT("LAYOUTALIGN_V_MASK", LAYOUTALIGN_V_MASK)},
    {SWIG_LUA_CONSTTAB_INT("LAYOUTALIGN_V_TOP", LAYOUTALIGN_V_TOP)},
    {SWIG_LUA_CONSTTAB_INT("LAYOUTALIGN_V_MIDDLE", LAYOUTALIGN_V_MIDDLE)},
    {SWIG_LUA_CONSTTAB_INT("LAYOUTALIGN_V_BOTTOM", LAYOUTALIGN_V_BOTTOM)},
    {SWIG_LUA_CONSTTAB_INT("LAYOUTALIGN_TOPLEFT", LAYOUTALIGN_TOPLEFT)},
    {SWIG_LUA_CONSTTAB_INT("LAYOUTALIGN_TOP", LAYOUTALIGN_TOP)},
    {SWIG_LUA_CONSTTAB_INT("LAYOUTALIGN_TOPRIGHT", LAYOUTALIGN_TOPRIGHT)},
    {SWIG_LUA_CONSTTAB_INT("LAYOUTALIGN_LEFT", LAYOUTALIGN_LEFT)},
    {SWIG_LUA_CONSTTAB_INT("LAYOUTALIGN_MIDDLE", LAYOUTALIGN_MIDDLE)},
    {SWIG_LUA_CONSTTAB_INT("LAYOUTALIGN_RIGHT", LAYOUTALIGN_RIGHT)},
    {SWIG_LUA_CONSTTAB_INT("LAYOUTALIGN_BOTTOMLEFT", LAYOUTALIGN_BOTTOMLEFT)},
    {SWIG_LUA_CONSTTAB_INT("LAYOUTALIGN_BOTTOM", LAYOUTALIGN_BOTTOM)},
    {SWIG_LUA_CONSTTAB_INT("LAYOUTALIGN_BOTTOMRIGHT", LAYOUTALIGN_BOTTOMRIGHT)},
    {SWIG_LUA_CONSTTAB_INT("LAYOUTALIGN_SPECIAL", LAYOUTALIGN_SPECIAL)},
    {SWIG_LUA_CONSTTAB_INT("LAYOUTALIGN_FILL", LAYOUTALIGN_FILL)},
    {SWIG_LUA_CONSTTAB_INT("LAYOUTALIGN_MAX", LAYOUTALIGN_MAX)},
    {SWIG_LUA_CONSTTAB_INT("LAYOUTALIGN_ENSURE_32BIT", LAYOUTALIGN_ENSURE_32BIT)},
    {SWIG_LUA_CONSTTAB_INT("LAYOUT_NONE", LAYOUT_NONE)},
    {SWIG_LUA_CONSTTAB_INT("LAYOUT_TOP_DOWN_FLOW", LAYOUT_TOP_DOWN_FLOW)},
    {SWIG_LUA_CONSTTAB_INT("LAYOUT_LEFT_RIGHT_FLOW", LAYOUT_LEFT_RIGHT_FLOW)},
    {SWIG_LUA_CONSTTAB_INT("LAYOUT_BORDER", LAYOUT_BORDER)},
    {SWIG_LUA_CONSTTAB_INT("LAYOUT_PACK", LAYOUT_PACK)},
    {SWIG_LUA_CONSTTAB_INT("LAYOUT_STAR", LAYOUT_STAR)},
    {SWIG_LUA_CONSTTAB_INT("LAYOUT_CLIENT", LAYOUT_CLIENT)},
    {SWIG_LUA_CONSTTAB_INT("LAYOUT_COLUMN", LAYOUT_COLUMN)},
    {SWIG_LUA_CONSTTAB_INT("LAYOUT_MAX", LAYOUT_MAX)},
    {SWIG_LUA_CONSTTAB_INT("LAYOUT_ENSURE_32BIT", LAYOUT_ENSURE_32BIT)},
    {SWIG_LUA_CONSTTAB_INT("SPINNER_NORMAL", SPINNER_NORMAL)},
    {SWIG_LUA_CONSTTAB_INT("SPINNER_ONLY_INCREASE", SPINNER_ONLY_INCREASE)},
    {SWIG_LUA_CONSTTAB_INT("SPINNER_ONLY_DECREASE", SPINNER_ONLY_DECREASE)},
    {SWIG_LUA_CONSTTAB_INT("FILTER_S_PRIMARY", FILTER_S_PRIMARY)},
    {SWIG_LUA_CONSTTAB_INT("FILTER_S_SECONDARY", FILTER_S_SECONDARY)},
    {SWIG_LUA_CONSTTAB_INT("FILTER_S_HEAVY", FILTER_S_HEAVY)},
    {SWIG_LUA_CONSTTAB_INT("FILTER_S_MISC", FILTER_S_MISC)},
    {SWIG_LUA_CONSTTAB_INT("FILTER_S_ARMOUR", FILTER_S_ARMOUR)},
    {SWIG_LUA_CONSTTAB_INT("FILTER_S_IMPLANT", FILTER_S_IMPLANT)},
    {SWIG_LUA_CONSTTAB_INT("MAX_SOLDIER_FILTERTYPES", MAX_SOLDIER_FILTERTYPES)},
    {SWIG_LUA_CONSTTAB_INT("FILTER_CRAFTITEM", FILTER_CRAFTITEM)},
    {SWIG_LUA_CONSTTAB_INT("FILTER_UGVITEM", FILTER_UGVITEM)},
    {SWIG_LUA_CONSTTAB_INT("FILTER_AIRCRAFT", FILTER_AIRCRAFT)},
    {SWIG_LUA_CONSTTAB_INT("FILTER_DUMMY", FILTER_DUMMY)},
    {SWIG_LUA_CONSTTAB_INT("FILTER_DISASSEMBLY", FILTER_DISASSEMBLY)},
    {SWIG_LUA_CONSTTAB_INT("MAX_FILTERTYPES", MAX_FILTERTYPES)},
    {SWIG_LUA_CONSTTAB_INT("FILTER_ENSURE_32BIT", FILTER_ENSURE_32BIT)},
    {0,0,0,0,0,0}
};
static swig_lua_method swig_SwigModule_methods[]= {
    { "findvar", _wrap_findvar},
    { "getvar", _wrap_getvar},
    { "delvar", _wrap_delvar},
    { "create_control", _wrap_create_control},
    { "UI_CreateBar", _wrap_UI_CreateBar},
    { "UI_CreateBaseMap", _wrap_UI_CreateBaseMap},
    { "UI_CreateBaseLayout", _wrap_UI_CreateBaseLayout},
    { "UI_CreateBaseInventory", _wrap_UI_CreateBaseInventory},
    { "UI_CreateButton", _wrap_UI_CreateButton},
    { "UI_CreateCheckBox", _wrap_UI_CreateCheckBox},
    { "UI_CreateConFunc", _wrap_UI_CreateConFunc},
    { "UI_CreateContainer", _wrap_UI_CreateContainer},
    { "UI_CreateData", _wrap_UI_CreateData},
    { "UI_CreateEkg", _wrap_UI_CreateEkg},
    { "UI_CreateGeoscape", _wrap_UI_CreateGeoscape},
    { "UI_CreateImage", _wrap_UI_CreateImage},
    { "UI_CreateItem", _wrap_UI_CreateItem},
    { "UI_CreateLineChart", _wrap_UI_CreateLineChart},
    { "UI_CreateMessageList", _wrap_UI_CreateMessageList},
    { "UI_CreateModel", _wrap_UI_CreateModel},
    { "UI_CreateOption", _wrap_UI_CreateOption},
    { "UI_CreateOptionList", _wrap_UI_CreateOptionList},
    { "UI_CreateOptionTree", _wrap_UI_CreateOptionTree},
    { "UI_CreatePanel", _wrap_UI_CreatePanel},
    { "UI_CreateRadar", _wrap_UI_CreateRadar},
    { "UI_CreateRadioButton", _wrap_UI_CreateRadioButton},
    { "UI_CreateRows", _wrap_UI_CreateRows},
    { "UI_CreateSelectBox", _wrap_UI_CreateSelectBox},
    { "UI_CreateSequence", _wrap_UI_CreateSequence},
    { "UI_CreateSpinner", _wrap_UI_CreateSpinner},
    { "UI_CreateString", _wrap_UI_CreateString},
    { "UI_CreateTab", _wrap_UI_CreateTab},
    { "UI_CreateTBar", _wrap_UI_CreateTBar},
    { "UI_CreateText", _wrap_UI_CreateText},
    { "UI_CreateText2", _wrap_UI_CreateText2},
    { "UI_CreateTextEntry", _wrap_UI_CreateTextEntry},
    { "UI_CreateTextList", _wrap_UI_CreateTextList},
    { "UI_CreateTexture", _wrap_UI_CreateTexture},
    { "UI_CreateTimer", _wrap_UI_CreateTimer},
    { "UI_CreateVideo", _wrap_UI_CreateVideo},
    { "UI_CreateVScrollbar", _wrap_UI_CreateVScrollbar},
    { "UI_CreateWidget", _wrap_UI_CreateWidget},
    { "UI_CreateWindow", _wrap_UI_CreateWindow},
    { "UI_CreateZone", _wrap_UI_CreateZone},
    { "create_bar", _wrap_create_bar},
    { "create_button", _wrap_create_button},
    { "create_basemap", _wrap_create_basemap},
    { "create_baselayout", _wrap_create_baselayout},
    { "create_baseinventory", _wrap_create_baseinventory},
    { "create_checkbox", _wrap_create_checkbox},
    { "create_confunc", _wrap_create_confunc},
    { "create_container", _wrap_create_container},
    { "create_data", _wrap_create_data},
    { "create_ekg", _wrap_create_ekg},
    { "create_geoscape", _wrap_create_geoscape},
    { "create_image", _wrap_create_image},
    { "create_item", _wrap_create_item},
    { "create_linechart", _wrap_create_linechart},
    { "create_messagelist", _wrap_create_messagelist},
    { "create_model", _wrap_create_model},
    { "create_option", _wrap_create_option},
    { "create_optionlist", _wrap_create_optionlist},
    { "create_optiontree", _wrap_create_optiontree},
    { "create_panel", _wrap_create_panel},
    { "create_radar", _wrap_create_radar},
    { "create_radiobutton", _wrap_create_radiobutton},
    { "create_rows", _wrap_create_rows},
    { "create_selectbox", _wrap_create_selectbox},
    { "create_sequence", _wrap_create_sequence},
    { "create_spinner", _wrap_create_spinner},
    { "create_string", _wrap_create_string},
    { "create_tab", _wrap_create_tab},
    { "create_tbar", _wrap_create_tbar},
    { "create_text", _wrap_create_text},
    { "create_text2", _wrap_create_text2},
    { "create_textentry", _wrap_create_textentry},
    { "create_textlist", _wrap_create_textlist},
    { "create_texture", _wrap_create_texture},
    { "create_timer", _wrap_create_timer},
    { "create_video", _wrap_create_video},
    { "create_vscrollbar", _wrap_create_vscrollbar},
    { "create_widget", _wrap_create_widget},
    { "create_window", _wrap_create_window},
    { "create_zone", _wrap_create_zone},
    { "create_component", _wrap_create_component},
    { "pop_window", _wrap_pop_window},
    { "push_window", _wrap_push_window},
    { "get_window", _wrap_get_window},
    { "delete_node", _wrap_delete_node},
    { "cmd", _wrap_cmd},
    { "print", _wrap_print},
    { "dprint", _wrap_dprint},
    { "error", _wrap_error},
    { "nodetree", _wrap_nodetree},
    { "UI_GetPath", _wrap_UI_GetPath},
    { "register_onload", _wrap_register_onload},
    {0,0}
};
static swig_lua_class* swig_SwigModule_classes[]= {
&_wrap_class_cvar,
&_wrap_class_invDef,
&_wrap_class_uiNode,
&_wrap_class_uiAbstractOptionNode,
&_wrap_class_uiAbstractScrollableNode,
&_wrap_class_uiAbstractScrollbarNode,
&_wrap_class_uiAbstractValueNode,
&_wrap_class_uiBar,
&_wrap_class_uiAbstractBase,
&_wrap_class_uiBaseMap,
&_wrap_class_uiBaseLayout,
&_wrap_class_uiButton,
&_wrap_class_uiCheckBox,
&_wrap_class_uiConFunc,
&_wrap_class_uiContainer,
&_wrap_class_uiBaseInventory,
&_wrap_class_uiData,
&_wrap_class_uiGeoscape,
&_wrap_class_uiImage,
&_wrap_class_uiEkg,
&_wrap_class_uiLineChart,
&_wrap_class_uiMessageList,
&_wrap_class_uiModel,
&_wrap_class_uiItem,
&_wrap_class_uiOption,
&_wrap_class_uiOptionList,
&_wrap_class_uiOptionTree,
&_wrap_class_uiPanel,
&_wrap_class_uiRadar,
&_wrap_class_uiRadioButton,
&_wrap_class_uiRows,
&_wrap_class_uiSelectBox,
&_wrap_class_uiSequence,
&_wrap_class_uiSpinner,
&_wrap_class_uiString,
&_wrap_class_uiTab,
&_wrap_class_uiTBar,
&_wrap_class_uiText,
&_wrap_class_uiText2,
&_wrap_class_uiTextEntry,
&_wrap_class_uiTextList,
&_wrap_class_uiTexture,
&_wrap_class_uiTimer,
&_wrap_class_uiVideo,
&_wrap_class_uiVScrollbar,
&_wrap_class_uiWidget,
&_wrap_class_uiWindow,
&_wrap_class_uiZone,
    0
};
static swig_lua_namespace* swig_SwigModule_namespaces[] = {
    0
};

static swig_lua_namespace swig_SwigModule = {
    "ufo",
    swig_SwigModule_methods,
    swig_SwigModule_attributes,
    swig_SwigModule_constants,
    swig_SwigModule_classes,
    swig_SwigModule_namespaces
};
#ifdef __cplusplus
}
#endif

/* -------- TYPE CONVERSION AND EQUIVALENCE RULES (BEGIN) -------- */

static void *_p_uiBaseInventoryNode_tTo_p_uiContainerNode_t(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((uiContainerNode_t *)  ((uiBaseInventoryNode_t *) x));
}
static void *_p_uiItemNode_tTo_p_uiModelNode_t(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((uiModelNode_t *)  ((uiItemNode_t *) x));
}
static void *_p_uiOptionListNode_tTo_p_uiAbstractOptionNode_t(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((uiAbstractOptionNode_t *)  ((uiOptionListNode_t *) x));
}
static void *_p_uiTabNode_tTo_p_uiAbstractOptionNode_t(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((uiAbstractOptionNode_t *)  ((uiTabNode_t *) x));
}
static void *_p_uiOptionTreeNode_tTo_p_uiAbstractOptionNode_t(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((uiAbstractOptionNode_t *)  ((uiOptionTreeNode_t *) x));
}
static void *_p_uiText2Node_tTo_p_uiTextNode_t(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((uiTextNode_t *)  ((uiText2Node_t *) x));
}
static void *_p_uiTextListNode_tTo_p_uiTextNode_t(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((uiTextNode_t *)  ((uiTextListNode_t *) x));
}
static void *_p_uiVScrollBarNode_tTo_p_uiAbstractScrollbarNode_t(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((uiAbstractScrollbarNode_t *)  ((uiVScrollBarNode_t *) x));
}
static void *_p_uiTBarNode_tTo_p_uiNode_t(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((uiNode_t *) (uiAbstractValueNode_t *) ((uiTBarNode_t *) x));
}
static void *_p_uiTabNode_tTo_p_uiNode_t(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((uiNode_t *) (uiAbstractOptionNode_t *) ((uiTabNode_t *) x));
}
static void *_p_uiSpinnerNode_tTo_p_uiNode_t(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((uiNode_t *) (uiAbstractValueNode_t *) ((uiSpinnerNode_t *) x));
}
static void *_p_uiSelectBoxNode_tTo_p_uiNode_t(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((uiNode_t *)  ((uiSelectBoxNode_t *) x));
}
static void *_p_uiRadioButtonNode_tTo_p_uiNode_t(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((uiNode_t *)  ((uiRadioButtonNode_t *) x));
}
static void *_p_uiRadarNode_tTo_p_uiNode_t(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((uiNode_t *)  ((uiRadarNode_t *) x));
}
static void *_p_uiPanelNode_tTo_p_uiNode_t(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((uiNode_t *) (uiAbstractScrollableNode_t *) ((uiPanelNode_t *) x));
}
static void *_p_uiOptionListNode_tTo_p_uiNode_t(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((uiNode_t *) (uiAbstractOptionNode_t *) ((uiOptionListNode_t *) x));
}
static void *_p_uiOptionNode_tTo_p_uiNode_t(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((uiNode_t *)  ((uiOptionNode_t *) x));
}
static void *_p_uiModelNode_tTo_p_uiNode_t(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((uiNode_t *)  ((uiModelNode_t *) x));
}
static void *_p_uiMessageListNode_tTo_p_uiNode_t(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((uiNode_t *) (uiAbstractScrollableNode_t *) ((uiMessageListNode_t *) x));
}
static void *_p_uiLineChartNode_tTo_p_uiNode_t(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((uiNode_t *)  ((uiLineChartNode_t *) x));
}
static void *_p_uiAbstractOptionNode_tTo_p_uiNode_t(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((uiNode_t *)  ((uiAbstractOptionNode_t *) x));
}
static void *_p_uiAbstractScrollbarNode_tTo_p_uiNode_t(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((uiNode_t *)  ((uiAbstractScrollbarNode_t *) x));
}
static void *_p_uiBarNode_tTo_p_uiNode_t(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((uiNode_t *) (uiAbstractValueNode_t *) ((uiBarNode_t *) x));
}
static void *_p_uiBaseMapNode_tTo_p_uiNode_t(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((uiNode_t *) (uiAbstractBaseNode_t *) ((uiBaseMapNode_t *) x));
}
static void *_p_uiBaseLayoutNode_tTo_p_uiNode_t(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((uiNode_t *) (uiAbstractBaseNode_t *) ((uiBaseLayoutNode_t *) x));
}
static void *_p_uiButtonNode_tTo_p_uiNode_t(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((uiNode_t *)  ((uiButtonNode_t *) x));
}
static void *_p_uiCheckBoxNode_tTo_p_uiNode_t(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((uiNode_t *) (uiAbstractValueNode_t *) ((uiCheckBoxNode_t *) x));
}
static void *_p_uiContainerNode_tTo_p_uiNode_t(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((uiNode_t *)  ((uiContainerNode_t *) x));
}
static void *_p_uiTextNode_tTo_p_uiNode_t(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((uiNode_t *) (uiAbstractScrollableNode_t *) ((uiTextNode_t *) x));
}
static void *_p_uiText2Node_tTo_p_uiNode_t(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((uiNode_t *) (uiAbstractScrollableNode_t *)(uiTextNode_t *) ((uiText2Node_t *) x));
}
static void *_p_uiTextListNode_tTo_p_uiNode_t(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((uiNode_t *) (uiAbstractScrollableNode_t *)(uiTextNode_t *) ((uiTextListNode_t *) x));
}
static void *_p_uiTimerNode_tTo_p_uiNode_t(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((uiNode_t *)  ((uiTimerNode_t *) x));
}
static void *_p_uiVScrollBarNode_tTo_p_uiNode_t(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((uiNode_t *) (uiAbstractScrollbarNode_t *) ((uiVScrollBarNode_t *) x));
}
static void *_p_uiWidgetNode_tTo_p_uiNode_t(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((uiNode_t *) (uiImageNode_t *) ((uiWidgetNode_t *) x));
}
static void *_p_uiStringNode_tTo_p_uiNode_t(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((uiNode_t *)  ((uiStringNode_t *) x));
}
static void *_p_uiSequenceNode_tTo_p_uiNode_t(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((uiNode_t *)  ((uiSequenceNode_t *) x));
}
static void *_p_uiRowsNode_tTo_p_uiNode_t(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((uiNode_t *)  ((uiRowsNode_t *) x));
}
static void *_p_uiOptionTreeNode_tTo_p_uiNode_t(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((uiNode_t *) (uiAbstractOptionNode_t *) ((uiOptionTreeNode_t *) x));
}
static void *_p_uiItemNode_tTo_p_uiNode_t(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((uiNode_t *) (uiModelNode_t *) ((uiItemNode_t *) x));
}
static void *_p_uiEkgNode_tTo_p_uiNode_t(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((uiNode_t *) (uiImageNode_t *) ((uiEkgNode_t *) x));
}
static void *_p_uiImageNode_tTo_p_uiNode_t(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((uiNode_t *)  ((uiImageNode_t *) x));
}
static void *_p_uiGeoscapeNode_tTo_p_uiNode_t(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((uiNode_t *)  ((uiGeoscapeNode_t *) x));
}
static void *_p_uiAbstractScrollableNode_tTo_p_uiNode_t(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((uiNode_t *)  ((uiAbstractScrollableNode_t *) x));
}
static void *_p_uiAbstractValueNode_tTo_p_uiNode_t(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((uiNode_t *)  ((uiAbstractValueNode_t *) x));
}
static void *_p_uiAbstractBaseNode_tTo_p_uiNode_t(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((uiNode_t *)  ((uiAbstractBaseNode_t *) x));
}
static void *_p_uiConFuncNode_tTo_p_uiNode_t(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((uiNode_t *)  ((uiConFuncNode_t *) x));
}
static void *_p_uiBaseInventoryNode_tTo_p_uiNode_t(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((uiNode_t *) (uiContainerNode_t *) ((uiBaseInventoryNode_t *) x));
}
static void *_p_uiDataNode_tTo_p_uiNode_t(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((uiNode_t *)  ((uiDataNode_t *) x));
}
static void *_p_uiTextEntryNode_tTo_p_uiNode_t(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((uiNode_t *)  ((uiTextEntryNode_t *) x));
}
static void *_p_uiTextureNode_tTo_p_uiNode_t(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((uiNode_t *)  ((uiTextureNode_t *) x));
}
static void *_p_uiVideoNode_tTo_p_uiNode_t(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((uiNode_t *)  ((uiVideoNode_t *) x));
}
static void *_p_uiWindowNode_tTo_p_uiNode_t(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((uiNode_t *)  ((uiWindowNode_t *) x));
}
static void *_p_uiZoneNode_tTo_p_uiNode_t(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((uiNode_t *)  ((uiZoneNode_t *) x));
}
static void *_p_uiBarNode_tTo_p_uiAbstractValueNode_t(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((uiAbstractValueNode_t *)  ((uiBarNode_t *) x));
}
static void *_p_uiCheckBoxNode_tTo_p_uiAbstractValueNode_t(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((uiAbstractValueNode_t *)  ((uiCheckBoxNode_t *) x));
}
static void *_p_uiSpinnerNode_tTo_p_uiAbstractValueNode_t(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((uiAbstractValueNode_t *)  ((uiSpinnerNode_t *) x));
}
static void *_p_uiTBarNode_tTo_p_uiAbstractValueNode_t(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((uiAbstractValueNode_t *)  ((uiTBarNode_t *) x));
}
static void *_p_uiBaseMapNode_tTo_p_uiAbstractBaseNode_t(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((uiAbstractBaseNode_t *)  ((uiBaseMapNode_t *) x));
}
static void *_p_uiBaseLayoutNode_tTo_p_uiAbstractBaseNode_t(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((uiAbstractBaseNode_t *)  ((uiBaseLayoutNode_t *) x));
}
static void *_p_uiWidgetNode_tTo_p_uiImageNode_t(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((uiImageNode_t *)  ((uiWidgetNode_t *) x));
}
static void *_p_uiEkgNode_tTo_p_uiImageNode_t(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((uiImageNode_t *)  ((uiEkgNode_t *) x));
}
static void *_p_uiMessageListNode_tTo_p_uiAbstractScrollableNode_t(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((uiAbstractScrollableNode_t *)  ((uiMessageListNode_t *) x));
}
static void *_p_uiPanelNode_tTo_p_uiAbstractScrollableNode_t(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((uiAbstractScrollableNode_t *)  ((uiPanelNode_t *) x));
}
static void *_p_uiTextNode_tTo_p_uiAbstractScrollableNode_t(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((uiAbstractScrollableNode_t *)  ((uiTextNode_t *) x));
}
static void *_p_uiText2Node_tTo_p_uiAbstractScrollableNode_t(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((uiAbstractScrollableNode_t *) (uiTextNode_t *) ((uiText2Node_t *) x));
}
static void *_p_uiTextListNode_tTo_p_uiAbstractScrollableNode_t(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((uiAbstractScrollableNode_t *) (uiTextNode_t *) ((uiTextListNode_t *) x));
}
static swig_type_info _swigt__p_LUA_EVENT = {"_p_LUA_EVENT", "LUA_EVENT *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_LUA_FUNCTION = {"_p_LUA_FUNCTION", "LUA_FUNCTION *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_LUA_METHOD = {"_p_LUA_METHOD", "LUA_METHOD *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_align_t = {"_p_align_t", "enum align_t *|align_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_cvar_t = {"_p_cvar_t", "cvar_t *", 0, 0, (void*)&_wrap_class_cvar, 0};
static swig_type_info _swigt__p_invDef_t = {"_p_invDef_t", "invDef_t *", 0, 0, (void*)&_wrap_class_invDef, 0};
static swig_type_info _swigt__p_itemFilterTypes_t = {"_p_itemFilterTypes_t", "enum itemFilterTypes_t *|itemFilterTypes_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_layoutAlign_t = {"_p_layoutAlign_t", "enum layoutAlign_t *|layoutAlign_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_linkedList_t = {"_p_linkedList_t", "linkedList_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_longlines_t = {"_p_longlines_t", "enum longlines_t *|longlines_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_panelLayout_t = {"_p_panelLayout_t", "enum panelLayout_t *|panelLayout_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_uiAbstractBaseNode_t = {"_p_uiAbstractBaseNode_t", "uiAbstractBaseNode_t *", 0, 0, (void*)&_wrap_class_uiAbstractBase, 0};
static swig_type_info _swigt__p_uiAbstractOptionNode_t = {"_p_uiAbstractOptionNode_t", "uiAbstractOptionNode_t *", 0, 0, (void*)&_wrap_class_uiAbstractOptionNode, 0};
static swig_type_info _swigt__p_uiAbstractScrollableNode_t = {"_p_uiAbstractScrollableNode_t", "uiAbstractScrollableNode_t *", 0, 0, (void*)&_wrap_class_uiAbstractScrollableNode, 0};
static swig_type_info _swigt__p_uiAbstractScrollbarNode_t = {"_p_uiAbstractScrollbarNode_t", "uiAbstractScrollbarNode_t *", 0, 0, (void*)&_wrap_class_uiAbstractScrollbarNode, 0};
static swig_type_info _swigt__p_uiAbstractValueNode_t = {"_p_uiAbstractValueNode_t", "uiAbstractValueNode_t *", 0, 0, (void*)&_wrap_class_uiAbstractValueNode, 0};
static swig_type_info _swigt__p_uiBarNode_t = {"_p_uiBarNode_t", "uiBarNode_t *", 0, 0, (void*)&_wrap_class_uiBar, 0};
static swig_type_info _swigt__p_uiBaseInventoryNode_t = {"_p_uiBaseInventoryNode_t", "uiBaseInventoryNode_t *", 0, 0, (void*)&_wrap_class_uiBaseInventory, 0};
static swig_type_info _swigt__p_uiBaseLayoutNode_t = {"_p_uiBaseLayoutNode_t", "uiBaseLayoutNode_t *", 0, 0, (void*)&_wrap_class_uiBaseLayout, 0};
static swig_type_info _swigt__p_uiBaseMapNode_t = {"_p_uiBaseMapNode_t", "uiBaseMapNode_t *", 0, 0, (void*)&_wrap_class_uiBaseMap, 0};
static swig_type_info _swigt__p_uiButtonNode_t = {"_p_uiButtonNode_t", "uiButtonNode_t *", 0, 0, (void*)&_wrap_class_uiButton, 0};
static swig_type_info _swigt__p_uiCheckBoxNode_t = {"_p_uiCheckBoxNode_t", "uiCheckBoxNode_t *", 0, 0, (void*)&_wrap_class_uiCheckBox, 0};
static swig_type_info _swigt__p_uiConFuncNode_t = {"_p_uiConFuncNode_t", "uiConFuncNode_t *", 0, 0, (void*)&_wrap_class_uiConFunc, 0};
static swig_type_info _swigt__p_uiContainerNode_t = {"_p_uiContainerNode_t", "uiContainerNode_t *", 0, 0, (void*)&_wrap_class_uiContainer, 0};
static swig_type_info _swigt__p_uiDataNode_t = {"_p_uiDataNode_t", "uiDataNode_t *", 0, 0, (void*)&_wrap_class_uiData, 0};
static swig_type_info _swigt__p_uiEkgNode_t = {"_p_uiEkgNode_t", "uiEkgNode_t *", 0, 0, (void*)&_wrap_class_uiEkg, 0};
static swig_type_info _swigt__p_uiGeoscapeNode_t = {"_p_uiGeoscapeNode_t", "uiGeoscapeNode_t *", 0, 0, (void*)&_wrap_class_uiGeoscape, 0};
static swig_type_info _swigt__p_uiImageNode_t = {"_p_uiImageNode_t", "uiImageNode_t *", 0, 0, (void*)&_wrap_class_uiImage, 0};
static swig_type_info _swigt__p_uiItemNode_t = {"_p_uiItemNode_t", "uiItemNode_t *", 0, 0, (void*)&_wrap_class_uiItem, 0};
static swig_type_info _swigt__p_uiLineChartNode_t = {"_p_uiLineChartNode_t", "uiLineChartNode_t *", 0, 0, (void*)&_wrap_class_uiLineChart, 0};
static swig_type_info _swigt__p_uiMessageListNode_t = {"_p_uiMessageListNode_t", "uiMessageListNode_t *", 0, 0, (void*)&_wrap_class_uiMessageList, 0};
static swig_type_info _swigt__p_uiModelNode_t = {"_p_uiModelNode_t", "uiModelNode_t *", 0, 0, (void*)&_wrap_class_uiModel, 0};
static swig_type_info _swigt__p_uiNode_t = {"_p_uiNode_t", "uiNode_t *", 0, 0, (void*)&_wrap_class_uiNode, 0};
static swig_type_info _swigt__p_uiOptionListNode_t = {"_p_uiOptionListNode_t", "uiOptionListNode_t *", 0, 0, (void*)&_wrap_class_uiOptionList, 0};
static swig_type_info _swigt__p_uiOptionNode_t = {"_p_uiOptionNode_t", "uiOptionNode_t *", 0, 0, (void*)&_wrap_class_uiOption, 0};
static swig_type_info _swigt__p_uiOptionTreeNode_t = {"_p_uiOptionTreeNode_t", "uiOptionTreeNode_t *", 0, 0, (void*)&_wrap_class_uiOptionTree, 0};
static swig_type_info _swigt__p_uiPanelNode_t = {"_p_uiPanelNode_t", "uiPanelNode_t *", 0, 0, (void*)&_wrap_class_uiPanel, 0};
static swig_type_info _swigt__p_uiRadarNode_t = {"_p_uiRadarNode_t", "uiRadarNode_t *", 0, 0, (void*)&_wrap_class_uiRadar, 0};
static swig_type_info _swigt__p_uiRadioButtonNode_t = {"_p_uiRadioButtonNode_t", "uiRadioButtonNode_t *", 0, 0, (void*)&_wrap_class_uiRadioButton, 0};
static swig_type_info _swigt__p_uiRowsNode_t = {"_p_uiRowsNode_t", "uiRowsNode_t *", 0, 0, (void*)&_wrap_class_uiRows, 0};
static swig_type_info _swigt__p_uiSelectBoxNode_t = {"_p_uiSelectBoxNode_t", "uiSelectBoxNode_t *", 0, 0, (void*)&_wrap_class_uiSelectBox, 0};
static swig_type_info _swigt__p_uiSequenceNode_t = {"_p_uiSequenceNode_t", "uiSequenceNode_t *", 0, 0, (void*)&_wrap_class_uiSequence, 0};
static swig_type_info _swigt__p_uiSpinnerNode_t = {"_p_uiSpinnerNode_t", "uiSpinnerNode_t *", 0, 0, (void*)&_wrap_class_uiSpinner, 0};
static swig_type_info _swigt__p_uiStringNode_t = {"_p_uiStringNode_t", "uiStringNode_t *", 0, 0, (void*)&_wrap_class_uiString, 0};
static swig_type_info _swigt__p_uiTBarNode_t = {"_p_uiTBarNode_t", "uiTBarNode_t *", 0, 0, (void*)&_wrap_class_uiTBar, 0};
static swig_type_info _swigt__p_uiTabNode_t = {"_p_uiTabNode_t", "uiTabNode_t *", 0, 0, (void*)&_wrap_class_uiTab, 0};
static swig_type_info _swigt__p_uiText2Node_t = {"_p_uiText2Node_t", "uiText2Node_t *", 0, 0, (void*)&_wrap_class_uiText2, 0};
static swig_type_info _swigt__p_uiTextEntryNode_t = {"_p_uiTextEntryNode_t", "uiTextEntryNode_t *", 0, 0, (void*)&_wrap_class_uiTextEntry, 0};
static swig_type_info _swigt__p_uiTextListNode_t = {"_p_uiTextListNode_t", "uiTextListNode_t *", 0, 0, (void*)&_wrap_class_uiTextList, 0};
static swig_type_info _swigt__p_uiTextNode_t = {"_p_uiTextNode_t", "uiTextNode_t *", 0, 0, (void*)&_wrap_class_uiText, 0};
static swig_type_info _swigt__p_uiTextureNode_t = {"_p_uiTextureNode_t", "uiTextureNode_t *", 0, 0, (void*)&_wrap_class_uiTexture, 0};
static swig_type_info _swigt__p_uiTimerNode_t = {"_p_uiTimerNode_t", "uiTimerNode_t *", 0, 0, (void*)&_wrap_class_uiTimer, 0};
static swig_type_info _swigt__p_uiVScrollBarNode_t = {"_p_uiVScrollBarNode_t", "uiVScrollBarNode_t *", 0, 0, (void*)&_wrap_class_uiVScrollbar, 0};
static swig_type_info _swigt__p_uiVideoNode_t = {"_p_uiVideoNode_t", "uiVideoNode_t *", 0, 0, (void*)&_wrap_class_uiVideo, 0};
static swig_type_info _swigt__p_uiWidgetNode_t = {"_p_uiWidgetNode_t", "uiWidgetNode_t *", 0, 0, (void*)&_wrap_class_uiWidget, 0};
static swig_type_info _swigt__p_uiWindowNode_t = {"_p_uiWindowNode_t", "uiWindowNode_t *", 0, 0, (void*)&_wrap_class_uiWindow, 0};
static swig_type_info _swigt__p_uiZoneNode_t = {"_p_uiZoneNode_t", "uiZoneNode_t *", 0, 0, (void*)&_wrap_class_uiZone, 0};
static swig_type_info _swigt__p_vec2_struct_t = {"_p_vec2_struct_t", "vec2_struct_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_vec3_struct_t = {"_p_vec3_struct_t", "vec3_struct_t *", 0, 0, (void*)0, 0};

static swig_type_info *swig_type_initial[] = {
  &_swigt__p_LUA_EVENT,
  &_swigt__p_LUA_FUNCTION,
  &_swigt__p_LUA_METHOD,
  &_swigt__p_align_t,
  &_swigt__p_cvar_t,
  &_swigt__p_invDef_t,
  &_swigt__p_itemFilterTypes_t,
  &_swigt__p_layoutAlign_t,
  &_swigt__p_linkedList_t,
  &_swigt__p_longlines_t,
  &_swigt__p_panelLayout_t,
  &_swigt__p_uiAbstractBaseNode_t,
  &_swigt__p_uiAbstractOptionNode_t,
  &_swigt__p_uiAbstractScrollableNode_t,
  &_swigt__p_uiAbstractScrollbarNode_t,
  &_swigt__p_uiAbstractValueNode_t,
  &_swigt__p_uiBarNode_t,
  &_swigt__p_uiBaseInventoryNode_t,
  &_swigt__p_uiBaseLayoutNode_t,
  &_swigt__p_uiBaseMapNode_t,
  &_swigt__p_uiButtonNode_t,
  &_swigt__p_uiCheckBoxNode_t,
  &_swigt__p_uiConFuncNode_t,
  &_swigt__p_uiContainerNode_t,
  &_swigt__p_uiDataNode_t,
  &_swigt__p_uiEkgNode_t,
  &_swigt__p_uiGeoscapeNode_t,
  &_swigt__p_uiImageNode_t,
  &_swigt__p_uiItemNode_t,
  &_swigt__p_uiLineChartNode_t,
  &_swigt__p_uiMessageListNode_t,
  &_swigt__p_uiModelNode_t,
  &_swigt__p_uiNode_t,
  &_swigt__p_uiOptionListNode_t,
  &_swigt__p_uiOptionNode_t,
  &_swigt__p_uiOptionTreeNode_t,
  &_swigt__p_uiPanelNode_t,
  &_swigt__p_uiRadarNode_t,
  &_swigt__p_uiRadioButtonNode_t,
  &_swigt__p_uiRowsNode_t,
  &_swigt__p_uiSelectBoxNode_t,
  &_swigt__p_uiSequenceNode_t,
  &_swigt__p_uiSpinnerNode_t,
  &_swigt__p_uiStringNode_t,
  &_swigt__p_uiTBarNode_t,
  &_swigt__p_uiTabNode_t,
  &_swigt__p_uiText2Node_t,
  &_swigt__p_uiTextEntryNode_t,
  &_swigt__p_uiTextListNode_t,
  &_swigt__p_uiTextNode_t,
  &_swigt__p_uiTextureNode_t,
  &_swigt__p_uiTimerNode_t,
  &_swigt__p_uiVScrollBarNode_t,
  &_swigt__p_uiVideoNode_t,
  &_swigt__p_uiWidgetNode_t,
  &_swigt__p_uiWindowNode_t,
  &_swigt__p_uiZoneNode_t,
  &_swigt__p_vec2_struct_t,
  &_swigt__p_vec3_struct_t,
};

static swig_cast_info _swigc__p_LUA_EVENT[] = {  {&_swigt__p_LUA_EVENT, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_LUA_FUNCTION[] = {  {&_swigt__p_LUA_FUNCTION, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_LUA_METHOD[] = {  {&_swigt__p_LUA_METHOD, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_align_t[] = {  {&_swigt__p_align_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_cvar_t[] = {  {&_swigt__p_cvar_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_invDef_t[] = {  {&_swigt__p_invDef_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_itemFilterTypes_t[] = {  {&_swigt__p_itemFilterTypes_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_layoutAlign_t[] = {  {&_swigt__p_layoutAlign_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_linkedList_t[] = {  {&_swigt__p_linkedList_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_longlines_t[] = {  {&_swigt__p_longlines_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_panelLayout_t[] = {  {&_swigt__p_panelLayout_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_uiAbstractBaseNode_t[] = {  {&_swigt__p_uiBaseMapNode_t, _p_uiBaseMapNode_tTo_p_uiAbstractBaseNode_t, 0, 0},  {&_swigt__p_uiBaseLayoutNode_t, _p_uiBaseLayoutNode_tTo_p_uiAbstractBaseNode_t, 0, 0},  {&_swigt__p_uiAbstractBaseNode_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_uiAbstractOptionNode_t[] = {  {&_swigt__p_uiAbstractOptionNode_t, 0, 0, 0},  {&_swigt__p_uiOptionListNode_t, _p_uiOptionListNode_tTo_p_uiAbstractOptionNode_t, 0, 0},  {&_swigt__p_uiTabNode_t, _p_uiTabNode_tTo_p_uiAbstractOptionNode_t, 0, 0},  {&_swigt__p_uiOptionTreeNode_t, _p_uiOptionTreeNode_tTo_p_uiAbstractOptionNode_t, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_uiAbstractScrollableNode_t[] = {  {&_swigt__p_uiMessageListNode_t, _p_uiMessageListNode_tTo_p_uiAbstractScrollableNode_t, 0, 0},  {&_swigt__p_uiPanelNode_t, _p_uiPanelNode_tTo_p_uiAbstractScrollableNode_t, 0, 0},  {&_swigt__p_uiTextNode_t, _p_uiTextNode_tTo_p_uiAbstractScrollableNode_t, 0, 0},  {&_swigt__p_uiText2Node_t, _p_uiText2Node_tTo_p_uiAbstractScrollableNode_t, 0, 0},  {&_swigt__p_uiTextListNode_t, _p_uiTextListNode_tTo_p_uiAbstractScrollableNode_t, 0, 0},  {&_swigt__p_uiAbstractScrollableNode_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_uiAbstractScrollbarNode_t[] = {  {&_swigt__p_uiAbstractScrollbarNode_t, 0, 0, 0},  {&_swigt__p_uiVScrollBarNode_t, _p_uiVScrollBarNode_tTo_p_uiAbstractScrollbarNode_t, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_uiAbstractValueNode_t[] = {  {&_swigt__p_uiBarNode_t, _p_uiBarNode_tTo_p_uiAbstractValueNode_t, 0, 0},  {&_swigt__p_uiCheckBoxNode_t, _p_uiCheckBoxNode_tTo_p_uiAbstractValueNode_t, 0, 0},  {&_swigt__p_uiSpinnerNode_t, _p_uiSpinnerNode_tTo_p_uiAbstractValueNode_t, 0, 0},  {&_swigt__p_uiTBarNode_t, _p_uiTBarNode_tTo_p_uiAbstractValueNode_t, 0, 0},  {&_swigt__p_uiAbstractValueNode_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_uiBarNode_t[] = {  {&_swigt__p_uiBarNode_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_uiBaseInventoryNode_t[] = {  {&_swigt__p_uiBaseInventoryNode_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_uiBaseLayoutNode_t[] = {  {&_swigt__p_uiBaseLayoutNode_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_uiBaseMapNode_t[] = {  {&_swigt__p_uiBaseMapNode_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_uiButtonNode_t[] = {  {&_swigt__p_uiButtonNode_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_uiCheckBoxNode_t[] = {  {&_swigt__p_uiCheckBoxNode_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_uiConFuncNode_t[] = {  {&_swigt__p_uiConFuncNode_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_uiContainerNode_t[] = {  {&_swigt__p_uiContainerNode_t, 0, 0, 0},  {&_swigt__p_uiBaseInventoryNode_t, _p_uiBaseInventoryNode_tTo_p_uiContainerNode_t, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_uiDataNode_t[] = {  {&_swigt__p_uiDataNode_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_uiEkgNode_t[] = {  {&_swigt__p_uiEkgNode_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_uiGeoscapeNode_t[] = {  {&_swigt__p_uiGeoscapeNode_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_uiImageNode_t[] = {  {&_swigt__p_uiWidgetNode_t, _p_uiWidgetNode_tTo_p_uiImageNode_t, 0, 0},  {&_swigt__p_uiImageNode_t, 0, 0, 0},  {&_swigt__p_uiEkgNode_t, _p_uiEkgNode_tTo_p_uiImageNode_t, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_uiItemNode_t[] = {  {&_swigt__p_uiItemNode_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_uiLineChartNode_t[] = {  {&_swigt__p_uiLineChartNode_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_uiMessageListNode_t[] = {  {&_swigt__p_uiMessageListNode_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_uiModelNode_t[] = {  {&_swigt__p_uiModelNode_t, 0, 0, 0},  {&_swigt__p_uiItemNode_t, _p_uiItemNode_tTo_p_uiModelNode_t, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_uiNode_t[] = {  {&_swigt__p_uiAbstractOptionNode_t, _p_uiAbstractOptionNode_tTo_p_uiNode_t, 0, 0},  {&_swigt__p_uiLineChartNode_t, _p_uiLineChartNode_tTo_p_uiNode_t, 0, 0},  {&_swigt__p_uiMessageListNode_t, _p_uiMessageListNode_tTo_p_uiNode_t, 0, 0},  {&_swigt__p_uiModelNode_t, _p_uiModelNode_tTo_p_uiNode_t, 0, 0},  {&_swigt__p_uiOptionNode_t, _p_uiOptionNode_tTo_p_uiNode_t, 0, 0},  {&_swigt__p_uiOptionListNode_t, _p_uiOptionListNode_tTo_p_uiNode_t, 0, 0},  {&_swigt__p_uiPanelNode_t, _p_uiPanelNode_tTo_p_uiNode_t, 0, 0},  {&_swigt__p_uiRadarNode_t, _p_uiRadarNode_tTo_p_uiNode_t, 0, 0},  {&_swigt__p_uiRadioButtonNode_t, _p_uiRadioButtonNode_tTo_p_uiNode_t, 0, 0},  {&_swigt__p_uiSelectBoxNode_t, _p_uiSelectBoxNode_tTo_p_uiNode_t, 0, 0},  {&_swigt__p_uiSpinnerNode_t, _p_uiSpinnerNode_tTo_p_uiNode_t, 0, 0},  {&_swigt__p_uiTabNode_t, _p_uiTabNode_tTo_p_uiNode_t, 0, 0},  {&_swigt__p_uiTBarNode_t, _p_uiTBarNode_tTo_p_uiNode_t, 0, 0},  {&_swigt__p_uiAbstractScrollbarNode_t, _p_uiAbstractScrollbarNode_tTo_p_uiNode_t, 0, 0},  {&_swigt__p_uiWidgetNode_t, _p_uiWidgetNode_tTo_p_uiNode_t, 0, 0},  {&_swigt__p_uiVScrollBarNode_t, _p_uiVScrollBarNode_tTo_p_uiNode_t, 0, 0},  {&_swigt__p_uiTimerNode_t, _p_uiTimerNode_tTo_p_uiNode_t, 0, 0},  {&_swigt__p_uiTextListNode_t, _p_uiTextListNode_tTo_p_uiNode_t, 0, 0},  {&_swigt__p_uiText2Node_t, _p_uiText2Node_tTo_p_uiNode_t, 0, 0},  {&_swigt__p_uiTextNode_t, _p_uiTextNode_tTo_p_uiNode_t, 0, 0},  {&_swigt__p_uiContainerNode_t, _p_uiContainerNode_tTo_p_uiNode_t, 0, 0},  {&_swigt__p_uiCheckBoxNode_t, _p_uiCheckBoxNode_tTo_p_uiNode_t, 0, 0},  {&_swigt__p_uiButtonNode_t, _p_uiButtonNode_tTo_p_uiNode_t, 0, 0},  {&_swigt__p_uiBaseLayoutNode_t, _p_uiBaseLayoutNode_tTo_p_uiNode_t, 0, 0},  {&_swigt__p_uiBaseMapNode_t, _p_uiBaseMapNode_tTo_p_uiNode_t, 0, 0},  {&_swigt__p_uiBarNode_t, _p_uiBarNode_tTo_p_uiNode_t, 0, 0},  {&_swigt__p_uiSequenceNode_t, _p_uiSequenceNode_tTo_p_uiNode_t, 0, 0},  {&_swigt__p_uiRowsNode_t, _p_uiRowsNode_tTo_p_uiNode_t, 0, 0},  {&_swigt__p_uiEkgNode_t, _p_uiEkgNode_tTo_p_uiNode_t, 0, 0},  {&_swigt__p_uiImageNode_t, _p_uiImageNode_tTo_p_uiNode_t, 0, 0},  {&_swigt__p_uiOptionTreeNode_t, _p_uiOptionTreeNode_tTo_p_uiNode_t, 0, 0},  {&_swigt__p_uiItemNode_t, _p_uiItemNode_tTo_p_uiNode_t, 0, 0},  {&_swigt__p_uiNode_t, 0, 0, 0},  {&_swigt__p_uiBaseInventoryNode_t, _p_uiBaseInventoryNode_tTo_p_uiNode_t, 0, 0},  {&_swigt__p_uiStringNode_t, _p_uiStringNode_tTo_p_uiNode_t, 0, 0},  {&_swigt__p_uiGeoscapeNode_t, _p_uiGeoscapeNode_tTo_p_uiNode_t, 0, 0},  {&_swigt__p_uiAbstractScrollableNode_t, _p_uiAbstractScrollableNode_tTo_p_uiNode_t, 0, 0},  {&_swigt__p_uiAbstractValueNode_t, _p_uiAbstractValueNode_tTo_p_uiNode_t, 0, 0},  {&_swigt__p_uiAbstractBaseNode_t, _p_uiAbstractBaseNode_tTo_p_uiNode_t, 0, 0},  {&_swigt__p_uiConFuncNode_t, _p_uiConFuncNode_tTo_p_uiNode_t, 0, 0},  {&_swigt__p_uiDataNode_t, _p_uiDataNode_tTo_p_uiNode_t, 0, 0},  {&_swigt__p_uiTextEntryNode_t, _p_uiTextEntryNode_tTo_p_uiNode_t, 0, 0},  {&_swigt__p_uiTextureNode_t, _p_uiTextureNode_tTo_p_uiNode_t, 0, 0},  {&_swigt__p_uiVideoNode_t, _p_uiVideoNode_tTo_p_uiNode_t, 0, 0},  {&_swigt__p_uiWindowNode_t, _p_uiWindowNode_tTo_p_uiNode_t, 0, 0},  {&_swigt__p_uiZoneNode_t, _p_uiZoneNode_tTo_p_uiNode_t, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_uiOptionListNode_t[] = {  {&_swigt__p_uiOptionListNode_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_uiOptionNode_t[] = {  {&_swigt__p_uiOptionNode_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_uiOptionTreeNode_t[] = {  {&_swigt__p_uiOptionTreeNode_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_uiPanelNode_t[] = {  {&_swigt__p_uiPanelNode_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_uiRadarNode_t[] = {  {&_swigt__p_uiRadarNode_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_uiRadioButtonNode_t[] = {  {&_swigt__p_uiRadioButtonNode_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_uiRowsNode_t[] = {  {&_swigt__p_uiRowsNode_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_uiSelectBoxNode_t[] = {  {&_swigt__p_uiSelectBoxNode_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_uiSequenceNode_t[] = {  {&_swigt__p_uiSequenceNode_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_uiSpinnerNode_t[] = {  {&_swigt__p_uiSpinnerNode_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_uiStringNode_t[] = {  {&_swigt__p_uiStringNode_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_uiTBarNode_t[] = {  {&_swigt__p_uiTBarNode_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_uiTabNode_t[] = {  {&_swigt__p_uiTabNode_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_uiText2Node_t[] = {  {&_swigt__p_uiText2Node_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_uiTextEntryNode_t[] = {  {&_swigt__p_uiTextEntryNode_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_uiTextListNode_t[] = {  {&_swigt__p_uiTextListNode_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_uiTextNode_t[] = {  {&_swigt__p_uiTextNode_t, 0, 0, 0},  {&_swigt__p_uiText2Node_t, _p_uiText2Node_tTo_p_uiTextNode_t, 0, 0},  {&_swigt__p_uiTextListNode_t, _p_uiTextListNode_tTo_p_uiTextNode_t, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_uiTextureNode_t[] = {  {&_swigt__p_uiTextureNode_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_uiTimerNode_t[] = {  {&_swigt__p_uiTimerNode_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_uiVScrollBarNode_t[] = {  {&_swigt__p_uiVScrollBarNode_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_uiVideoNode_t[] = {  {&_swigt__p_uiVideoNode_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_uiWidgetNode_t[] = {  {&_swigt__p_uiWidgetNode_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_uiWindowNode_t[] = {  {&_swigt__p_uiWindowNode_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_uiZoneNode_t[] = {  {&_swigt__p_uiZoneNode_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_vec2_struct_t[] = {  {&_swigt__p_vec2_struct_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_vec3_struct_t[] = {  {&_swigt__p_vec3_struct_t, 0, 0, 0},{0, 0, 0, 0}};

static swig_cast_info *swig_cast_initial[] = {
  _swigc__p_LUA_EVENT,
  _swigc__p_LUA_FUNCTION,
  _swigc__p_LUA_METHOD,
  _swigc__p_align_t,
  _swigc__p_cvar_t,
  _swigc__p_invDef_t,
  _swigc__p_itemFilterTypes_t,
  _swigc__p_layoutAlign_t,
  _swigc__p_linkedList_t,
  _swigc__p_longlines_t,
  _swigc__p_panelLayout_t,
  _swigc__p_uiAbstractBaseNode_t,
  _swigc__p_uiAbstractOptionNode_t,
  _swigc__p_uiAbstractScrollableNode_t,
  _swigc__p_uiAbstractScrollbarNode_t,
  _swigc__p_uiAbstractValueNode_t,
  _swigc__p_uiBarNode_t,
  _swigc__p_uiBaseInventoryNode_t,
  _swigc__p_uiBaseLayoutNode_t,
  _swigc__p_uiBaseMapNode_t,
  _swigc__p_uiButtonNode_t,
  _swigc__p_uiCheckBoxNode_t,
  _swigc__p_uiConFuncNode_t,
  _swigc__p_uiContainerNode_t,
  _swigc__p_uiDataNode_t,
  _swigc__p_uiEkgNode_t,
  _swigc__p_uiGeoscapeNode_t,
  _swigc__p_uiImageNode_t,
  _swigc__p_uiItemNode_t,
  _swigc__p_uiLineChartNode_t,
  _swigc__p_uiMessageListNode_t,
  _swigc__p_uiModelNode_t,
  _swigc__p_uiNode_t,
  _swigc__p_uiOptionListNode_t,
  _swigc__p_uiOptionNode_t,
  _swigc__p_uiOptionTreeNode_t,
  _swigc__p_uiPanelNode_t,
  _swigc__p_uiRadarNode_t,
  _swigc__p_uiRadioButtonNode_t,
  _swigc__p_uiRowsNode_t,
  _swigc__p_uiSelectBoxNode_t,
  _swigc__p_uiSequenceNode_t,
  _swigc__p_uiSpinnerNode_t,
  _swigc__p_uiStringNode_t,
  _swigc__p_uiTBarNode_t,
  _swigc__p_uiTabNode_t,
  _swigc__p_uiText2Node_t,
  _swigc__p_uiTextEntryNode_t,
  _swigc__p_uiTextListNode_t,
  _swigc__p_uiTextNode_t,
  _swigc__p_uiTextureNode_t,
  _swigc__p_uiTimerNode_t,
  _swigc__p_uiVScrollBarNode_t,
  _swigc__p_uiVideoNode_t,
  _swigc__p_uiWidgetNode_t,
  _swigc__p_uiWindowNode_t,
  _swigc__p_uiZoneNode_t,
  _swigc__p_vec2_struct_t,
  _swigc__p_vec3_struct_t,
};


/* -------- TYPE CONVERSION AND EQUIVALENCE RULES (END) -------- */

/* -----------------------------------------------------------------------------
 * Type initialization:
 * This problem is tough by the requirement that no dynamic
 * memory is used. Also, since swig_type_info structures store pointers to
 * swig_cast_info structures and swig_cast_info structures store pointers back
 * to swig_type_info structures, we need some lookup code at initialization.
 * The idea is that swig generates all the structures that are needed.
 * The runtime then collects these partially filled structures.
 * The SWIG_InitializeModule function takes these initial arrays out of
 * swig_module, and does all the lookup, filling in the swig_module.types
 * array with the correct data and linking the correct swig_cast_info
 * structures together.
 *
 * The generated swig_type_info structures are assigned statically to an initial
 * array. We just loop through that array, and handle each type individually.
 * First we lookup if this type has been already loaded, and if so, use the
 * loaded structure instead of the generated one. Then we have to fill in the
 * cast linked list. The cast data is initially stored in something like a
 * two-dimensional array. Each row corresponds to a type (there are the same
 * number of rows as there are in the swig_type_initial array). Each entry in
 * a column is one of the swig_cast_info structures for that type.
 * The cast_initial array is actually an array of arrays, because each row has
 * a variable number of columns. So to actually build the cast linked list,
 * we find the array of casts associated with the type, and loop through it
 * adding the casts to the list. The one last trick we need to do is making
 * sure the type pointer in the swig_cast_info struct is correct.
 *
 * First off, we lookup the cast->type name to see if it is already loaded.
 * There are three cases to handle:
 *  1) If the cast->type has already been loaded AND the type we are adding
 *     casting info to has not been loaded (it is in this module), THEN we
 *     replace the cast->type pointer with the type pointer that has already
 *     been loaded.
 *  2) If BOTH types (the one we are adding casting info to, and the
 *     cast->type) are loaded, THEN the cast info has already been loaded by
 *     the previous module so we just ignore it.
 *  3) Finally, if cast->type has not already been loaded, then we add that
 *     swig_cast_info to the linked list (because the cast->type) pointer will
 *     be correct.
 * ----------------------------------------------------------------------------- */

#ifdef __cplusplus
extern "C" {
#if 0
} /* c-mode */
#endif
#endif

#if 0
#define SWIGRUNTIME_DEBUG
#endif


SWIGRUNTIME void
SWIG_InitializeModule(void *clientdata) {
  size_t i;
  swig_module_info *module_head, *iter;
  int init;

  /* check to see if the circular list has been setup, if not, set it up */
  if (swig_module.next==0) {
    /* Initialize the swig_module */
    swig_module.type_initial = swig_type_initial;
    swig_module.cast_initial = swig_cast_initial;
    swig_module.next = &swig_module;
    init = 1;
  } else {
    init = 0;
  }

  /* Try and load any already created modules */
  module_head = SWIG_GetModule(clientdata);
  if (!module_head) {
    /* This is the first module loaded for this interpreter */
    /* so set the swig module into the interpreter */
    SWIG_SetModule(clientdata, &swig_module);
  } else {
    /* the interpreter has loaded a SWIG module, but has it loaded this one? */
    iter=module_head;
    do {
      if (iter==&swig_module) {
        /* Our module is already in the list, so there's nothing more to do. */
        return;
      }
      iter=iter->next;
    } while (iter!= module_head);

    /* otherwise we must add our module into the list */
    swig_module.next = module_head->next;
    module_head->next = &swig_module;
  }

  /* When multiple interpreters are used, a module could have already been initialized in
     a different interpreter, but not yet have a pointer in this interpreter.
     In this case, we do not want to continue adding types... everything should be
     set up already */
  if (init == 0) return;

  /* Now work on filling in swig_module.types */
#ifdef SWIGRUNTIME_DEBUG
  printf("SWIG_InitializeModule: size %d\n", swig_module.size);
#endif
  for (i = 0; i < swig_module.size; ++i) {
    swig_type_info *type = 0;
    swig_type_info *ret;
    swig_cast_info *cast;

#ifdef SWIGRUNTIME_DEBUG
    printf("SWIG_InitializeModule: type %d %s\n", i, swig_module.type_initial[i]->name);
#endif

    /* if there is another module already loaded */
    if (swig_module.next != &swig_module) {
      type = SWIG_MangledTypeQueryModule(swig_module.next, &swig_module, swig_module.type_initial[i]->name);
    }
    if (type) {
      /* Overwrite clientdata field */
#ifdef SWIGRUNTIME_DEBUG
      printf("SWIG_InitializeModule: found type %s\n", type->name);
#endif
      if (swig_module.type_initial[i]->clientdata) {
	type->clientdata = swig_module.type_initial[i]->clientdata;
#ifdef SWIGRUNTIME_DEBUG
      printf("SWIG_InitializeModule: found and overwrite type %s \n", type->name);
#endif
      }
    } else {
      type = swig_module.type_initial[i];
    }

    /* Insert casting types */
    cast = swig_module.cast_initial[i];
    while (cast->type) {

      /* Don't need to add information already in the list */
      ret = 0;
#ifdef SWIGRUNTIME_DEBUG
      printf("SWIG_InitializeModule: look cast %s\n", cast->type->name);
#endif
      if (swig_module.next != &swig_module) {
        ret = SWIG_MangledTypeQueryModule(swig_module.next, &swig_module, cast->type->name);
#ifdef SWIGRUNTIME_DEBUG
	if (ret) printf("SWIG_InitializeModule: found cast %s\n", ret->name);
#endif
      }
      if (ret) {
	if (type == swig_module.type_initial[i]) {
#ifdef SWIGRUNTIME_DEBUG
	  printf("SWIG_InitializeModule: skip old type %s\n", ret->name);
#endif
	  cast->type = ret;
	  ret = 0;
	} else {
	  /* Check for casting already in the list */
	  swig_cast_info *ocast = SWIG_TypeCheck(ret->name, type);
#ifdef SWIGRUNTIME_DEBUG
	  if (ocast) printf("SWIG_InitializeModule: skip old cast %s\n", ret->name);
#endif
	  if (!ocast) ret = 0;
	}
      }

      if (!ret) {
#ifdef SWIGRUNTIME_DEBUG
	printf("SWIG_InitializeModule: adding cast %s\n", cast->type->name);
#endif
        if (type->cast) {
          type->cast->prev = cast;
          cast->next = type->cast;
        }
        type->cast = cast;
      }
      cast++;
    }
    /* Set entry in modules->types array equal to the type */
    swig_module.types[i] = type;
  }
  swig_module.types[i] = 0;

#ifdef SWIGRUNTIME_DEBUG
  printf("**** SWIG_InitializeModule: Cast List ******\n");
  for (i = 0; i < swig_module.size; ++i) {
    int j = 0;
    swig_cast_info *cast = swig_module.cast_initial[i];
    printf("SWIG_InitializeModule: type %d %s\n", i, swig_module.type_initial[i]->name);
    while (cast->type) {
      printf("SWIG_InitializeModule: cast type %s\n", cast->type->name);
      cast++;
      ++j;
    }
  printf("---- Total casts: %d\n",j);
  }
  printf("**** SWIG_InitializeModule: Cast List ******\n");
#endif
}

/* This function will propagate the clientdata field of type to
* any new swig_type_info structures that have been added into the list
* of equivalent types.  It is like calling
* SWIG_TypeClientData(type, clientdata) a second time.
*/
SWIGRUNTIME void
SWIG_PropagateClientData(void) {
  size_t i;
  swig_cast_info *equiv;
  static int init_run = 0;

  if (init_run) return;
  init_run = 1;

  for (i = 0; i < swig_module.size; i++) {
    if (swig_module.types[i]->clientdata) {
      equiv = swig_module.types[i]->cast;
      while (equiv) {
        if (!equiv->converter) {
          if (equiv->type && !equiv->type->clientdata)
            SWIG_TypeClientData(equiv->type, swig_module.types[i]->clientdata);
        }
        equiv = equiv->next;
      }
    }
  }
}

#ifdef __cplusplus
#if 0
{ /* c-mode */
#endif
}
#endif



/* Forward declaration of where the user's %init{} gets inserted */
void SWIG_init_user(lua_State* L );
    
#ifdef __cplusplus
extern "C" {
#endif
/* this is the initialization function
  added at the very end of the code
  the function is always called SWIG_init, but an earlier #define will rename it
*/
#if ((SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUA) || (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUAC))
LUALIB_API int SWIG_init(lua_State* L)
#else
SWIGEXPORT int SWIG_init(lua_State* L) /* default Lua action */
#endif
{
#if (SWIG_LUA_TARGET != SWIG_LUA_FLAVOR_ELUAC) /* valid for both Lua and eLua */
  int i;
  int globalRegister = 0;
  /* start with global table */
  lua_pushglobaltable (L);
  /* SWIG's internal initialisation */
  SWIG_InitializeModule((void*)L);
  SWIG_PropagateClientData();
#endif

#if ((SWIG_LUA_TARGET != SWIG_LUA_FLAVOR_ELUA) && (SWIG_LUA_TARGET != SWIG_LUA_FLAVOR_ELUAC)) || defined(SWIG_LUA_ELUA_EMULATE)
  /* add a global fn */
  SWIG_Lua_add_function(L,"swig_type",SWIG_Lua_type);
  SWIG_Lua_add_function(L,"swig_equals",SWIG_Lua_class_equal);
#endif

#if (SWIG_LUA_TARGET != SWIG_LUA_FLAVOR_ELUAC)
  /* set up base class pointers (the hierarchy) */
  for (i = 0; swig_types[i]; i++){
    if (swig_types[i]->clientdata){
      SWIG_Lua_init_base_class(L,(swig_lua_class*)(swig_types[i]->clientdata));
    }
  }
#ifdef SWIG_LUA_MODULE_GLOBAL
  globalRegister = 1;
#endif


#if (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_LUA)
  SWIG_Lua_namespace_register(L,&swig_SwigModule, globalRegister);
#endif

#if (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUA) || (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUAC)
  for (i = 0; swig_types[i]; i++){
    if (swig_types[i]->clientdata){
      SWIG_Lua_elua_class_register_instance(L,(swig_lua_class*)(swig_types[i]->clientdata));
    }
  }
#endif

#if defined(SWIG_LUA_ELUA_EMULATE)
  lua_newtable(L);
  SWIG_Lua_elua_emulate_register(L,swig_SwigModule.ns_methods);
  SWIG_Lua_elua_emulate_register_clear(L);
  if(globalRegister) {
    lua_pushstring(L,swig_SwigModule.name);
    lua_pushvalue(L,-2);
    lua_rawset(L,-4);
  }
#endif

#endif

#if (SWIG_LUA_TARGET != SWIG_LUA_FLAVOR_ELUAC)
  /* invoke user-specific initialization */
  SWIG_init_user(L);
  /* end module */
  /* Note: We do not clean up the stack here (Lua will do this for us). At this
     point, we have the globals table and out module table on the stack. Returning
     one value makes the module table the result of the require command. */
  return 1;
#else
  return 0;
#endif
}

#ifdef __cplusplus
}
#endif


const char* SWIG_LUACODE=
  "";

void SWIG_init_user(lua_State* L)
{
  /* exec Lua code if applicable */
  SWIG_Lua_dostring(L,SWIG_LUACODE);
}

