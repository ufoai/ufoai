// ==================
// HUD INTERFACE
// ==================

/*
 * @TODO:
 * - Most of this is built for the old UI, but there are some things that have to
 *   stay. It's not yet clear to me what, but cmpFiremodeEntry has been changed to
 *   new UI.
 */

// Firemode entry
component cmpFiremodeEntry extends panel {
	{
		pos				"0 0"
		size			"206 45"
		bgcolor			"0 0.15 0.1 0.7"
		bordercolor		"0.58 0.81 0.758 0.7"
		border			"2"
		align			LAYOUTALIGN_TOP
		onMouseEnter	{ *node:this@bgcolor = "0 0.21 0.158 0.7" }
		onMouseLeave	{ *node:this@bgcolor = "0 0.15 0.1 0.7"	}
		onRClick		{ cmd "ui_close <path:root>;" }
		onClick	{
			cmd "ui_close <path:root>;"
			cmd "hud_executeaction <node:this.actionid@string>;"
		}
	}
	string name
	{
		pos 		"5 0"
		size 		"196 25"
		color		"0.58 0.81 0.758 0.7"
		contentalign ALIGN_CL
		ghost 		true
	}
	button fm_res
	{
		pos		"5 25"
		size	"15 15"
		icon	"icons/firemodesml0"
		tooltip	"_Use this firemode for reaction fire"
		onClick	{ cmd "hud_selectreactionfiremode <node:parent.hand@string> <node:parent.index@string>;" }
	}
	button tu_icon
	{
		pos		"110 23"
		size	"18 19"
		icon	"icons/tusml"
		ghost	true
	}
	string tu
	{
		pos 		"130 27"
		size 		"35 15"
		color		"0.58 0.81 0.758 0.7"
		contentalign ALIGN_CL
		ghost 		true
		font		"f_verysmall"
	}
	button ammo_icon
	{
		pos		"165 25"
		size	"12 15"
		icon	"icons/ammosml"
		ghost	true
	}
	string shot
	{
		pos 		"180 27"
		size 		"25 15"
		color		"0.58 0.81 0.758 0.7"
		contentalign ALIGN_CL
		ghost 		true
		font		"f_verysmall"
	}
	// store the actionid
	string actionid {
		size	"0 0"
		invis	true
	}
	// store the hand
	string hand {
		size	"0 0"
		invis	true
	}
	// store the index of the firemode
	string index {
		size	"0 0"
		invis	true
	}

	/**
	 * @param<1> id
	 * @param<2> hand (char) (l or r for left or right)
	 * @param<3> firedef index (int)
	 * @param<4> firedef reaction fire (int) (1= true, 0= false)
	 * @param<5> status (1 available, 0 need more TU)
	 * @param<6> name (string)
	 * @param<7> TUs (string)
	 * @param<8> shots (string)
	 * @param<9> tooltip
	 */
	func init {
		*node:parent.actionid@string = "<1>"
		*node:parent.hand@string = "<2>"
		*node:parent.index@string = "<3>"

		*node:parent.name@string = "<6>"
		*node:parent.tu@string = "<7>"
		*node:parent.shot@string = "<8>"
		*node:parent.tu@tooltip = "<9>"

		if ( <5> eq "1" ) {
			*node:parent.name@color = "0.58 0.81 0.758 0.7"
		} else {
			*node:parent.name@color = "0.58 0.81 0.758 0.3"
		}

		if ( <4> eq "0" ) {
			*node:parent.fm_res@invis = true
		}
	}

	/**
	 * @param<1> activate (1=activate, 0=deactivate)
	 */
	func init_reaction {
		if ( <1> eq "1" ) {
			*node:parent.fm_res@icon = "icons/firemodesml"
		} else {
			*node:parent.fm_res@icon = "icons/firemodesml0"
		}
	}
}

window levelbuttons {
	/**
	 * @brief Updates the level status
	 * @param <1> Level id (0-7)
	 * @param <2> State
	 *   0 = disabled (map doesn't have this level),
	 *   1 = available (user can switch to this level)
	 *   2 = active (the current selected level)
	 */
	confunc updateLevelStatus { }
}

window reactionfire_listener {
	/**
	 * @brief The reaction fire mode was changed
	 * @note no parameters
	 */
	confunc reactionfire_updated { }
}

/**
 * @brief Define interface shared by all huds.
 * @note called "ahud" to be loaded before another huds
 * @todo rename the interface confuncs
 */
window hud extends levelbuttons {

	/**
	 * This is called when the hud is initially pushed onto the stack - only called once per battlescape match
	 */
	confunc hudinit { }
	/**
	 * This is called when you select one of your actors
	 * @param <1> the actor index
	 */
	confunc hudselect { }
	/**
	 * This is called for each actor in your team to enable the actor selection buttons
	 * @param <1> the actor index
	 */
	confunc hudenable { }
	/**
	 * This is called for each actor slot that is not used, or when an actor died
	 * @param <1> the actor index
	 */
	confunc huddisable { cmd "updateactorvalues <1> \"\" \"0\" \"1\" \"0\" \"1\" \"0\" \"1\" \"0\" \"\";" }

	confunc deselect_primaryleft { }
	confunc deselect_primaryright { }
	confunc deselect_reloadleft { }
	confunc deselect_reloadright { }
	/**
	 * This is called on a repeating loop when the selected soldier's stance
	 * is crouched.
	 */
	confunc deselect_stand { }
	/**
	 * This is called on a repeating loop when the selected soldier's stance
	 * is standing.
	 */
	confunc deselect_crouch { }
	confunc deselect_reaction { }
	confunc deselect_headgear { }

	/**
	 * This is called when the selected actor enters/leaves an area that allows him to interact
	 * with the world (e.g. opening a door
	 */
	confunc enable_clientaction { }
	confunc disable_clientaction { }

	/**
	 * This is called when a rescuezone is available in the given map
	 */
	confunc enable_rescuezone { }
	/**
	 * This is called when no rescuezone is available in the given map
	 */
	confunc disable_rescuezone { }

	confunc disable_primaryleft { }
	confunc disable_primaryright { }
	confunc disable_reloadleft { }
	confunc disable_reloadright { }
	/**
	 * These confuncs are called when the selected soldier no longer
	 * has enough TUs to change stance. disable_stand is called if this
	 * this condition is reached while the soldier was standing.
	 * disable_crouch is called if this condition is reached while the
	 * soldier was crouching.
	 */
	confunc disable_stand { }
	confunc disable_crouch { }
	confunc disable_reaction { }
	confunc disable_headgear { }

	/* Prevent time for crouch */
	confunc crouch_checkbox_disable { }
	confunc crouch_checkbox_clear { }
	confunc crouch_checkbox_check { }

	confunc reserve_shot_clear { }

	confunc reserve_shot_check { }

	confunc reserve_shot_disable { }

	confunc startreaction { }
	confunc startreaction_impos { }

	confunc startround { }
	confunc endround { }

	// confuncs to show/hide inventory, physdat and radar windows
	confunc show_hide_inventory
	{
		cmd "show_inventory;"
	}
	confunc show_hide_physdat
	{
		cmd "show_physdat;"
	}

	confunc show_inventory { }
	confunc show_physdat { }

	/**
	 * @param <1> the id of the soldier (starting at 0)
	 * @param <2> the model path of the head model
	 * @param <3> the hp of the actor
	 * @param <4> the max hp of the actor
	 * @param <5> the tus of the actor
	 * @param <6> the max tus of the actor
	 * @param <7> the morale of the actor
	 * @param <8> the max morale of the actor
	 * @param <9> the stun value of the actor
	 * @param <10> the tooltip
	 */
	confunc updateactorvalues {
		*cvar:mn_head<1> = "<2>"
		*cvar:mn_hp<1> = "<3>"
		*cvar:mn_hpmax<1> = "<4>"
		*cvar:mn_tu<1> = "<5>"
		*cvar:mn_tumax<1> = "<6>"
		*cvar:mn_morale<1> = "<7>"
		*cvar:mn_moralemax<1> = "<8>"
		*cvar:mn_stun<1> = "<9>"
		*cvar:mn_soldier<1>_tt = "<10>"
	}

	/**
	 * @param <1> The id of the soldier (starting at 0)
	 * @param <2> The status type
	 * @param <3> The value of the status
	 */
	confunc updateactorstatus { }

	confunc clean_firemode_entries {
		call *node:root.firemodes.dock@removeAllChild
	}

	/**
	 * @param<1> hand [l|r]
	 * @param<2> firedef id (int)
	 * @param<3> name (string)
	 * @param<4> TUs (string)
	 * @param<5> shots (int)
	 * @param<6> reaction [0|1]
	 * @param<7> status [0|1]
	 * @param<6> firedef selected [0|1]
	 */
	confunc add_firemode_entry
	{
		call *node:root.firemodes.dock@createChild ( "<1><2>" , "cmpFiremodeEntry" )
		*node:root.firemodes.dock.<1><2>.hand@string = <1>
		*node:root.firemodes.dock.<1><2>.id@string = <2>
		*node:root.firemodes.dock.<1><2>.name@string = <3>
		*node:root.firemodes.dock.<1><2>.tu@string = <4>
		*node:root.firemodes.dock.<1><2>.shot@string = <5>
	}

	panel firemodes {
		{
			layout	LAYOUT_PACK
			size	"1024 768"
		}

		panel dock {
			{
				pos				"0 0"
				size			"300 768"
				layout			LAYOUT_PACK
				padding			0
				layoutmargin	2
			}

			panel bottomMargin {
				align		LAYOUTALIGN_TOP
				size		"280 30"
			}
		}
	}
}

// ==================
//  FIREMODES (seperate lists for each weaponhand)
// ==================
/*
	fm ... firemode
	left/right/l/r  ... The hand/side of the firemode list
	name ... The name of the firemode.
	tu ... timeunits
	shots ... The number of shots one firemode will use.
	tt ... tooltip
	cb ... checkboxes
	a ... active
	ina ... inactive
	vis ... visible
	inv ... invisible
*/
window firemode_left extends reactionfire_listener
{
	{
		pos			"622 0"
		size		"255 700"
		dropdown	true
		ghost		true
	}

	zone anchor
	{
		pos		"23 700"
		size	"192 0"
	}

	panel elements {
		pos		"0 0"
		size	"255 700"
	}

	func onWindowOpened {
		cmd "hud_listfiremodes firemode_listener l;"
	}

	/**
	 * @brief The reaction fire mode was changed
	 * @note no parameters
	 */
	confunc reactionfire_updated {
		cmd "hud_listfiremodes firemode_listener l;"
	}
}

window firemode_right extends reactionfire_listener {
	{
		pos			"164 0"
		size		"255 700"
		dropdown	true
		ghost		true
	}

	zone anchor
	{
		pos		"23 700"
		size	"192 0"
	}

	panel elements {
		pos		"0 0"
		size	"255 700"
	}

	func onWindowOpened {
		cmd "hud_listfiremodes firemode_listener r;"
	}

	/**
	 * @brief The reaction fire mode was changed
	 * @note no parameters
	 */
	confunc reactionfire_updated {
		cmd "hud_listfiremodes firemode_listener r;"
	}
}

window hud_general
{
	func hide_firemodes {
		call *node:firemode_left.elements@removeAllChild
		call *node:firemode_right.elements@removeAllChild
	}

	confunc firemode_listener {
		if (<1> eq "begin") {
			call *node:parent.hide_firemodes
			*cvar:i = 1
		} elif (<1> eq "firemode") {
			// @todo use autolayout instead of @top
			*cvar:side = <3>

			if (<3> eq "l") {
				call *node:firemode_left.elements@createChild("<2>", "cmpFiremodeEntry")
				*node:firemode_left.elements.<2>@top = (*node:firemode_left.elements@height - (63 * *cvar:i))
				call *node:firemode_left.elements.<2>.init(<2>, <3>, <4>, <5>, <6>, <7>, <8>, <9>, <10>)
			} else {
				call *node:firemode_right.elements@createChild("<2>", "cmpFiremodeEntry")
				*node:firemode_right.elements.<2>@top = (*node:firemode_right.elements@height - (63 * *cvar:i))
				call *node:firemode_right.elements.<2>.init(<2>, <3>, <4>, <5>, <6>, <7>, <8>, <9>, <10>)
			}
			*cvar:i = (*cvar:i + 1)

		} elif (<1> eq "reaction") {
			// node: "firemode" command for action <2> already called
			if (<3> eq "l") {
				call *node:firemode_left.elements.<2>.init_reaction(<4>)
			} else {
				call *node:firemode_right.elements.<2>.init_reaction(<4>)
			}
		} elif (<1> eq "reload") {
		} elif (<1> eq "end") {
			delete *cvar:i
			delete *cvar:side
		} else {
			cmd "echo firemode_listener: unknown \"<1>\" command;"
		}
	}
}

